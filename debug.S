
kbin/x86_64/debug/r3_kernel:     file format elf64-x86-64


Disassembly of section .text:

0000000000203350 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4f6f716800d15974E>:
                // shift away low bits
                bits >> range.start
            }

            #[inline]
            fn set_bit(&mut self, bit: usize, value: bool) -> &mut Self {
  203350:	48 83 ec 38          	sub    $0x38,%rsp
  203354:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  203359:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20335e:	88 d0                	mov    %dl,%al
  203360:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  203364:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  203369:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  20336e:	24 01                	and    $0x1,%al
  203370:	88 44 24 37          	mov    %al,0x37(%rsp)
                assert!(bit < Self::BIT_LENGTH);
  203374:	48 83 fe 10          	cmp    $0x10,%rsi
  203378:	0f 92 c0             	setb   %al
  20337b:	34 ff                	xor    $0xff,%al
  20337d:	a8 01                	test   $0x1,%al
  20337f:	75 0a                	jne    20338b <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4f6f716800d15974E+0x3b>
  203381:	8a 44 24 1f          	mov    0x1f(%rsp),%al

                if value {
  203385:	a8 01                	test   $0x1,%al
  203387:	75 45                	jne    2033ce <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4f6f716800d15974E+0x7e>
  203389:	eb 1a                	jmp    2033a5 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4f6f716800d15974E+0x55>
                assert!(bit < Self::BIT_LENGTH);
  20338b:	48 8d 3d 6e ce ff ff 	lea    -0x3192(%rip),%rdi        # 200200 <str.0-0x90>
  203392:	48 8d 15 77 f5 00 00 	lea    0xf577(%rip),%rdx        # 212910 <memset+0x1030>
  203399:	be 28 00 00 00       	mov    $0x28,%esi
  20339e:	e8 ed ba 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2033a3:	0f 0b                	ud2    
  2033a5:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
                    *self |= 1 << bit;
                } else {
                    *self &= !(1 << bit);
  2033aa:	48 89 c8             	mov    %rcx,%rax
  2033ad:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  2033b1:	48 83 f8 00          	cmp    $0x0,%rax
  2033b5:	0f 95 c0             	setne  %al
  2033b8:	66 83 e1 0f          	and    $0xf,%cx
  2033bc:	66 ba 01 00          	mov    $0x1,%dx
  2033c0:	66 d3 e2             	shl    %cl,%dx
  2033c3:	66 89 54 24 06       	mov    %dx,0x6(%rsp)
  2033c8:	a8 01                	test   $0x1,%al
  2033ca:	75 75                	jne    203441 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4f6f716800d15974E+0xf1>
  2033cc:	eb 5d                	jmp    20342b <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4f6f716800d15974E+0xdb>
  2033ce:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
                    *self |= 1 << bit;
  2033d3:	48 89 c8             	mov    %rcx,%rax
  2033d6:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  2033da:	48 83 f8 00          	cmp    $0x0,%rax
  2033de:	0f 95 c0             	setne  %al
  2033e1:	66 83 e1 0f          	and    $0xf,%cx
  2033e5:	66 ba 01 00          	mov    $0x1,%dx
  2033e9:	66 d3 e2             	shl    %cl,%dx
  2033ec:	66 89 54 24 04       	mov    %dx,0x4(%rsp)
  2033f1:	a8 01                	test   $0x1,%al
  2033f3:	75 12                	jne    203407 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4f6f716800d15974E+0xb7>
  2033f5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2033fa:	66 8b 4c 24 04       	mov    0x4(%rsp),%cx
  2033ff:	66 0b 08             	or     (%rax),%cx
  203402:	66 89 08             	mov    %cx,(%rax)
                if value {
  203405:	eb 1a                	jmp    203421 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4f6f716800d15974E+0xd1>
                    *self |= 1 << bit;
  203407:	48 8d 3d 82 ce ff ff 	lea    -0x317e(%rip),%rdi        # 200290 <str.0>
  20340e:	48 8d 15 fb f4 00 00 	lea    0xf4fb(%rip),%rdx        # 212910 <memset+0x1030>
  203415:	be 23 00 00 00       	mov    $0x23,%esi
  20341a:	e8 71 ba 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20341f:	0f 0b                	ud2    
  203421:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
                }

                self
            }
  203426:	48 83 c4 38          	add    $0x38,%rsp
  20342a:	c3                   	retq   
  20342b:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  203430:	66 8b 4c 24 06       	mov    0x6(%rsp),%cx
                    *self &= !(1 << bit);
  203435:	66 83 f1 ff          	xor    $0xffff,%cx
  203439:	66 23 08             	and    (%rax),%cx
  20343c:	66 89 08             	mov    %cx,(%rax)
                if value {
  20343f:	eb e0                	jmp    203421 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4f6f716800d15974E+0xd1>
                    *self &= !(1 << bit);
  203441:	48 8d 3d 48 ce ff ff 	lea    -0x31b8(%rip),%rdi        # 200290 <str.0>
  203448:	48 8d 15 c1 f4 00 00 	lea    0xf4c1(%rip),%rdx        # 212910 <memset+0x1030>
  20344f:	be 23 00 00 00       	mov    $0x23,%esi
  203454:	e8 37 ba 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  203459:	0f 0b                	ud2    
  20345b:	cc                   	int3   
  20345c:	cc                   	int3   
  20345d:	cc                   	int3   
  20345e:	cc                   	int3   
  20345f:	cc                   	int3   

0000000000203460 <_ZN9r3_kernel3cpu8segments4lgdt17ha22c06219a02a0cfE>:
}

// core assembly functions:

// Loads the GDT, after this, the segment register must be reloaded.
fn lgdt(ptr: &GDTPointer) {
  203460:	50                   	push   %rax
  203461:	48 89 3c 24          	mov    %rdi,(%rsp)
    unsafe {
        asm!(
  203465:	0f 01 17             	lgdt   (%rdi)
            "lgdt [{0}]", in(reg) ptr,
            options(readonly, nostack, preserves_flags)
        )
    }
}
  203468:	58                   	pop    %rax
  203469:	c3                   	retq   
  20346a:	cc                   	int3   
  20346b:	cc                   	int3   
  20346c:	cc                   	int3   
  20346d:	cc                   	int3   
  20346e:	cc                   	int3   
  20346f:	cc                   	int3   

0000000000203470 <_ZN9r3_kernel3cpu8segments14special_set_cs17hf7c6b88a693a19b8E>:

// CS register cannot be reloaded with the new value like
// other DS, ES, SS, FS or GS registeres. So this is a special case.
fn special_set_cs(value: u16) {
  203470:	48 83 ec 18          	sub    $0x18,%rsp
  203474:	66 89 f8             	mov    %di,%ax
  203477:	66 89 44 24 16       	mov    %ax,0x16(%rsp)
            "push {sel}",
            "lea {tmp}, [1f + rip]",
            "push {tmp}",
            "retfq",
            "1:",
            sel = in(reg) u64::from(value),
  20347c:	0f b7 f8             	movzwl %ax,%edi
  20347f:	e8 dc 8a 00 00       	callq  20bf60 <_ZN4core7convert3num64_$LT$impl$u20$core..convert..From$LT$u16$GT$$u20$for$u20$u64$GT$4from17h0f0bf1c063626619E>
  203484:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  203489:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
        asm!(
  20348e:	50                   	push   %rax
  20348f:	48 8d 05 03 00 00 00 	lea    0x3(%rip),%rax        # 203499 <_ZN9r3_kernel3cpu8segments14special_set_cs17hf7c6b88a693a19b8E+0x29>
  203496:	50                   	push   %rax
  203497:	48 cb                	lretq  
            tmp = lateout(reg) _,
            options(preserves_flags),
        );
    }
}
  203499:	48 83 c4 18          	add    $0x18,%rsp
  20349d:	c3                   	retq   
  20349e:	cc                   	int3   
  20349f:	cc                   	int3   

00000000002034a0 <_ZN9r3_kernel3cpu8segments8load_tss17h2c868d95eb8693b2E>:

fn load_tss(value: u16) {
  2034a0:	48 83 ec 02          	sub    $0x2,%rsp
  2034a4:	66 89 f8             	mov    %di,%ax
  2034a7:	66 89 04 24          	mov    %ax,(%rsp)
    unsafe {
        asm! (
  2034ab:	0f 00 d8             	ltr    %ax
            "ltr {:x}", in(reg) value,
            options(nomem, nostack, preserves_flags)
        );
    }
}
  2034ae:	48 83 c4 02          	add    $0x2,%rsp
  2034b2:	c3                   	retq   
  2034b3:	cc                   	int3   
  2034b4:	cc                   	int3   
  2034b5:	cc                   	int3   
  2034b6:	cc                   	int3   
  2034b7:	cc                   	int3   
  2034b8:	cc                   	int3   
  2034b9:	cc                   	int3   
  2034ba:	cc                   	int3   
  2034bb:	cc                   	int3   
  2034bc:	cc                   	int3   
  2034bd:	cc                   	int3   
  2034be:	cc                   	int3   
  2034bf:	cc                   	int3   

00000000002034c0 <_ZN9r3_kernel3cpu8segments15SegmentSelector3new17h1b50231228efbbc3E>:
#[derive(Debug)]
pub struct SegmentSelector(pub u16);

impl SegmentSelector {
    #[inline]
    pub fn new(index: u16, ring: PrivilegeLevel) -> SegmentSelector {
  2034c0:	48 83 ec 0a          	sub    $0xa,%rsp
  2034c4:	40 88 f1             	mov    %sil,%cl
  2034c7:	88 4c 24 01          	mov    %cl,0x1(%rsp)
  2034cb:	66 89 f8             	mov    %di,%ax
  2034ce:	66 89 44 24 06       	mov    %ax,0x6(%rsp)
  2034d3:	88 4c 24 09          	mov    %cl,0x9(%rsp)
        SegmentSelector(index << 3 | (ring as u16))
  2034d7:	66 c1 e0 03          	shl    $0x3,%ax
  2034db:	66 89 44 24 02       	mov    %ax,0x2(%rsp)
  2034e0:	66 8b 44 24 02       	mov    0x2(%rsp),%ax
  2034e5:	8a 4c 24 01          	mov    0x1(%rsp),%cl
  2034e9:	0f b6 c9             	movzbl %cl,%ecx
  2034ec:	66 09 c8             	or     %cx,%ax
  2034ef:	66 89 44 24 04       	mov    %ax,0x4(%rsp)
    }
  2034f4:	66 8b 44 24 04       	mov    0x4(%rsp),%ax
  2034f9:	48 83 c4 0a          	add    $0xa,%rsp
  2034fd:	c3                   	retq   
  2034fe:	cc                   	int3   
  2034ff:	cc                   	int3   

0000000000203500 <_ZN9r3_kernel3cpu8segments15SegmentRegister3set17hd55eb3fbfc8ddbefE>:
    FS,
    GS,
}

impl SegmentRegister {
    pub fn set(&self, value: u16) {
  203500:	48 83 ec 28          	sub    $0x28,%rsp
  203504:	66 89 f0             	mov    %si,%ax
  203507:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  20350c:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  203511:	66 89 44 24 26       	mov    %ax,0x26(%rsp)
        match self {
  203516:	0f b6 07             	movzbl (%rdi),%eax
  203519:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20351e:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  203523:	48 8d 0d 8a cd ff ff 	lea    -0x3276(%rip),%rcx        # 2002b4 <str.0+0x24>
  20352a:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  20352e:	48 01 c8             	add    %rcx,%rax
  203531:	ff e0                	jmpq   *%rax
  203533:	0f 0b                	ud2    
  203535:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
            SegmentRegister::CS => special_set_cs(value),
  20353a:	0f b7 f8             	movzwl %ax,%edi
  20353d:	e8 2e ff ff ff       	callq  203470 <_ZN9r3_kernel3cpu8segments14special_set_cs17hf7c6b88a693a19b8E>
  203542:	eb 30                	jmp    203574 <_ZN9r3_kernel3cpu8segments15SegmentRegister3set17hd55eb3fbfc8ddbefE+0x74>
  203544:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
                    "mov gs, {:x}", in(reg) value,
                    options(nostack, preserves_flags)
                )
            },
            SegmentRegister::SS => unsafe {
                asm!(
  203549:	66 8e d0             	mov    %ax,%ss
  20354c:	eb 26                	jmp    203574 <_ZN9r3_kernel3cpu8segments15SegmentRegister3set17hd55eb3fbfc8ddbefE+0x74>
  20354e:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
                asm!(
  203553:	66 8e d8             	mov    %ax,%ds
  203556:	eb 1c                	jmp    203574 <_ZN9r3_kernel3cpu8segments15SegmentRegister3set17hd55eb3fbfc8ddbefE+0x74>
  203558:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
                asm!(
  20355d:	66 8e c0             	mov    %ax,%es
  203560:	eb 12                	jmp    203574 <_ZN9r3_kernel3cpu8segments15SegmentRegister3set17hd55eb3fbfc8ddbefE+0x74>
  203562:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
                asm!(
  203567:	66 8e e0             	mov    %ax,%fs
  20356a:	eb 08                	jmp    203574 <_ZN9r3_kernel3cpu8segments15SegmentRegister3set17hd55eb3fbfc8ddbefE+0x74>
  20356c:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
                asm!(
  203571:	66 8e e8             	mov    %ax,%gs
                    "mov ss, {:x}", in(reg) value,
                    options(nostack, preserves_flags)
                )
            },
        }
    }
  203574:	48 83 c4 28          	add    $0x28,%rsp
  203578:	c3                   	retq   
  203579:	cc                   	int3   
  20357a:	cc                   	int3   
  20357b:	cc                   	int3   
  20357c:	cc                   	int3   
  20357d:	cc                   	int3   
  20357e:	cc                   	int3   
  20357f:	cc                   	int3   

0000000000203580 <_ZN9r3_kernel3cpu8segments15SegmentRegister3get17h9ff0d933d57839d7E>:

    pub fn get(&self) -> u16 {
  203580:	48 83 ec 18          	sub    $0x18,%rsp
  203584:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        let value: u16;
        match self {
  203589:	0f b6 07             	movzbl (%rdi),%eax
  20358c:	48 89 04 24          	mov    %rax,(%rsp)
  203590:	48 8b 04 24          	mov    (%rsp),%rax
  203594:	48 8d 0d 31 cd ff ff 	lea    -0x32cf(%rip),%rcx        # 2002cc <str.0+0x3c>
  20359b:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  20359f:	48 01 c8             	add    %rcx,%rax
  2035a2:	ff e0                	jmpq   *%rax
  2035a4:	0f 0b                	ud2    
            SegmentRegister::CS => unsafe {
                asm!(
  2035a6:	8c c8                	mov    %cs,%eax
  2035a8:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  2035ad:	eb 2b                	jmp    2035da <_ZN9r3_kernel3cpu8segments15SegmentRegister3get17h9ff0d933d57839d7E+0x5a>
                    "mov {:x}, gs", out(reg) value,
                    options(nomem, nostack, preserves_flags)
                )
            },
            SegmentRegister::SS => unsafe {
                asm!(
  2035af:	8c d0                	mov    %ss,%eax
  2035b1:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  2035b6:	eb 22                	jmp    2035da <_ZN9r3_kernel3cpu8segments15SegmentRegister3get17h9ff0d933d57839d7E+0x5a>
                asm!(
  2035b8:	8c d8                	mov    %ds,%eax
  2035ba:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  2035bf:	eb 19                	jmp    2035da <_ZN9r3_kernel3cpu8segments15SegmentRegister3get17h9ff0d933d57839d7E+0x5a>
                asm!(
  2035c1:	8c c0                	mov    %es,%eax
  2035c3:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  2035c8:	eb 10                	jmp    2035da <_ZN9r3_kernel3cpu8segments15SegmentRegister3get17h9ff0d933d57839d7E+0x5a>
                asm!(
  2035ca:	8c e0                	mov    %fs,%eax
  2035cc:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  2035d1:	eb 07                	jmp    2035da <_ZN9r3_kernel3cpu8segments15SegmentRegister3get17h9ff0d933d57839d7E+0x5a>
                asm!(
  2035d3:	8c e8                	mov    %gs,%eax
  2035d5:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
                )
            },
        }

        return value;
    }
  2035da:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
  2035df:	48 83 c4 18          	add    $0x18,%rsp
  2035e3:	c3                   	retq   
  2035e4:	cc                   	int3   
  2035e5:	cc                   	int3   
  2035e6:	cc                   	int3   
  2035e7:	cc                   	int3   
  2035e8:	cc                   	int3   
  2035e9:	cc                   	int3   
  2035ea:	cc                   	int3   
  2035eb:	cc                   	int3   
  2035ec:	cc                   	int3   
  2035ed:	cc                   	int3   
  2035ee:	cc                   	int3   
  2035ef:	cc                   	int3   

00000000002035f0 <_ZN9r3_kernel3cpu8segments15SegmentRegister10assert_reg17h4c2cdea3b5b4a683E>:

    pub fn assert_reg(&self, value: u16) {
  2035f0:	48 83 ec 78          	sub    $0x78,%rsp
  2035f4:	66 89 f0             	mov    %si,%ax
  2035f7:	66 89 44 24 14       	mov    %ax,0x14(%rsp)
  2035fc:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
        let read_value = self.get();
  203601:	e8 7a ff ff ff       	callq  203580 <_ZN9r3_kernel3cpu8segments15SegmentRegister3get17h9ff0d933d57839d7E>
  203606:	66 89 44 24 16       	mov    %ax,0x16(%rsp)
        assert_eq!(read_value, value);
  20360b:	48 8d 44 24 16       	lea    0x16(%rsp),%rax
  203610:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  203615:	48 8d 44 24 14       	lea    0x14(%rsp),%rax
  20361a:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20361f:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  203624:	48 89 04 24          	mov    %rax,(%rsp)
  203628:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  20362d:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  203632:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  203637:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
  20363c:	66 8b 00             	mov    (%rax),%ax
  20363f:	66 3b 01             	cmp    (%rcx),%ax
  203642:	0f 94 c0             	sete   %al
  203645:	34 ff                	xor    $0xff,%al
  203647:	a8 01                	test   $0x1,%al
  203649:	75 05                	jne    203650 <_ZN9r3_kernel3cpu8segments15SegmentRegister10assert_reg17h4c2cdea3b5b4a683E+0x60>
    }
  20364b:	48 83 c4 78          	add    $0x78,%rsp
  20364f:	c3                   	retq   
  203650:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  203655:	48 8b 34 24          	mov    (%rsp),%rsi
        assert_eq!(read_value, value);
  203659:	c6 44 24 2f 00       	movb   $0x0,0x2f(%rsp)
  20365e:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  203665:	00 00 
  203667:	4c 8d 05 ba f2 00 00 	lea    0xf2ba(%rip),%r8        # 212928 <memset+0x1048>
  20366e:	31 ff                	xor    %edi,%edi
  203670:	48 8d 4c 24 30       	lea    0x30(%rsp),%rcx
  203675:	e8 36 48 00 00       	callq  207eb0 <_ZN4core9panicking13assert_failed17hf745d0fc64896bf3E>
  20367a:	0f 0b                	ud2    
  20367c:	cc                   	int3   
  20367d:	cc                   	int3   
  20367e:	cc                   	int3   
  20367f:	cc                   	int3   

0000000000203680 <_ZN9r3_kernel3cpu8segments16TaskStateSegment5empty17he7cacc0fe7603b71E>:
    pub reserved_4: u16,
    pub iomap_base: u16,
}

impl TaskStateSegment {
    pub fn empty() -> Self {
  203680:	48 83 ec 68          	sub    $0x68,%rsp
  203684:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  203689:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        TaskStateSegment {
            reserved_1: 0,
            privilege_stack_table: [0; 3],
  20368e:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  203693:	31 f6                	xor    %esi,%esi
  203695:	ba 18 00 00 00       	mov    $0x18,%edx
  20369a:	e8 41 e2 00 00       	callq  2118e0 <memset>
            reserved_2: 0,
            interrupt_stack_table: [0; 7],
  20369f:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  2036a4:	31 f6                	xor    %esi,%esi
  2036a6:	ba 38 00 00 00       	mov    $0x38,%edx
  2036ab:	e8 30 e2 00 00       	callq  2118e0 <memset>
  2036b0:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        TaskStateSegment {
  2036b5:	c7 07 00 00 00 00    	movl   $0x0,(%rdi)
  2036bb:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2036c0:	48 89 47 04          	mov    %rax,0x4(%rdi)
  2036c4:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2036c9:	48 89 47 0c          	mov    %rax,0xc(%rdi)
  2036cd:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  2036d2:	48 89 47 14          	mov    %rax,0x14(%rdi)
  2036d6:	48 c7 47 1c 00 00 00 	movq   $0x0,0x1c(%rdi)
  2036dd:	00 
  2036de:	48 83 c7 24          	add    $0x24,%rdi
  2036e2:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
  2036e7:	ba 38 00 00 00       	mov    $0x38,%edx
  2036ec:	e8 cf e1 00 00       	callq  2118c0 <memcpy>
  2036f1:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  2036f6:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2036fb:	48 c7 47 5c 00 00 00 	movq   $0x0,0x5c(%rdi)
  203702:	00 
  203703:	66 c7 47 64 00 00    	movw   $0x0,0x64(%rdi)
  203709:	66 c7 47 66 00 00    	movw   $0x0,0x66(%rdi)
            reserved_3: 0,
            reserved_4: 0,
            iomap_base: 0,
        }
    }
  20370f:	48 83 c4 68          	add    $0x68,%rsp
  203713:	c3                   	retq   
  203714:	cc                   	int3   
  203715:	cc                   	int3   
  203716:	cc                   	int3   
  203717:	cc                   	int3   
  203718:	cc                   	int3   
  203719:	cc                   	int3   
  20371a:	cc                   	int3   
  20371b:	cc                   	int3   
  20371c:	cc                   	int3   
  20371d:	cc                   	int3   
  20371e:	cc                   	int3   
  20371f:	cc                   	int3   

0000000000203720 <_ZN9r3_kernel3cpu8segments19TaskStateDescriptor3new17he136b44a4bb59dc2E>:
    pub high: u64,
    pub low: u64,
}

impl TaskStateDescriptor {
    pub fn new(tss: &'static TaskStateSegment) -> Self {
  203720:	48 81 ec 98 01 00 00 	sub    $0x198,%rsp
  203727:	48 89 bc 24 70 01 00 	mov    %rdi,0x170(%rsp)
  20372e:	00 
        let mut low: u64 = SEGMENT_PRESENT;
  20372f:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax
  203736:	80 00 00 
  203739:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
        let tss_addr = (tss as *const _) as u64;
  20373e:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)

        low.set_bits(16..40, tss_addr.get_bits(0..24));
  203743:	48 c7 44 24 70 10 00 	movq   $0x10,0x70(%rsp)
  20374a:	00 00 
  20374c:	48 c7 44 24 78 28 00 	movq   $0x28,0x78(%rsp)
  203753:	00 00 
  203755:	48 c7 84 24 80 00 00 	movq   $0x0,0x80(%rsp)
  20375c:	00 00 00 00 00 
  203761:	48 c7 84 24 88 00 00 	movq   $0x18,0x88(%rsp)
  203768:	00 18 00 00 00 
  20376d:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  203774:	00 
  203775:	48 8b 94 24 88 00 00 	mov    0x88(%rsp),%rdx
  20377c:	00 
  20377d:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  203782:	e8 69 4d 00 00       	callq  2084f0 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h1f3955de0bf3912cE>
  203787:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20378c:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  203791:	48 8b 74 24 70       	mov    0x70(%rsp),%rsi
  203796:	48 8b 54 24 78       	mov    0x78(%rsp),%rdx
  20379b:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  2037a0:	e8 6b 4f 00 00       	callq  208710 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE>
        low.set_bits(56..64, tss_addr.get_bits(24..32));
  2037a5:	48 c7 84 24 90 00 00 	movq   $0x38,0x90(%rsp)
  2037ac:	00 38 00 00 00 
  2037b1:	48 c7 84 24 98 00 00 	movq   $0x40,0x98(%rsp)
  2037b8:	00 40 00 00 00 
  2037bd:	48 c7 84 24 a0 00 00 	movq   $0x18,0xa0(%rsp)
  2037c4:	00 18 00 00 00 
  2037c9:	48 c7 84 24 a8 00 00 	movq   $0x20,0xa8(%rsp)
  2037d0:	00 20 00 00 00 
  2037d5:	48 8b b4 24 a0 00 00 	mov    0xa0(%rsp),%rsi
  2037dc:	00 
  2037dd:	48 8b 94 24 a8 00 00 	mov    0xa8(%rsp),%rdx
  2037e4:	00 
  2037e5:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  2037ea:	e8 01 4d 00 00       	callq  2084f0 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h1f3955de0bf3912cE>
  2037ef:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  2037f4:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  2037f9:	48 8b b4 24 90 00 00 	mov    0x90(%rsp),%rsi
  203800:	00 
  203801:	48 8b 94 24 98 00 00 	mov    0x98(%rsp),%rdx
  203808:	00 
  203809:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  20380e:	e8 fd 4e 00 00       	callq  208710 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE>
        // limit (the `-1` in needed since the bound is inclusive)
        low.set_bits(0..16, (mem::size_of::<TaskStateSegment>() - 1) as u64);
  203813:	48 c7 84 24 b0 00 00 	movq   $0x0,0xb0(%rsp)
  20381a:	00 00 00 00 00 
  20381f:	48 c7 84 24 b8 00 00 	movq   $0x10,0xb8(%rsp)
  203826:	00 10 00 00 00 
  20382b:	b8 68 00 00 00       	mov    $0x68,%eax
  203830:	48 83 e8 01          	sub    $0x1,%rax
  203834:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  203839:	0f 92 c0             	setb   %al
  20383c:	a8 01                	test   $0x1,%al
  20383e:	75 21                	jne    203861 <_ZN9r3_kernel3cpu8segments19TaskStateDescriptor3new17he136b44a4bb59dc2E+0x141>
  203840:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  203845:	48 8b b4 24 b0 00 00 	mov    0xb0(%rsp),%rsi
  20384c:	00 
  20384d:	48 8b 94 24 b8 00 00 	mov    0xb8(%rsp),%rdx
  203854:	00 
  203855:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  20385a:	e8 b1 4e 00 00       	callq  208710 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE>
  20385f:	eb 1a                	jmp    20387b <_ZN9r3_kernel3cpu8segments19TaskStateDescriptor3new17he136b44a4bb59dc2E+0x15b>
  203861:	48 8d 3d 98 ca ff ff 	lea    -0x3568(%rip),%rdi        # 200300 <str.0>
  203868:	48 8d 15 d1 f0 00 00 	lea    0xf0d1(%rip),%rdx        # 212940 <memset+0x1060>
  20386f:	be 21 00 00 00       	mov    $0x21,%esi
  203874:	e8 17 b6 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  203879:	0f 0b                	ud2    
        // type (0b1001 = available 64-bit tss)
        low.set_bits(40..44, 0b1001);
  20387b:	48 c7 84 24 c0 00 00 	movq   $0x28,0xc0(%rsp)
  203882:	00 28 00 00 00 
  203887:	48 c7 84 24 c8 00 00 	movq   $0x2c,0xc8(%rsp)
  20388e:	00 2c 00 00 00 
  203893:	48 8b b4 24 c0 00 00 	mov    0xc0(%rsp),%rsi
  20389a:	00 
  20389b:	48 8b 94 24 c8 00 00 	mov    0xc8(%rsp),%rdx
  2038a2:	00 
  2038a3:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  2038a8:	b9 09 00 00 00       	mov    $0x9,%ecx
  2038ad:	e8 5e 4e 00 00       	callq  208710 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE>

        let mut high = 0;
  2038b2:	48 c7 84 24 d0 00 00 	movq   $0x0,0xd0(%rsp)
  2038b9:	00 00 00 00 00 
        high.set_bits(0..32, tss_addr.get_bits(32..64));
  2038be:	48 c7 84 24 d8 00 00 	movq   $0x0,0xd8(%rsp)
  2038c5:	00 00 00 00 00 
  2038ca:	48 c7 84 24 e0 00 00 	movq   $0x20,0xe0(%rsp)
  2038d1:	00 20 00 00 00 
  2038d6:	48 c7 84 24 e8 00 00 	movq   $0x20,0xe8(%rsp)
  2038dd:	00 20 00 00 00 
  2038e2:	48 c7 84 24 f0 00 00 	movq   $0x40,0xf0(%rsp)
  2038e9:	00 40 00 00 00 
  2038ee:	48 8b b4 24 e8 00 00 	mov    0xe8(%rsp),%rsi
  2038f5:	00 
  2038f6:	48 8b 94 24 f0 00 00 	mov    0xf0(%rsp),%rdx
  2038fd:	00 
  2038fe:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  203903:	e8 e8 4b 00 00       	callq  2084f0 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h1f3955de0bf3912cE>
  203908:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20390d:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  203912:	48 8b b4 24 d8 00 00 	mov    0xd8(%rsp),%rsi
  203919:	00 
  20391a:	48 8b 94 24 e0 00 00 	mov    0xe0(%rsp),%rdx
  203921:	00 
  203922:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  203929:	00 
  20392a:	e8 e1 4d 00 00       	callq  208710 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE>

        log::debug!("TSS descriptor high=0x{:x}, low=0x{:x}", high, low);
  20392f:	48 c7 84 24 f8 00 00 	movq   $0x4,0xf8(%rsp)
  203936:	00 04 00 00 00 
  20393b:	48 8d bc 24 f8 00 00 	lea    0xf8(%rsp),%rdi
  203942:	00 
  203943:	48 8d 35 ee c9 ff ff 	lea    -0x3612(%rip),%rsi        # 200338 <str.0+0x38>
  20394a:	e8 f1 12 00 00       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20394f:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  203953:	8a 44 24 2f          	mov    0x2f(%rsp),%al
  203957:	a8 01                	test   $0x1,%al
  203959:	75 0c                	jne    203967 <_ZN9r3_kernel3cpu8segments19TaskStateDescriptor3new17he136b44a4bb59dc2E+0x247>
  20395b:	eb 00                	jmp    20395d <_ZN9r3_kernel3cpu8segments19TaskStateDescriptor3new17he136b44a4bb59dc2E+0x23d>
  20395d:	c6 84 24 07 01 00 00 	movb   $0x0,0x107(%rsp)
  203964:	00 
  203965:	eb 5a                	jmp    2039c1 <_ZN9r3_kernel3cpu8segments19TaskStateDescriptor3new17he136b44a4bb59dc2E+0x2a1>
    // this transmute is sound if and only if `MAX_LOG_LEVEL_FILTER`
    // is set to a usize that is a valid discriminant for `LevelFilter`.
    // Since `MAX_LOG_LEVEL_FILTER` is private, the only time it's set
    // is by `set_max_level` above, i.e. by casting a `LevelFilter` to `usize`.
    // So any usize stored in `MAX_LOG_LEVEL_FILTER` is a valid discriminant.
    unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
  203967:	c6 84 24 8f 01 00 00 	movb   $0x0,0x18f(%rsp)
  20396e:	00 
  20396f:	48 8b 3d 72 01 01 00 	mov    0x10172(%rip),%rdi        # 213ae8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  203976:	0f b6 b4 24 8f 01 00 	movzbl 0x18f(%rsp),%esi
  20397d:	00 
  20397e:	e8 4d 6f 00 00       	callq  20a8d0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  203983:	48 89 84 24 90 01 00 	mov    %rax,0x190(%rsp)
  20398a:	00 
  20398b:	48 8b 84 24 90 01 00 	mov    0x190(%rsp),%rax
  203992:	00 
  203993:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  20399a:	00 
  20399b:	48 8d bc 24 f8 00 00 	lea    0xf8(%rsp),%rdi
  2039a2:	00 
  2039a3:	48 8d b4 24 08 01 00 	lea    0x108(%rsp),%rsi
  2039aa:	00 
  2039ab:	e8 90 12 00 00       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  2039b0:	88 44 24 2e          	mov    %al,0x2e(%rsp)
  2039b4:	8a 44 24 2e          	mov    0x2e(%rsp),%al
  2039b8:	24 01                	and    $0x1,%al
  2039ba:	88 84 24 07 01 00 00 	mov    %al,0x107(%rsp)
  2039c1:	f6 84 24 07 01 00 00 	testb  $0x1,0x107(%rsp)
  2039c8:	01 
  2039c9:	75 29                	jne    2039f4 <_ZN9r3_kernel3cpu8segments19TaskStateDescriptor3new17he136b44a4bb59dc2E+0x2d4>

        TaskStateDescriptor { high, low }
  2039cb:	48 8b 8c 24 d0 00 00 	mov    0xd0(%rsp),%rcx
  2039d2:	00 
  2039d3:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  2039d8:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  2039dd:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
    }
  2039e2:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  2039e7:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  2039ec:	48 81 c4 98 01 00 00 	add    $0x198,%rsp
  2039f3:	c3                   	retq   
        log::debug!("TSS descriptor high=0x{:x}, low=0x{:x}", high, low);
  2039f4:	48 8d 84 24 d0 00 00 	lea    0xd0(%rsp),%rax
  2039fb:	00 
  2039fc:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
  203a03:	00 
  203a04:	48 8d 44 24 60       	lea    0x60(%rsp),%rax
  203a09:	48 89 84 24 68 01 00 	mov    %rax,0x168(%rsp)
  203a10:	00 
  203a11:	48 8b bc 24 60 01 00 	mov    0x160(%rsp),%rdi
  203a18:	00 
  203a19:	48 89 bc 24 78 01 00 	mov    %rdi,0x178(%rsp)
  203a20:	00 
  203a21:	48 8b 84 24 68 01 00 	mov    0x168(%rsp),%rax
  203a28:	00 
  203a29:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  203a2e:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  203a35:	00 
  203a36:	48 8b 35 b3 00 01 00 	mov    0x100b3(%rip),%rsi        # 213af0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  203a3d:	e8 3e 74 00 00       	callq  20ae80 <_ZN4core3fmt10ArgumentV13new17hed39039da1d20c39E>
  203a42:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  203a47:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  203a4c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  203a51:	48 8b 35 98 00 01 00 	mov    0x10098(%rip),%rsi        # 213af0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  203a58:	e8 23 74 00 00       	callq  20ae80 <_ZN4core3fmt10ArgumentV13new17hed39039da1d20c39E>
  203a5d:	48 89 04 24          	mov    %rax,(%rsp)
  203a61:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  203a66:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  203a6b:	48 8b 0c 24          	mov    (%rsp),%rcx
  203a6f:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  203a74:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  203a79:	48 89 b4 24 40 01 00 	mov    %rsi,0x140(%rsp)
  203a80:	00 
  203a81:	48 89 94 24 48 01 00 	mov    %rdx,0x148(%rsp)
  203a88:	00 
  203a89:	48 89 8c 24 50 01 00 	mov    %rcx,0x150(%rsp)
  203a90:	00 
  203a91:	48 89 84 24 58 01 00 	mov    %rax,0x158(%rsp)
  203a98:	00 
  203a99:	48 8d 8c 24 40 01 00 	lea    0x140(%rsp),%rcx
  203aa0:	00 
  203aa1:	48 8d bc 24 10 01 00 	lea    0x110(%rsp),%rdi
  203aa8:	00 
  203aa9:	48 8d 35 a8 ee 00 00 	lea    0xeea8(%rip),%rsi        # 212958 <memset+0x1078>
  203ab0:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  203ab6:	4c 89 c2             	mov    %r8,%rdx
  203ab9:	e8 52 0c 00 00       	callq  204710 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  203abe:	48 8b b4 24 f8 00 00 	mov    0xf8(%rsp),%rsi
  203ac5:	00 
  203ac6:	48 8d bc 24 10 01 00 	lea    0x110(%rsp),%rdi
  203acd:	00 
  203ace:	48 8d 15 a3 ee 00 00 	lea    0xeea3(%rip),%rdx        # 212978 <memset+0x1098>
  203ad5:	e8 56 8c 00 00       	callq  20c730 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  203ada:	e9 ec fe ff ff       	jmpq   2039cb <_ZN9r3_kernel3cpu8segments19TaskStateDescriptor3new17he136b44a4bb59dc2E+0x2ab>
  203adf:	cc                   	int3   

0000000000203ae0 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable5empty17hc6ad18ad40b39fccE>:
    // contains the current index to be filled. [0 - first entry]
    pub filled: usize,
}

impl GlobalDescritorTable {
    pub fn empty() -> GlobalDescritorTable {
  203ae0:	48 83 ec 58          	sub    $0x58,%rsp
  203ae4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  203ae9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        GlobalDescritorTable {
            entries: [0; 8],
  203aee:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  203af3:	31 f6                	xor    %esi,%esi
  203af5:	ba 40 00 00 00       	mov    $0x40,%edx
  203afa:	e8 e1 dd 00 00       	callq  2118e0 <memset>
  203aff:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        GlobalDescritorTable {
  203b04:	48 8d 74 24 18       	lea    0x18(%rsp),%rsi
  203b09:	ba 40 00 00 00       	mov    $0x40,%edx
  203b0e:	e8 ad dd 00 00       	callq  2118c0 <memcpy>
  203b13:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  203b18:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  203b1d:	48 c7 47 40 01 00 00 	movq   $0x1,0x40(%rdi)
  203b24:	00 
            filled: 1,
        }
    }
  203b25:	48 83 c4 58          	add    $0x58,%rsp
  203b29:	c3                   	retq   
  203b2a:	cc                   	int3   
  203b2b:	cc                   	int3   
  203b2c:	cc                   	int3   
  203b2d:	cc                   	int3   
  203b2e:	cc                   	int3   
  203b2f:	cc                   	int3   

0000000000203b30 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable10as_pointer17hbe358bc20744f52cE>:
        }

        Ok(GlobalDescritorTable { entries, filled })
    }

    pub fn as_pointer(&self) -> GDTPointer {
  203b30:	48 83 ec 48          	sub    $0x48,%rsp
  203b34:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  203b39:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
        GDTPointer {
            base_addr: self.entries.as_ptr() as u64,
  203b3e:	be 08 00 00 00       	mov    $0x8,%esi
  203b43:	e8 f8 80 00 00       	callq  20bc40 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h5cc1f53bc66c4beaE>
  203b48:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  203b4d:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
            size_limit: (self.filled * mem::size_of::<u64>() - 1) as u16,
  203b52:	48 8b 40 40          	mov    0x40(%rax),%rax
  203b56:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  203b5b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  203b60:	b9 08 00 00 00       	mov    $0x8,%ecx
  203b65:	48 f7 e1             	mul    %rcx
  203b68:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  203b6d:	0f 90 c0             	seto   %al
  203b70:	a8 01                	test   $0x1,%al
  203b72:	75 17                	jne    203b8b <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable10as_pointer17hbe358bc20744f52cE+0x5b>
  203b74:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  203b79:	48 83 e8 01          	sub    $0x1,%rax
  203b7d:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  203b82:	0f 92 c0             	setb   %al
  203b85:	a8 01                	test   $0x1,%al
  203b87:	75 41                	jne    203bca <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable10as_pointer17hbe358bc20744f52cE+0x9a>
  203b89:	eb 1a                	jmp    203ba5 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable10as_pointer17hbe358bc20744f52cE+0x75>
  203b8b:	48 8d 3d ee c7 ff ff 	lea    -0x3812(%rip),%rdi        # 200380 <str.1>
  203b92:	48 8d 15 17 ee 00 00 	lea    0xee17(%rip),%rdx        # 2129b0 <memset+0x10d0>
  203b99:	be 21 00 00 00       	mov    $0x21,%esi
  203b9e:	e8 ed b2 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  203ba3:	0f 0b                	ud2    
  203ba5:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  203baa:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
        GDTPointer {
  203baf:	66 89 4c 24 30       	mov    %cx,0x30(%rsp)
  203bb4:	48 89 44 24 32       	mov    %rax,0x32(%rsp)
        }
    }
  203bb9:	0f b7 44 24 38       	movzwl 0x38(%rsp),%eax
  203bbe:	89 c2                	mov    %eax,%edx
  203bc0:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  203bc5:	48 83 c4 48          	add    $0x48,%rsp
  203bc9:	c3                   	retq   
            size_limit: (self.filled * mem::size_of::<u64>() - 1) as u16,
  203bca:	48 8d 3d 2f c7 ff ff 	lea    -0x38d1(%rip),%rdi        # 200300 <str.0>
  203bd1:	48 8d 15 f0 ed 00 00 	lea    0xedf0(%rip),%rdx        # 2129c8 <memset+0x10e8>
  203bd8:	be 21 00 00 00       	mov    $0x21,%esi
  203bdd:	e8 ae b2 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  203be2:	0f 0b                	ud2    
  203be4:	cc                   	int3   
  203be5:	cc                   	int3   
  203be6:	cc                   	int3   
  203be7:	cc                   	int3   
  203be8:	cc                   	int3   
  203be9:	cc                   	int3   
  203bea:	cc                   	int3   
  203beb:	cc                   	int3   
  203bec:	cc                   	int3   
  203bed:	cc                   	int3   
  203bee:	cc                   	int3   
  203bef:	cc                   	int3   

0000000000203bf0 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable13load_into_cpu17h6757b776799da27dE>:

    pub fn load_into_cpu(&'static self) {
  203bf0:	48 83 ec 28          	sub    $0x28,%rsp
  203bf4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        let gdt_pointer = self.as_pointer();
  203bf9:	e8 32 ff ff ff       	callq  203b30 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable10as_pointer17hbe358bc20744f52cE>
  203bfe:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  203c03:	66 89 d0             	mov    %dx,%ax
  203c06:	66 89 44 24 20       	mov    %ax,0x20(%rsp)
  203c0b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  203c10:	48 89 04 24          	mov    %rax,(%rsp)
  203c14:	66 8b 44 24 20       	mov    0x20(%rsp),%ax
  203c19:	66 89 44 24 08       	mov    %ax,0x8(%rsp)
        lgdt(&gdt_pointer);
  203c1e:	48 89 e7             	mov    %rsp,%rdi
  203c21:	e8 3a f8 ff ff       	callq  203460 <_ZN9r3_kernel3cpu8segments4lgdt17ha22c06219a02a0cfE>
    }
  203c26:	48 83 c4 28          	add    $0x28,%rsp
  203c2a:	c3                   	retq   
  203c2b:	cc                   	int3   
  203c2c:	cc                   	int3   
  203c2d:	cc                   	int3   
  203c2e:	cc                   	int3   
  203c2f:	cc                   	int3   

0000000000203c30 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable17get_user_seg_ring17h59cb55dc101d0f9bE>:

    #[inline]
    fn get_user_seg_ring(entry: u64) -> PrivilegeLevel {
  203c30:	48 83 ec 10          	sub    $0x10,%rsp
  203c34:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        // check if it is DPL3:
        if entry & RING_3_DPL_FLAG == RING_3_DPL_FLAG {
  203c39:	48 b8 00 00 00 00 00 	movabs $0x600000000000,%rax
  203c40:	60 00 00 
  203c43:	48 21 c7             	and    %rax,%rdi
  203c46:	48 b8 00 00 00 00 00 	movabs $0x600000000000,%rax
  203c4d:	60 00 00 
  203c50:	48 39 c7             	cmp    %rax,%rdi
  203c53:	74 07                	je     203c5c <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable17get_user_seg_ring17h59cb55dc101d0f9bE+0x2c>
            return PrivilegeLevel::Ring3;
        }

        PrivilegeLevel::Ring0
  203c55:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  203c5a:	eb 05                	jmp    203c61 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable17get_user_seg_ring17h59cb55dc101d0f9bE+0x31>
            return PrivilegeLevel::Ring3;
  203c5c:	c6 44 24 07 03       	movb   $0x3,0x7(%rsp)
    }
  203c61:	8a 44 24 07          	mov    0x7(%rsp),%al
  203c65:	48 83 c4 10          	add    $0x10,%rsp
  203c69:	c3                   	retq   
  203c6a:	cc                   	int3   
  203c6b:	cc                   	int3   
  203c6c:	cc                   	int3   
  203c6d:	cc                   	int3   
  203c6e:	cc                   	int3   
  203c6f:	cc                   	int3   

0000000000203c70 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable16set_user_segment17h676ab5e24a711b49E>:

    pub fn set_user_segment(&mut self, entry: u64) -> Result<SegmentSelector, &'static str> {
  203c70:	48 83 ec 68          	sub    $0x68,%rsp
  203c74:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  203c79:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  203c7e:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  203c83:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  203c88:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
  203c8d:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
        if self.filled >= MAX_GDT_ENTRIES {
  203c92:	48 83 7e 40 08       	cmpq   $0x8,0x40(%rsi)
  203c97:	73 1b                	jae    203cb4 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable16set_user_segment17h676ab5e24a711b49E+0x44>
  203c99:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
            return Err("GDT is already full, can't add new entry.");
        }

        // add a new entry:
        self.entries[self.filled] = entry;
  203c9e:	48 8b 40 40          	mov    0x40(%rax),%rax
  203ca2:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  203ca7:	48 83 f8 08          	cmp    $0x8,%rax
  203cab:	0f 92 c0             	setb   %al
  203cae:	a8 01                	test   $0x1,%al
  203cb0:	75 29                	jne    203cdb <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable16set_user_segment17h676ab5e24a711b49E+0x6b>
  203cb2:	eb 5e                	jmp    203d12 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable16set_user_segment17h676ab5e24a711b49E+0xa2>
  203cb4:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            return Err("GDT is already full, can't add new entry.");
  203cb9:	48 8d 0d e1 c6 ff ff 	lea    -0x391f(%rip),%rcx        # 2003a1 <str.1+0x21>
  203cc0:	48 89 48 08          	mov    %rcx,0x8(%rax)
  203cc4:	48 c7 40 10 29 00 00 	movq   $0x29,0x10(%rax)
  203ccb:	00 
  203ccc:	66 c7 00 01 00       	movw   $0x1,(%rax)
  203cd1:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
        let current_index = self.filled;
        self.filled += 1;

        let ring = GlobalDescritorTable::get_user_seg_ring(entry);
        Ok(SegmentSelector::new(current_index as u16, ring))
    }
  203cd6:	48 83 c4 68          	add    $0x68,%rsp
  203cda:	c3                   	retq   
  203cdb:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  203ce0:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  203ce5:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
        self.entries[self.filled] = entry;
  203cea:	48 89 14 c8          	mov    %rdx,(%rax,%rcx,8)
        let current_index = self.filled;
  203cee:	48 8b 48 40          	mov    0x40(%rax),%rcx
  203cf2:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  203cf7:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
        self.filled += 1;
  203cfc:	48 8b 40 40          	mov    0x40(%rax),%rax
  203d00:	48 83 c0 01          	add    $0x1,%rax
  203d04:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  203d09:	0f 92 c0             	setb   %al
  203d0c:	a8 01                	test   $0x1,%al
  203d0e:	75 3c                	jne    203d4c <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable16set_user_segment17h676ab5e24a711b49E+0xdc>
  203d10:	eb 18                	jmp    203d2a <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable16set_user_segment17h676ab5e24a711b49E+0xba>
  203d12:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
        self.entries[self.filled] = entry;
  203d17:	48 8d 15 c2 ec 00 00 	lea    0xecc2(%rip),%rdx        # 2129e0 <memset+0x1100>
  203d1e:	be 08 00 00 00       	mov    $0x8,%esi
  203d23:	e8 b8 b1 00 00       	callq  20eee0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  203d28:	0f 0b                	ud2    
  203d2a:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  203d2f:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  203d34:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
        self.filled += 1;
  203d39:	48 89 48 40          	mov    %rcx,0x40(%rax)
        let ring = GlobalDescritorTable::get_user_seg_ring(entry);
  203d3d:	e8 ee fe ff ff       	callq  203c30 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable17get_user_seg_ring17h59cb55dc101d0f9bE>
  203d42:	88 44 24 0f          	mov    %al,0xf(%rsp)
  203d46:	88 44 24 67          	mov    %al,0x67(%rsp)
  203d4a:	eb 1a                	jmp    203d66 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable16set_user_segment17h676ab5e24a711b49E+0xf6>
        self.filled += 1;
  203d4c:	48 8d 3d 7d c6 ff ff 	lea    -0x3983(%rip),%rdi        # 2003d0 <str.2>
  203d53:	48 8d 15 9e ec 00 00 	lea    0xec9e(%rip),%rdx        # 2129f8 <memset+0x1118>
  203d5a:	be 1c 00 00 00       	mov    $0x1c,%esi
  203d5f:	e8 2c b1 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  203d64:	0f 0b                	ud2    
  203d66:	8a 44 24 0f          	mov    0xf(%rsp),%al
  203d6a:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
        Ok(SegmentSelector::new(current_index as u16, ring))
  203d6f:	0f b7 f9             	movzwl %cx,%edi
  203d72:	0f b6 f0             	movzbl %al,%esi
  203d75:	e8 46 f7 ff ff       	callq  2034c0 <_ZN9r3_kernel3cpu8segments15SegmentSelector3new17h1b50231228efbbc3E>
  203d7a:	66 89 44 24 0c       	mov    %ax,0xc(%rsp)
  203d7f:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  203d84:	66 8b 4c 24 0c       	mov    0xc(%rsp),%cx
  203d89:	66 89 48 02          	mov    %cx,0x2(%rax)
  203d8d:	66 c7 00 00 00       	movw   $0x0,(%rax)
    }
  203d92:	e9 3a ff ff ff       	jmpq   203cd1 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable16set_user_segment17h676ab5e24a711b49E+0x61>
  203d97:	cc                   	int3   
  203d98:	cc                   	int3   
  203d99:	cc                   	int3   
  203d9a:	cc                   	int3   
  203d9b:	cc                   	int3   
  203d9c:	cc                   	int3   
  203d9d:	cc                   	int3   
  203d9e:	cc                   	int3   
  203d9f:	cc                   	int3   

0000000000203da0 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17hf006cca3ae9617c2E>:

    pub fn set_system_segment(
  203da0:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  203da7:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  203dac:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  203db1:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
  203db6:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
  203dbb:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
  203dc0:	48 89 74 24 68       	mov    %rsi,0x68(%rsp)
  203dc5:	48 89 54 24 70       	mov    %rdx,0x70(%rsp)
  203dca:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
        &mut self,
        high: u64,
        low: u64,
    ) -> Result<SegmentSelector, &'static str> {
        if self.filled >= MAX_GDT_ENTRIES {
  203dcf:	48 83 7e 40 08       	cmpq   $0x8,0x40(%rsi)
  203dd4:	73 2c                	jae    203e02 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17hf006cca3ae9617c2E+0x62>
  203dd6:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
            return Err("GDT is already full, can't add new entry.");
        }

        // add a low and high entries:
        let current_index = self.filled;
  203ddb:	48 8b 48 40          	mov    0x40(%rax),%rcx
  203ddf:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  203de4:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  203deb:	00 
        self.entries[self.filled] = low;
  203dec:	48 8b 40 40          	mov    0x40(%rax),%rax
  203df0:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  203df5:	48 83 f8 08          	cmp    $0x8,%rax
  203df9:	0f 92 c0             	setb   %al
  203dfc:	a8 01                	test   $0x1,%al
  203dfe:	75 2c                	jne    203e2c <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17hf006cca3ae9617c2E+0x8c>
  203e00:	eb 53                	jmp    203e55 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17hf006cca3ae9617c2E+0xb5>
  203e02:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
            return Err("GDT is already full, can't add new entry.");
  203e07:	48 8d 0d 93 c5 ff ff 	lea    -0x3a6d(%rip),%rcx        # 2003a1 <str.1+0x21>
  203e0e:	48 89 48 08          	mov    %rcx,0x8(%rax)
  203e12:	48 c7 40 10 29 00 00 	movq   $0x29,0x10(%rax)
  203e19:	00 
  203e1a:	66 c7 00 01 00       	movw   $0x1,(%rax)
  203e1f:	48 8b 44 24 58       	mov    0x58(%rsp),%rax

        Ok(SegmentSelector::new(
            current_index as u16,
            PrivilegeLevel::Ring0,
        ))
    }
  203e24:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  203e2b:	c3                   	retq   
  203e2c:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  203e31:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  203e36:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
        self.entries[self.filled] = low;
  203e3b:	48 89 14 c8          	mov    %rdx,(%rax,%rcx,8)
        self.filled += 1;
  203e3f:	48 8b 40 40          	mov    0x40(%rax),%rax
  203e43:	48 83 c0 01          	add    $0x1,%rax
  203e47:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  203e4c:	0f 92 c0             	setb   %al
  203e4f:	a8 01                	test   $0x1,%al
  203e51:	75 3e                	jne    203e91 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17hf006cca3ae9617c2E+0xf1>
  203e53:	eb 18                	jmp    203e6d <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17hf006cca3ae9617c2E+0xcd>
  203e55:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
        self.entries[self.filled] = low;
  203e5a:	48 8d 15 af eb 00 00 	lea    0xebaf(%rip),%rdx        # 212a10 <memset+0x1130>
  203e61:	be 08 00 00 00       	mov    $0x8,%esi
  203e66:	e8 75 b0 00 00       	callq  20eee0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  203e6b:	0f 0b                	ud2    
  203e6d:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  203e72:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
        self.filled += 1;
  203e77:	48 89 48 40          	mov    %rcx,0x40(%rax)
        self.entries[self.filled] = high;
  203e7b:	48 8b 40 40          	mov    0x40(%rax),%rax
  203e7f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  203e84:	48 83 f8 08          	cmp    $0x8,%rax
  203e88:	0f 92 c0             	setb   %al
  203e8b:	a8 01                	test   $0x1,%al
  203e8d:	75 1c                	jne    203eab <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17hf006cca3ae9617c2E+0x10b>
  203e8f:	eb 43                	jmp    203ed4 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17hf006cca3ae9617c2E+0x134>
        self.filled += 1;
  203e91:	48 8d 3d 38 c5 ff ff 	lea    -0x3ac8(%rip),%rdi        # 2003d0 <str.2>
  203e98:	48 8d 15 89 eb 00 00 	lea    0xeb89(%rip),%rdx        # 212a28 <memset+0x1148>
  203e9f:	be 1c 00 00 00       	mov    $0x1c,%esi
  203ea4:	e8 e7 af 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  203ea9:	0f 0b                	ud2    
  203eab:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  203eb0:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  203eb5:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
        self.entries[self.filled] = high;
  203eba:	48 89 14 c8          	mov    %rdx,(%rax,%rcx,8)
        self.filled += 1;
  203ebe:	48 8b 40 40          	mov    0x40(%rax),%rax
  203ec2:	48 83 c0 01          	add    $0x1,%rax
  203ec6:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  203ecb:	0f 92 c0             	setb   %al
  203ece:	a8 01                	test   $0x1,%al
  203ed0:	75 46                	jne    203f18 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17hf006cca3ae9617c2E+0x178>
  203ed2:	eb 18                	jmp    203eec <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17hf006cca3ae9617c2E+0x14c>
  203ed4:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
        self.entries[self.filled] = high;
  203ed9:	48 8d 15 60 eb 00 00 	lea    0xeb60(%rip),%rdx        # 212a40 <memset+0x1160>
  203ee0:	be 08 00 00 00       	mov    $0x8,%esi
  203ee5:	e8 f6 af 00 00       	callq  20eee0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  203eea:	0f 0b                	ud2    
  203eec:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  203ef1:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  203ef6:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
        self.filled += 1;
  203efb:	48 89 51 40          	mov    %rdx,0x40(%rcx)
            PrivilegeLevel::Ring0,
  203eff:	c6 44 24 67 00       	movb   $0x0,0x67(%rsp)
        Ok(SegmentSelector::new(
  203f04:	0f b7 f8             	movzwl %ax,%edi
  203f07:	0f b6 74 24 67       	movzbl 0x67(%rsp),%esi
  203f0c:	e8 af f5 ff ff       	callq  2034c0 <_ZN9r3_kernel3cpu8segments15SegmentSelector3new17h1b50231228efbbc3E>
  203f11:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  203f16:	eb 1a                	jmp    203f32 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17hf006cca3ae9617c2E+0x192>
        self.filled += 1;
  203f18:	48 8d 3d b1 c4 ff ff 	lea    -0x3b4f(%rip),%rdi        # 2003d0 <str.2>
  203f1f:	48 8d 15 32 eb 00 00 	lea    0xeb32(%rip),%rdx        # 212a58 <memset+0x1178>
  203f26:	be 1c 00 00 00       	mov    $0x1c,%esi
  203f2b:	e8 60 af 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  203f30:	0f 0b                	ud2    
  203f32:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  203f37:	66 8b 4c 24 0e       	mov    0xe(%rsp),%cx
        Ok(SegmentSelector::new(
  203f3c:	66 89 48 02          	mov    %cx,0x2(%rax)
  203f40:	66 c7 00 00 00       	movw   $0x0,(%rax)
    }
  203f45:	e9 d5 fe ff ff       	jmpq   203e1f <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17hf006cca3ae9617c2E+0x7f>
  203f4a:	cc                   	int3   
  203f4b:	cc                   	int3   
  203f4c:	cc                   	int3   
  203f4d:	cc                   	int3   
  203f4e:	cc                   	int3   
  203f4f:	cc                   	int3   

0000000000203f50 <_ZN9r3_kernel3cpu8segments17create_tss_for_bp17h6ae7bbdd9ddc0561E>:
}

const STACK_SIZE: usize = 4096 * 5;
static mut TSS_STACK: [u8; STACK_SIZE] = [0; STACK_SIZE];

pub fn create_tss_for_bp() -> TaskStateSegment {
  203f50:	48 83 ec 28          	sub    $0x28,%rsp
  203f54:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  203f59:	48 89 f8             	mov    %rdi,%rax
  203f5c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    let mut tss = TaskStateSegment::empty();
  203f61:	e8 1a f7 ff ff       	callq  203680 <_ZN9r3_kernel3cpu8segments16TaskStateSegment5empty17he7cacc0fe7603b71E>
    tss.interrupt_stack_table[0] = {
        let k_stack_start = (unsafe { &TSS_STACK } as *const _) as u64;
  203f66:	48 8d 05 43 0c 01 00 	lea    0x10c43(%rip),%rax        # 214bb0 <_ZN9r3_kernel3cpu8segments9TSS_STACK17h6f9475d03845fad0E>
  203f6d:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
        k_stack_start + STACK_SIZE as u64
  203f72:	48 8d 05 37 0c 01 00 	lea    0x10c37(%rip),%rax        # 214bb0 <_ZN9r3_kernel3cpu8segments9TSS_STACK17h6f9475d03845fad0E>
  203f79:	48 05 00 50 00 00    	add    $0x5000,%rax
  203f7f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  203f84:	0f 92 c0             	setb   %al
  203f87:	a8 01                	test   $0x1,%al
  203f89:	75 18                	jne    203fa3 <_ZN9r3_kernel3cpu8segments17create_tss_for_bp17h6ae7bbdd9ddc0561E+0x53>
  203f8b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  203f90:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  203f95:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    tss.interrupt_stack_table[0] = {
  203f9a:	48 89 51 24          	mov    %rdx,0x24(%rcx)
    };

    tss
}
  203f9e:	48 83 c4 28          	add    $0x28,%rsp
  203fa2:	c3                   	retq   
        k_stack_start + STACK_SIZE as u64
  203fa3:	48 8d 3d 26 c4 ff ff 	lea    -0x3bda(%rip),%rdi        # 2003d0 <str.2>
  203faa:	48 8d 15 bf ea 00 00 	lea    0xeabf(%rip),%rdx        # 212a70 <memset+0x1190>
  203fb1:	be 1c 00 00 00       	mov    $0x1c,%esi
  203fb6:	e8 d5 ae 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  203fbb:	0f 0b                	ud2    
  203fbd:	cc                   	int3   
  203fbe:	cc                   	int3   
  203fbf:	cc                   	int3   

0000000000203fc0 <_ZN9r3_kernel3cpu8segments17create_gdt_for_bp17h9836393e5564ee0dE>:
lazy_static! {
    static ref KERNEL_TSS: TaskStateSegment = create_tss_for_bp();
}

// create GDT for the base processor:
pub fn create_gdt_for_bp() -> GDTContainer {
  203fc0:	48 81 ec 88 01 00 00 	sub    $0x188,%rsp
  203fc7:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  203fcc:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
    // create a GDT with empty segment
    let mut gdt = GlobalDescritorTable::empty();
  203fd1:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  203fd6:	e8 05 fb ff ff       	callq  203ae0 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable5empty17hc6ad18ad40b39fccE>
    let k_code_segment_res = gdt.set_user_segment(LinuxKernelSegments::KernelCode as u64);
  203fdb:	48 8d bc 24 80 00 00 	lea    0x80(%rsp),%rdi
  203fe2:	00 
  203fe3:	48 8d 74 24 38       	lea    0x38(%rsp),%rsi
  203fe8:	48 ba ff ff 00 00 00 	movabs $0xaf9b000000ffff,%rdx
  203fef:	9b af 00 
  203ff2:	e8 79 fc ff ff       	callq  203c70 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable16set_user_segment17h676ab5e24a711b49E>
    if k_code_segment_res.is_err() {
  203ff7:	48 8d bc 24 80 00 00 	lea    0x80(%rsp),%rdi
  203ffe:	00 
  203fff:	e8 4c 64 00 00       	callq  20a450 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h5662645dcbcbfa8dE>
  204004:	88 44 24 27          	mov    %al,0x27(%rsp)
  204008:	8a 44 24 27          	mov    0x27(%rsp),%al
  20400c:	a8 01                	test   $0x1,%al
  20400e:	75 15                	jne    204025 <_ZN9r3_kernel3cpu8segments17create_gdt_for_bp17h9836393e5564ee0dE+0x65>
  204010:	eb 00                	jmp    204012 <_ZN9r3_kernel3cpu8segments17create_gdt_for_bp17h9836393e5564ee0dE+0x52>
        panic!("{}", k_code_segment_res.unwrap_err());
    }

    let tss_descriptor = TaskStateDescriptor::new(&KERNEL_TSS);
  204012:	48 8d 3d 5e c4 ff ff 	lea    -0x3ba2(%rip),%rdi        # 200477 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hb62bd72f0f4df038E>
  204019:	e8 32 06 00 00       	callq  204650 <_ZN80_$LT$r3_kernel..cpu..segments..KERNEL_TSS$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc306cbd0648060a6E>
  20401e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  204023:	eb 6a                	jmp    20408f <_ZN9r3_kernel3cpu8segments17create_gdt_for_bp17h9836393e5564ee0dE+0xcf>
        panic!("{}", k_code_segment_res.unwrap_err());
  204025:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  20402c:	00 
  20402d:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  204034:	00 
  204035:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  20403c:	00 
  20403d:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  204044:	00 
  204045:	48 89 8c 24 b0 00 00 	mov    %rcx,0xb0(%rsp)
  20404c:	00 
  20404d:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  204054:	00 
  204055:	48 8d 35 2c ea 00 00 	lea    0xea2c(%rip),%rsi        # 212a88 <memset+0x11a8>
  20405c:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  204063:	00 
  204064:	e8 47 63 00 00       	callq  20a3b0 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17hec166bfe633491fcE>
  204069:	48 89 94 24 a0 00 00 	mov    %rdx,0xa0(%rsp)
  204070:	00 
  204071:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  204078:	00 
  204079:	48 8d 35 20 ea 00 00 	lea    0xea20(%rip),%rsi        # 212aa0 <memset+0x11c0>
  204080:	48 8d bc 24 98 00 00 	lea    0x98(%rsp),%rdi
  204087:	00 
  204088:	e8 a3 3e 00 00       	callq  207f30 <_ZN4core9panicking13panic_display17h436238fbdc089216E>
  20408d:	0f 0b                	ud2    
  20408f:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    let tss_descriptor = TaskStateDescriptor::new(&KERNEL_TSS);
  204094:	e8 87 f6 ff ff       	callq  203720 <_ZN9r3_kernel3cpu8segments19TaskStateDescriptor3new17he136b44a4bb59dc2E>
  204099:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20409e:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  2040a3:	48 89 84 24 78 01 00 	mov    %rax,0x178(%rsp)
  2040aa:	00 
  2040ab:	48 89 94 24 80 01 00 	mov    %rdx,0x180(%rsp)
  2040b2:	00 
  2040b3:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  2040b8:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx

    let k_tss_segment_result = gdt.set_system_segment(tss_descriptor.high, tss_descriptor.low);
  2040bd:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  2040c4:	00 
  2040c5:	48 8d 74 24 38       	lea    0x38(%rsp),%rsi
  2040ca:	e8 d1 fc ff ff       	callq  203da0 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable18set_system_segment17hf006cca3ae9617c2E>
    if k_tss_segment_result.is_err() {
  2040cf:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  2040d6:	00 
  2040d7:	e8 74 63 00 00       	callq  20a450 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h5662645dcbcbfa8dE>
  2040dc:	88 44 24 07          	mov    %al,0x7(%rsp)
  2040e0:	8a 44 24 07          	mov    0x7(%rsp),%al
  2040e4:	a8 01                	test   $0x1,%al
  2040e6:	75 64                	jne    20414c <_ZN9r3_kernel3cpu8segments17create_gdt_for_bp17h9836393e5564ee0dE+0x18c>
  2040e8:	eb 00                	jmp    2040ea <_ZN9r3_kernel3cpu8segments17create_gdt_for_bp17h9836393e5564ee0dE+0x12a>
        panic!("{}", k_tss_segment_result.unwrap_err());
    }

    GDTContainer {
        gdt_table: gdt,
  2040ea:	48 8d bc 24 00 01 00 	lea    0x100(%rsp),%rdi
  2040f1:	00 
  2040f2:	48 8d 74 24 38       	lea    0x38(%rsp),%rsi
  2040f7:	ba 48 00 00 00       	mov    $0x48,%edx
  2040fc:	e8 bf d7 00 00       	callq  2118c0 <memcpy>
        kernel_code_selector: k_code_segment_res.unwrap(),
  204101:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  204108:	00 
  204109:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
  204110:	00 
  204111:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  204118:	00 
  204119:	48 89 84 24 50 01 00 	mov    %rax,0x150(%rsp)
  204120:	00 
  204121:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  204128:	00 
  204129:	48 89 84 24 58 01 00 	mov    %rax,0x158(%rsp)
  204130:	00 
  204131:	48 8d bc 24 48 01 00 	lea    0x148(%rsp),%rdi
  204138:	00 
  204139:	48 8d 35 a8 e9 00 00 	lea    0xe9a8(%rip),%rsi        # 212ae8 <memset+0x1208>
  204140:	e8 8b 63 00 00       	callq  20a4d0 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17hdce16b6c8bde96cdE>
  204145:	66 89 44 24 04       	mov    %ax,0x4(%rsp)
  20414a:	eb 6a                	jmp    2041b6 <_ZN9r3_kernel3cpu8segments17create_gdt_for_bp17h9836393e5564ee0dE+0x1f6>
        panic!("{}", k_tss_segment_result.unwrap_err());
  20414c:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  204153:	00 
  204154:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  20415b:	00 
  20415c:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  204163:	00 
  204164:	48 8b 8c 24 c8 00 00 	mov    0xc8(%rsp),%rcx
  20416b:	00 
  20416c:	48 89 8c 24 f0 00 00 	mov    %rcx,0xf0(%rsp)
  204173:	00 
  204174:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  20417b:	00 
  20417c:	48 8d 35 35 e9 00 00 	lea    0xe935(%rip),%rsi        # 212ab8 <memset+0x11d8>
  204183:	48 8d bc 24 e8 00 00 	lea    0xe8(%rsp),%rdi
  20418a:	00 
  20418b:	e8 20 62 00 00       	callq  20a3b0 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17hec166bfe633491fcE>
  204190:	48 89 94 24 e0 00 00 	mov    %rdx,0xe0(%rsp)
  204197:	00 
  204198:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  20419f:	00 
  2041a0:	48 8d 35 29 e9 00 00 	lea    0xe929(%rip),%rsi        # 212ad0 <memset+0x11f0>
  2041a7:	48 8d bc 24 d8 00 00 	lea    0xd8(%rsp),%rdi
  2041ae:	00 
  2041af:	e8 7c 3d 00 00       	callq  207f30 <_ZN4core9panicking13panic_display17h436238fbdc089216E>
  2041b4:	0f 0b                	ud2    
        kernel_tss_selector: k_tss_segment_result.unwrap(),
  2041b6:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  2041bd:	00 
  2041be:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
  2041c5:	00 
  2041c6:	48 8b 84 24 c8 00 00 	mov    0xc8(%rsp),%rax
  2041cd:	00 
  2041ce:	48 89 84 24 68 01 00 	mov    %rax,0x168(%rsp)
  2041d5:	00 
  2041d6:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  2041dd:	00 
  2041de:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  2041e5:	00 
  2041e6:	48 8d bc 24 60 01 00 	lea    0x160(%rsp),%rdi
  2041ed:	00 
  2041ee:	48 8d 35 0b e9 00 00 	lea    0xe90b(%rip),%rsi        # 212b00 <memset+0x1220>
  2041f5:	e8 d6 62 00 00       	callq  20a4d0 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17hdce16b6c8bde96cdE>
  2041fa:	66 89 44 24 02       	mov    %ax,0x2(%rsp)
  2041ff:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
    GDTContainer {
  204204:	48 8d b4 24 00 01 00 	lea    0x100(%rsp),%rsi
  20420b:	00 
  20420c:	ba 48 00 00 00       	mov    $0x48,%edx
  204211:	e8 aa d6 00 00       	callq  2118c0 <memcpy>
  204216:	66 8b 74 24 04       	mov    0x4(%rsp),%si
  20421b:	66 8b 54 24 02       	mov    0x2(%rsp),%dx
  204220:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  204225:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  20422a:	66 89 71 48          	mov    %si,0x48(%rcx)
  20422e:	66 89 51 4a          	mov    %dx,0x4a(%rcx)
    }
}
  204232:	48 81 c4 88 01 00 00 	add    $0x188,%rsp
  204239:	c3                   	retq   
  20423a:	cc                   	int3   
  20423b:	cc                   	int3   
  20423c:	cc                   	int3   
  20423d:	cc                   	int3   
  20423e:	cc                   	int3   
  20423f:	cc                   	int3   

0000000000204240 <_ZN9r3_kernel3cpu8segments8init_gdt17h9348fa95bcfcd487E>:
lazy_static! {
    static ref KERNEL_BASE_GDT: GDTContainer = create_gdt_for_bp();
}

// create the GDT
pub fn init_gdt() {
  204240:	48 81 ec 88 01 00 00 	sub    $0x188,%rsp
    let gdt_table = &KERNEL_BASE_GDT.gdt_table;
  204247:	48 8d 3d 29 c2 ff ff 	lea    -0x3dd7(%rip),%rdi        # 200477 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hb62bd72f0f4df038E>
  20424e:	e8 2d 04 00 00       	callq  204680 <_ZN85_$LT$r3_kernel..cpu..segments..KERNEL_BASE_GDT$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3761a377e6201903E>
  204253:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  204258:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  20425d:	48 89 bc 24 38 01 00 	mov    %rdi,0x138(%rsp)
  204264:	00 
    gdt_table.load_into_cpu();
  204265:	e8 86 f9 ff ff       	callq  203bf0 <_ZN9r3_kernel3cpu8segments20GlobalDescritorTable13load_into_cpu17h6757b776799da27dE>

    // set the code segment register
    let kernel_cs = &KERNEL_BASE_GDT.kernel_code_selector;
  20426a:	48 8d 3d 06 c2 ff ff 	lea    -0x3dfa(%rip),%rdi        # 200477 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hb62bd72f0f4df038E>
  204271:	e8 0a 04 00 00       	callq  204680 <_ZN85_$LT$r3_kernel..cpu..segments..KERNEL_BASE_GDT$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3761a377e6201903E>
  204276:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20427b:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  204280:	48 89 c1             	mov    %rax,%rcx
  204283:	48 83 c1 48          	add    $0x48,%rcx
  204287:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  20428c:	48 89 8c 24 40 01 00 	mov    %rcx,0x140(%rsp)
  204293:	00 
    SegmentRegister::CS.set(kernel_cs.0);
  204294:	48 8d 3d 51 c1 ff ff 	lea    -0x3eaf(%rip),%rdi        # 2003ec <str.2+0x1c>
  20429b:	0f b7 70 48          	movzwl 0x48(%rax),%esi
  20429f:	e8 5c f2 ff ff       	callq  203500 <_ZN9r3_kernel3cpu8segments15SegmentRegister3set17hd55eb3fbfc8ddbefE>
  2042a4:	48 8b 44 24 30       	mov    0x30(%rsp),%rax

    // assert the register value:
    SegmentRegister::CS.assert_reg(kernel_cs.0);
  2042a9:	48 8d 3d 3c c1 ff ff 	lea    -0x3ec4(%rip),%rdi        # 2003ec <str.2+0x1c>
  2042b0:	0f b7 30             	movzwl (%rax),%esi
  2042b3:	e8 38 f3 ff ff       	callq  2035f0 <_ZN9r3_kernel3cpu8segments15SegmentRegister10assert_reg17h4c2cdea3b5b4a683E>
    log::debug!("Verified Code Segment Register value: 0x{:x}", kernel_cs.0);
  2042b8:	48 c7 44 24 48 04 00 	movq   $0x4,0x48(%rsp)
  2042bf:	00 00 
  2042c1:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  2042c6:	48 8d 35 6b c0 ff ff 	lea    -0x3f95(%rip),%rsi        # 200338 <str.0+0x38>
  2042cd:	e8 6e 09 00 00       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  2042d2:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  2042d6:	8a 44 24 2f          	mov    0x2f(%rsp),%al
  2042da:	a8 01                	test   $0x1,%al
  2042dc:	75 09                	jne    2042e7 <_ZN9r3_kernel3cpu8segments8init_gdt17h9348fa95bcfcd487E+0xa7>
  2042de:	eb 00                	jmp    2042e0 <_ZN9r3_kernel3cpu8segments8init_gdt17h9348fa95bcfcd487E+0xa0>
  2042e0:	c6 44 24 57 00       	movb   $0x0,0x57(%rsp)
  2042e5:	eb 4e                	jmp    204335 <_ZN9r3_kernel3cpu8segments8init_gdt17h9348fa95bcfcd487E+0xf5>
  2042e7:	c6 84 24 7f 01 00 00 	movb   $0x0,0x17f(%rsp)
  2042ee:	00 
  2042ef:	48 8b 3d f2 f7 00 00 	mov    0xf7f2(%rip),%rdi        # 213ae8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  2042f6:	0f b6 b4 24 7f 01 00 	movzbl 0x17f(%rsp),%esi
  2042fd:	00 
  2042fe:	e8 cd 65 00 00       	callq  20a8d0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  204303:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  20430a:	00 
  20430b:	48 8b 84 24 80 01 00 	mov    0x180(%rsp),%rax
  204312:	00 
  204313:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  204318:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  20431d:	48 8d 74 24 58       	lea    0x58(%rsp),%rsi
  204322:	e8 19 09 00 00       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  204327:	88 44 24 2e          	mov    %al,0x2e(%rsp)
  20432b:	8a 44 24 2e          	mov    0x2e(%rsp),%al
  20432f:	24 01                	and    $0x1,%al
  204331:	88 44 24 57          	mov    %al,0x57(%rsp)
  204335:	f6 44 24 57 01       	testb  $0x1,0x57(%rsp)
  20433a:	75 29                	jne    204365 <_ZN9r3_kernel3cpu8segments8init_gdt17h9348fa95bcfcd487E+0x125>
    log::info!("Initialized GDT.");
  20433c:	48 c7 84 24 a8 00 00 	movq   $0x3,0xa8(%rsp)
  204343:	00 03 00 00 00 
  204348:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  20434f:	00 
  204350:	48 8d 35 e1 bf ff ff 	lea    -0x401f(%rip),%rsi        # 200338 <str.0+0x38>
  204357:	e8 e4 08 00 00       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20435c:	88 44 24 2d          	mov    %al,0x2d(%rsp)
  204360:	e9 8a 00 00 00       	jmpq   2043ef <_ZN9r3_kernel3cpu8segments8init_gdt17h9348fa95bcfcd487E+0x1af>
  204365:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
    log::debug!("Verified Code Segment Register value: 0x{:x}", kernel_cs.0);
  20436a:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  204371:	00 
  204372:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
  204379:	00 
  20437a:	48 89 bc 24 48 01 00 	mov    %rdi,0x148(%rsp)
  204381:	00 
  204382:	48 8b 35 6f f7 00 00 	mov    0xf76f(%rip),%rsi        # 213af8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x70>
  204389:	e8 52 6b 00 00       	callq  20aee0 <_ZN4core3fmt10ArgumentV13new17hf01d32011d96aef4E>
  20438e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  204393:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  204398:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20439d:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  2043a2:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
  2043a9:	00 
  2043aa:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  2043b1:	00 
  2043b2:	48 8d 8c 24 90 00 00 	lea    0x90(%rsp),%rcx
  2043b9:	00 
  2043ba:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  2043bf:	48 8d 35 52 e7 00 00 	lea    0xe752(%rip),%rsi        # 212b18 <memset+0x1238>
  2043c6:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  2043cc:	4c 89 c2             	mov    %r8,%rdx
  2043cf:	e8 3c 03 00 00       	callq  204710 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  2043d4:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
  2043d9:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  2043de:	48 8d 15 43 e7 00 00 	lea    0xe743(%rip),%rdx        # 212b28 <memset+0x1248>
  2043e5:	e8 46 83 00 00       	callq  20c730 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  2043ea:	e9 4d ff ff ff       	jmpq   20433c <_ZN9r3_kernel3cpu8segments8init_gdt17h9348fa95bcfcd487E+0xfc>
  2043ef:	8a 44 24 2d          	mov    0x2d(%rsp),%al
    log::info!("Initialized GDT.");
  2043f3:	a8 01                	test   $0x1,%al
  2043f5:	75 0c                	jne    204403 <_ZN9r3_kernel3cpu8segments8init_gdt17h9348fa95bcfcd487E+0x1c3>
  2043f7:	eb 00                	jmp    2043f9 <_ZN9r3_kernel3cpu8segments8init_gdt17h9348fa95bcfcd487E+0x1b9>
  2043f9:	c6 84 24 b7 00 00 00 	movb   $0x0,0xb7(%rsp)
  204400:	00 
  204401:	eb 5a                	jmp    20445d <_ZN9r3_kernel3cpu8segments8init_gdt17h9348fa95bcfcd487E+0x21d>
  204403:	c6 84 24 6f 01 00 00 	movb   $0x0,0x16f(%rsp)
  20440a:	00 
  20440b:	48 8b 3d d6 f6 00 00 	mov    0xf6d6(%rip),%rdi        # 213ae8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  204412:	0f b6 b4 24 6f 01 00 	movzbl 0x16f(%rsp),%esi
  204419:	00 
  20441a:	e8 b1 64 00 00       	callq  20a8d0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  20441f:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  204426:	00 
  204427:	48 8b 84 24 70 01 00 	mov    0x170(%rsp),%rax
  20442e:	00 
  20442f:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  204436:	00 
  204437:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  20443e:	00 
  20443f:	48 8d b4 24 b8 00 00 	lea    0xb8(%rsp),%rsi
  204446:	00 
  204447:	e8 f4 07 00 00       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20444c:	88 44 24 17          	mov    %al,0x17(%rsp)
  204450:	8a 44 24 17          	mov    0x17(%rsp),%al
  204454:	24 01                	and    $0x1,%al
  204456:	88 84 24 b7 00 00 00 	mov    %al,0xb7(%rsp)
  20445d:	f6 84 24 b7 00 00 00 	testb  $0x1,0xb7(%rsp)
  204464:	01 
  204465:	75 13                	jne    20447a <_ZN9r3_kernel3cpu8segments8init_gdt17h9348fa95bcfcd487E+0x23a>

    let tss_sel = &KERNEL_BASE_GDT.kernel_tss_selector;
  204467:	48 8d 3d 09 c0 ff ff 	lea    -0x3ff7(%rip),%rdi        # 200477 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hb62bd72f0f4df038E>
  20446e:	e8 0d 02 00 00       	callq  204680 <_ZN85_$LT$r3_kernel..cpu..segments..KERNEL_BASE_GDT$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3761a377e6201903E>
  204473:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  204478:	eb 43                	jmp    2044bd <_ZN9r3_kernel3cpu8segments8init_gdt17h9348fa95bcfcd487E+0x27d>
    log::info!("Initialized GDT.");
  20447a:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  204481:	00 
  204482:	48 8d 35 d7 e6 00 00 	lea    0xe6d7(%rip),%rsi        # 212b60 <memset+0x1280>
  204489:	ba 01 00 00 00       	mov    $0x1,%edx
  20448e:	48 8d 0d d3 bf ff ff 	lea    -0x402d(%rip),%rcx        # 200468 <str.2+0x98>
  204495:	31 c0                	xor    %eax,%eax
  204497:	41 89 c0             	mov    %eax,%r8d
  20449a:	e8 71 02 00 00       	callq  204710 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  20449f:	48 8b b4 24 a8 00 00 	mov    0xa8(%rsp),%rsi
  2044a6:	00 
  2044a7:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  2044ae:	00 
  2044af:	48 8d 15 ba e6 00 00 	lea    0xe6ba(%rip),%rdx        # 212b70 <memset+0x1290>
  2044b6:	e8 75 82 00 00       	callq  20c730 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  2044bb:	eb aa                	jmp    204467 <_ZN9r3_kernel3cpu8segments8init_gdt17h9348fa95bcfcd487E+0x227>
  2044bd:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    let tss_sel = &KERNEL_BASE_GDT.kernel_tss_selector;
  2044c2:	48 89 c1             	mov    %rax,%rcx
  2044c5:	48 83 c1 4a          	add    $0x4a,%rcx
  2044c9:	48 89 8c 24 50 01 00 	mov    %rcx,0x150(%rsp)
  2044d0:	00 
    load_tss(tss_sel.0);
  2044d1:	0f b7 78 4a          	movzwl 0x4a(%rax),%edi
  2044d5:	e8 c6 ef ff ff       	callq  2034a0 <_ZN9r3_kernel3cpu8segments8load_tss17h2c868d95eb8693b2E>
    log::info!("Initialized TSS.");
  2044da:	48 c7 84 24 f0 00 00 	movq   $0x3,0xf0(%rsp)
  2044e1:	00 03 00 00 00 
  2044e6:	48 8d bc 24 f0 00 00 	lea    0xf0(%rsp),%rdi
  2044ed:	00 
  2044ee:	48 8d 35 43 be ff ff 	lea    -0x41bd(%rip),%rsi        # 200338 <str.0+0x38>
  2044f5:	e8 46 07 00 00       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  2044fa:	88 44 24 07          	mov    %al,0x7(%rsp)
  2044fe:	8a 44 24 07          	mov    0x7(%rsp),%al
  204502:	a8 01                	test   $0x1,%al
  204504:	75 0c                	jne    204512 <_ZN9r3_kernel3cpu8segments8init_gdt17h9348fa95bcfcd487E+0x2d2>
  204506:	eb 00                	jmp    204508 <_ZN9r3_kernel3cpu8segments8init_gdt17h9348fa95bcfcd487E+0x2c8>
  204508:	c6 84 24 ff 00 00 00 	movb   $0x0,0xff(%rsp)
  20450f:	00 
  204510:	eb 5a                	jmp    20456c <_ZN9r3_kernel3cpu8segments8init_gdt17h9348fa95bcfcd487E+0x32c>
  204512:	c6 84 24 5f 01 00 00 	movb   $0x0,0x15f(%rsp)
  204519:	00 
  20451a:	48 8b 3d c7 f5 00 00 	mov    0xf5c7(%rip),%rdi        # 213ae8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  204521:	0f b6 b4 24 5f 01 00 	movzbl 0x15f(%rsp),%esi
  204528:	00 
  204529:	e8 a2 63 00 00       	callq  20a8d0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  20452e:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
  204535:	00 
  204536:	48 8b 84 24 60 01 00 	mov    0x160(%rsp),%rax
  20453d:	00 
  20453e:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  204545:	00 
  204546:	48 8d bc 24 f0 00 00 	lea    0xf0(%rsp),%rdi
  20454d:	00 
  20454e:	48 8d b4 24 00 01 00 	lea    0x100(%rsp),%rsi
  204555:	00 
  204556:	e8 e5 06 00 00       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20455b:	88 44 24 06          	mov    %al,0x6(%rsp)
  20455f:	8a 44 24 06          	mov    0x6(%rsp),%al
  204563:	24 01                	and    $0x1,%al
  204565:	88 84 24 ff 00 00 00 	mov    %al,0xff(%rsp)
  20456c:	f6 84 24 ff 00 00 00 	testb  $0x1,0xff(%rsp)
  204573:	01 
  204574:	75 08                	jne    20457e <_ZN9r3_kernel3cpu8segments8init_gdt17h9348fa95bcfcd487E+0x33e>
}
  204576:	48 81 c4 88 01 00 00 	add    $0x188,%rsp
  20457d:	c3                   	retq   
    log::info!("Initialized TSS.");
  20457e:	48 8d bc 24 08 01 00 	lea    0x108(%rsp),%rdi
  204585:	00 
  204586:	48 8d 35 1b e6 00 00 	lea    0xe61b(%rip),%rsi        # 212ba8 <memset+0x12c8>
  20458d:	ba 01 00 00 00       	mov    $0x1,%edx
  204592:	48 8d 0d cf be ff ff 	lea    -0x4131(%rip),%rcx        # 200468 <str.2+0x98>
  204599:	31 c0                	xor    %eax,%eax
  20459b:	41 89 c0             	mov    %eax,%r8d
  20459e:	e8 6d 01 00 00       	callq  204710 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  2045a3:	48 8b b4 24 f0 00 00 	mov    0xf0(%rsp),%rsi
  2045aa:	00 
  2045ab:	48 8d bc 24 08 01 00 	lea    0x108(%rsp),%rdi
  2045b2:	00 
  2045b3:	48 8d 15 fe e5 00 00 	lea    0xe5fe(%rip),%rdx        # 212bb8 <memset+0x12d8>
  2045ba:	e8 71 81 00 00       	callq  20c730 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  2045bf:	eb b5                	jmp    204576 <_ZN9r3_kernel3cpu8segments8init_gdt17h9348fa95bcfcd487E+0x336>
  2045c1:	cc                   	int3   
  2045c2:	cc                   	int3   
  2045c3:	cc                   	int3   
  2045c4:	cc                   	int3   
  2045c5:	cc                   	int3   
  2045c6:	cc                   	int3   
  2045c7:	cc                   	int3   
  2045c8:	cc                   	int3   
  2045c9:	cc                   	int3   
  2045ca:	cc                   	int3   
  2045cb:	cc                   	int3   
  2045cc:	cc                   	int3   
  2045cd:	cc                   	int3   
  2045ce:	cc                   	int3   
  2045cf:	cc                   	int3   

00000000002045d0 <_ZN78_$LT$r3_kernel..cpu..segments..SegmentSelector$u20$as$u20$core..fmt..Debug$GT$3fmt17hf7b4ee4cd1688ff2E>:
#[derive(Debug)]
  2045d0:	48 83 ec 58          	sub    $0x58,%rsp
  2045d4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2045d9:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  2045de:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
pub struct SegmentSelector(pub u16);
  2045e3:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
#[derive(Debug)]
  2045e8:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  2045ed:	48 8d 15 74 be ff ff 	lea    -0x418c(%rip),%rdx        # 200468 <str.2+0x98>
  2045f4:	b9 0f 00 00 00       	mov    $0xf,%ecx
  2045f9:	e8 82 c7 00 00       	callq  210d80 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>
  2045fe:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  204603:	48 8d 4c 24 18       	lea    0x18(%rsp),%rcx
  204608:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
pub struct SegmentSelector(pub u16);
  20460d:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  204612:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
#[derive(Debug)]
  204617:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  20461c:	48 8d 15 cd e5 00 00 	lea    0xe5cd(%rip),%rdx        # 212bf0 <memset+0x1310>
  204623:	e8 98 a2 00 00       	callq  20e8c0 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>
  204628:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  20462d:	e8 fe a3 00 00       	callq  20ea30 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>
  204632:	88 44 24 0f          	mov    %al,0xf(%rsp)
  204636:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20463a:	24 01                	and    $0x1,%al
  20463c:	0f b6 c0             	movzbl %al,%eax
  20463f:	48 83 c4 58          	add    $0x58,%rsp
  204643:	c3                   	retq   
  204644:	cc                   	int3   
  204645:	cc                   	int3   
  204646:	cc                   	int3   
  204647:	cc                   	int3   
  204648:	cc                   	int3   
  204649:	cc                   	int3   
  20464a:	cc                   	int3   
  20464b:	cc                   	int3   
  20464c:	cc                   	int3   
  20464d:	cc                   	int3   
  20464e:	cc                   	int3   
  20464f:	cc                   	int3   

0000000000204650 <_ZN80_$LT$r3_kernel..cpu..segments..KERNEL_TSS$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc306cbd0648060a6E>:
        lazy_static!($($t)*);
    };
    (@TAIL, $N:ident : $T:ty = $e:expr) => {
        impl $crate::__Deref for $N {
            type Target = $T;
            fn deref(&self) -> &$T {
  204650:	48 83 ec 18          	sub    $0x18,%rsp
  204654:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  204659:	48 8d 05 50 55 01 00 	lea    0x15550(%rip),%rax        # 219bb0 <_ZN80_$LT$r3_kernel..cpu..segments..KERNEL_TSS$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17hcc943e2095b446c4E>
  204660:	48 89 44 24 10       	mov    %rax,0x10(%rsp)

    #[inline(always)]
    pub fn get<F>(&'static self, builder: F) -> &T
        where F: FnOnce() -> T
    {
        self.0.call_once(builder)
  204665:	48 8d 3d 44 55 01 00 	lea    0x15544(%rip),%rdi        # 219bb0 <_ZN80_$LT$r3_kernel..cpu..segments..KERNEL_TSS$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17hcc943e2095b446c4E>
  20466c:	e8 df 2a 00 00       	callq  207150 <_ZN4spin4once13Once$LT$T$GT$9call_once17h52946531d93d03a6E>
  204671:	48 89 04 24          	mov    %rax,(%rsp)
  204675:	48 8b 04 24          	mov    (%rsp),%rax
                fn __stability() -> &'static $T {
                    __lazy_static_create!(LAZY, $T);
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
  204679:	48 83 c4 18          	add    $0x18,%rsp
  20467d:	c3                   	retq   
  20467e:	cc                   	int3   
  20467f:	cc                   	int3   

0000000000204680 <_ZN85_$LT$r3_kernel..cpu..segments..KERNEL_BASE_GDT$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3761a377e6201903E>:
            fn deref(&self) -> &$T {
  204680:	48 83 ec 18          	sub    $0x18,%rsp
  204684:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  204689:	48 8d 05 98 55 01 00 	lea    0x15598(%rip),%rax        # 219c28 <_ZN85_$LT$r3_kernel..cpu..segments..KERNEL_BASE_GDT$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h5e166e16dd8a77c2E>
  204690:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  204695:	48 8d 3d 8c 55 01 00 	lea    0x1558c(%rip),%rdi        # 219c28 <_ZN85_$LT$r3_kernel..cpu..segments..KERNEL_BASE_GDT$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h5e166e16dd8a77c2E>
  20469c:	e8 ef 30 00 00       	callq  207790 <_ZN4spin4once13Once$LT$T$GT$9call_once17hf43756d4812a151fE>
  2046a1:	48 89 04 24          	mov    %rax,(%rsp)
  2046a5:	48 8b 04 24          	mov    (%rsp),%rax
            }
  2046a9:	48 83 c4 18          	add    $0x18,%rsp
  2046ad:	c3                   	retq   
  2046ae:	cc                   	int3   
  2046af:	cc                   	int3   

00000000002046b0 <_ZN4core3fmt9Arguments16new_v1_formatted17hbeddea28af1cc014E>:
    #[cfg(not(bootstrap))]
    #[doc(hidden)]
    #[inline]
    #[unstable(feature = "fmt_internals", reason = "internal to format_args!", issue = "none")]
    #[rustc_const_unstable(feature = "const_fmt_arguments_new", issue = "none")]
    pub const fn new_v1_formatted(
  2046b0:	48 83 ec 48          	sub    $0x48,%rsp
  2046b4:	4d 89 ca             	mov    %r9,%r10
  2046b7:	48 89 f8             	mov    %rdi,%rax
  2046ba:	4c 8b 4c 24 50       	mov    0x50(%rsp),%r9
  2046bf:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  2046c4:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  2046c9:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  2046ce:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
  2046d3:	4c 89 54 24 30       	mov    %r10,0x30(%rsp)
  2046d8:	4c 89 4c 24 38       	mov    %r9,0x38(%rsp)
        pieces: &'a [&'static str],
        args: &'a [ArgumentV1<'a>],
        fmt: &'a [rt::v1::Argument],
        _unsafe_arg: UnsafeArg,
    ) -> Arguments<'a> {
        Arguments { pieces, fmt: Some(fmt), args }
  2046dd:	4c 89 14 24          	mov    %r10,(%rsp)
  2046e1:	4c 89 4c 24 08       	mov    %r9,0x8(%rsp)
  2046e6:	48 89 37             	mov    %rsi,(%rdi)
  2046e9:	48 89 57 08          	mov    %rdx,0x8(%rdi)
  2046ed:	48 8b 34 24          	mov    (%rsp),%rsi
  2046f1:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2046f6:	48 89 77 10          	mov    %rsi,0x10(%rdi)
  2046fa:	48 89 57 18          	mov    %rdx,0x18(%rdi)
  2046fe:	48 89 4f 20          	mov    %rcx,0x20(%rdi)
  204702:	4c 89 47 28          	mov    %r8,0x28(%rdi)
    }
  204706:	48 83 c4 48          	add    $0x48,%rsp
  20470a:	c3                   	retq   
  20470b:	cc                   	int3   
  20470c:	cc                   	int3   
  20470d:	cc                   	int3   
  20470e:	cc                   	int3   
  20470f:	cc                   	int3   

0000000000204710 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>:
    pub const fn new_v1(pieces: &'a [&'static str], args: &'a [ArgumentV1<'a>]) -> Arguments<'a> {
  204710:	48 83 ec 68          	sub    $0x68,%rsp
  204714:	4c 89 04 24          	mov    %r8,(%rsp)
  204718:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  20471d:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  204722:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  204727:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  20472c:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  204731:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
  204736:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  20473b:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  204740:	4c 89 44 24 60       	mov    %r8,0x60(%rsp)
        if pieces.len() < args.len() || pieces.len() > args.len() + 1 {
  204745:	4c 39 c2             	cmp    %r8,%rdx
  204748:	72 1b                	jb     204765 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE+0x55>
  20474a:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20474f:	48 8b 0c 24          	mov    (%rsp),%rcx
  204753:	48 83 c1 01          	add    $0x1,%rcx
  204757:	48 39 c8             	cmp    %rcx,%rax
  20475a:	0f 97 c0             	seta   %al
  20475d:	24 01                	and    $0x1,%al
  20475f:	88 44 24 37          	mov    %al,0x37(%rsp)
  204763:	eb 05                	jmp    20476a <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE+0x5a>
  204765:	c6 44 24 37 01       	movb   $0x1,0x37(%rsp)
  20476a:	f6 44 24 37 01       	testb  $0x1,0x37(%rsp)
  20476f:	75 4c                	jne    2047bd <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE+0xad>
  204771:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  204776:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  20477b:	48 8b 14 24          	mov    (%rsp),%rdx
  20477f:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  204784:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  204789:	4c 8b 44 24 18       	mov    0x18(%rsp),%r8
        Arguments { pieces, fmt: None, args }
  20478e:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
  204795:	00 00 
  204797:	4c 89 01             	mov    %r8,(%rcx)
  20479a:	48 89 79 08          	mov    %rdi,0x8(%rcx)
  20479e:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
  2047a3:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  2047a8:	4c 89 41 10          	mov    %r8,0x10(%rcx)
  2047ac:	48 89 79 18          	mov    %rdi,0x18(%rcx)
  2047b0:	48 89 71 20          	mov    %rsi,0x20(%rcx)
  2047b4:	48 89 51 28          	mov    %rdx,0x28(%rcx)
    }
  2047b8:	48 83 c4 68          	add    $0x68,%rsp
  2047bc:	c3                   	retq   
            panic!("invalid args");
  2047bd:	48 8d 3d b3 bc ff ff 	lea    -0x434d(%rip),%rdi        # 200477 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hb62bd72f0f4df038E>
  2047c4:	48 8d 15 45 e4 00 00 	lea    0xe445(%rip),%rdx        # 212c10 <memset+0x1330>
  2047cb:	be 0c 00 00 00       	mov    $0xc,%esi
  2047d0:	e8 bb a6 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2047d5:	0f 0b                	ud2    
  2047d7:	cc                   	int3   
  2047d8:	cc                   	int3   
  2047d9:	cc                   	int3   
  2047da:	cc                   	int3   
  2047db:	cc                   	int3   
  2047dc:	cc                   	int3   
  2047dd:	cc                   	int3   
  2047de:	cc                   	int3   
  2047df:	cc                   	int3   

00000000002047e0 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$usize$GT$5clone17hb2fa8fb2c422790fE>:
        ($($t:ty)*) => {
            $(
                #[stable(feature = "rust1", since = "1.0.0")]
                impl Clone for $t {
                    #[inline]
                    fn clone(&self) -> Self {
  2047e0:	50                   	push   %rax
  2047e1:	48 89 3c 24          	mov    %rdi,(%rsp)
                        *self
  2047e5:	48 8b 07             	mov    (%rdi),%rax
                    }
  2047e8:	59                   	pop    %rcx
  2047e9:	c3                   	retq   
  2047ea:	cc                   	int3   
  2047eb:	cc                   	int3   
  2047ec:	cc                   	int3   
  2047ed:	cc                   	int3   
  2047ee:	cc                   	int3   
  2047ef:	cc                   	int3   

00000000002047f0 <_ZN10bootloader9boot_info127_$LT$impl$u20$core..convert..From$LT$bootloader..boot_info..Optional$LT$T$GT$$GT$$u20$for$u20$core..option..Option$LT$T$GT$$GT$4from17hc071a28b35f3c4a2E>:
        }
    }
}

impl<T> From<Optional<T>> for Option<T> {
    fn from(optional: Optional<T>) -> Option<T> {
  2047f0:	48 83 ec 28          	sub    $0x28,%rsp
  2047f4:	89 3c 24             	mov    %edi,(%rsp)
  2047f7:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
        match optional {
  2047fc:	8b 04 24             	mov    (%rsp),%eax
  2047ff:	48 85 c0             	test   %rax,%rax
  204802:	74 06                	je     20480a <_ZN10bootloader9boot_info127_$LT$impl$u20$core..convert..From$LT$bootloader..boot_info..Optional$LT$T$GT$$GT$$u20$for$u20$core..option..Option$LT$T$GT$$GT$4from17hc071a28b35f3c4a2E+0x1a>
  204804:	eb 00                	jmp    204806 <_ZN10bootloader9boot_info127_$LT$impl$u20$core..convert..From$LT$bootloader..boot_info..Optional$LT$T$GT$$GT$$u20$for$u20$core..option..Option$LT$T$GT$$GT$4from17hc071a28b35f3c4a2E+0x16>
  204806:	eb 1c                	jmp    204824 <_ZN10bootloader9boot_info127_$LT$impl$u20$core..convert..From$LT$bootloader..boot_info..Optional$LT$T$GT$$GT$$u20$for$u20$core..option..Option$LT$T$GT$$GT$4from17hc071a28b35f3c4a2E+0x34>
  204808:	0f 0b                	ud2    
            Optional::Some(v) => Some(v),
  20480a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20480f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  204814:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  204819:	48 c7 44 24 10 01 00 	movq   $0x1,0x10(%rsp)
  204820:	00 00 
            Optional::None => None,
        }
    }
  204822:	eb 09                	jmp    20482d <_ZN10bootloader9boot_info127_$LT$impl$u20$core..convert..From$LT$bootloader..boot_info..Optional$LT$T$GT$$GT$$u20$for$u20$core..option..Option$LT$T$GT$$GT$4from17hc071a28b35f3c4a2E+0x3d>
            Optional::None => None,
  204824:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  20482b:	00 00 
    }
  20482d:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  204832:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  204837:	48 83 c4 28          	add    $0x28,%rsp
  20483b:	c3                   	retq   
  20483c:	cc                   	int3   
  20483d:	cc                   	int3   
  20483e:	cc                   	int3   
  20483f:	cc                   	int3   

0000000000204840 <_ZN4core6option15Option$LT$T$GT$6as_ref17h5d0bc5b60f792ccdE>:
    /// println!("still can print text: {:?}", text);
    /// ```
    #[inline]
    #[rustc_const_stable(feature = "const_option", since = "1.48.0")]
    #[stable(feature = "rust1", since = "1.0.0")]
    pub const fn as_ref(&self) -> Option<&T> {
  204840:	48 83 ec 20          	sub    $0x20,%rsp
  204844:	48 89 3c 24          	mov    %rdi,(%rsp)
  204848:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  20484d:	0f b6 07             	movzbl (%rdi),%eax
  204850:	a8 01                	test   $0x1,%al
  204852:	74 06                	je     20485a <_ZN4core6option15Option$LT$T$GT$6as_ref17h5d0bc5b60f792ccdE+0x1a>
  204854:	eb 00                	jmp    204856 <_ZN4core6option15Option$LT$T$GT$6as_ref17h5d0bc5b60f792ccdE+0x16>
  204856:	eb 0d                	jmp    204865 <_ZN4core6option15Option$LT$T$GT$6as_ref17h5d0bc5b60f792ccdE+0x25>
  204858:	0f 0b                	ud2    
            Some(ref x) => Some(x),
            None => None,
  20485a:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  204861:	00 00 
  204863:	eb 12                	jmp    204877 <_ZN4core6option15Option$LT$T$GT$6as_ref17h5d0bc5b60f792ccdE+0x37>
  204865:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  204869:	48 83 c0 01          	add    $0x1,%rax
  20486d:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  204872:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
        }
    }
  204877:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20487c:	48 83 c4 20          	add    $0x20,%rsp
  204880:	c3                   	retq   
  204881:	cc                   	int3   
  204882:	cc                   	int3   
  204883:	cc                   	int3   
  204884:	cc                   	int3   
  204885:	cc                   	int3   
  204886:	cc                   	int3   
  204887:	cc                   	int3   
  204888:	cc                   	int3   
  204889:	cc                   	int3   
  20488a:	cc                   	int3   
  20488b:	cc                   	int3   
  20488c:	cc                   	int3   
  20488d:	cc                   	int3   
  20488e:	cc                   	int3   
  20488f:	cc                   	int3   

0000000000204890 <_ZN4core6option15Option$LT$T$GT$6as_ref17h5d51e08c380e0dfcE>:
    pub const fn as_ref(&self) -> Option<&T> {
  204890:	48 83 ec 20          	sub    $0x20,%rsp
  204894:	48 89 3c 24          	mov    %rdi,(%rsp)
  204898:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  20489d:	0f b6 07             	movzbl (%rdi),%eax
  2048a0:	a8 01                	test   $0x1,%al
  2048a2:	74 06                	je     2048aa <_ZN4core6option15Option$LT$T$GT$6as_ref17h5d51e08c380e0dfcE+0x1a>
  2048a4:	eb 00                	jmp    2048a6 <_ZN4core6option15Option$LT$T$GT$6as_ref17h5d51e08c380e0dfcE+0x16>
  2048a6:	eb 0d                	jmp    2048b5 <_ZN4core6option15Option$LT$T$GT$6as_ref17h5d51e08c380e0dfcE+0x25>
  2048a8:	0f 0b                	ud2    
            None => None,
  2048aa:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  2048b1:	00 00 
  2048b3:	eb 12                	jmp    2048c7 <_ZN4core6option15Option$LT$T$GT$6as_ref17h5d51e08c380e0dfcE+0x37>
  2048b5:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  2048b9:	48 83 c0 10          	add    $0x10,%rax
  2048bd:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2048c2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  2048c7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2048cc:	48 83 c4 20          	add    $0x20,%rsp
  2048d0:	c3                   	retq   
  2048d1:	cc                   	int3   
  2048d2:	cc                   	int3   
  2048d3:	cc                   	int3   
  2048d4:	cc                   	int3   
  2048d5:	cc                   	int3   
  2048d6:	cc                   	int3   
  2048d7:	cc                   	int3   
  2048d8:	cc                   	int3   
  2048d9:	cc                   	int3   
  2048da:	cc                   	int3   
  2048db:	cc                   	int3   
  2048dc:	cc                   	int3   
  2048dd:	cc                   	int3   
  2048de:	cc                   	int3   
  2048df:	cc                   	int3   

00000000002048e0 <_ZN4core6option15Option$LT$T$GT$6as_ref17h85b752adf3cf1e1eE>:
    pub const fn as_ref(&self) -> Option<&T> {
  2048e0:	48 83 ec 20          	sub    $0x20,%rsp
  2048e4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2048e8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  2048ed:	48 8b 07             	mov    (%rdi),%rax
  2048f0:	48 85 c0             	test   %rax,%rax
  2048f3:	74 06                	je     2048fb <_ZN4core6option15Option$LT$T$GT$6as_ref17h85b752adf3cf1e1eE+0x1b>
  2048f5:	eb 00                	jmp    2048f7 <_ZN4core6option15Option$LT$T$GT$6as_ref17h85b752adf3cf1e1eE+0x17>
  2048f7:	eb 0d                	jmp    204906 <_ZN4core6option15Option$LT$T$GT$6as_ref17h85b752adf3cf1e1eE+0x26>
  2048f9:	0f 0b                	ud2    
            None => None,
  2048fb:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  204902:	00 00 
  204904:	eb 12                	jmp    204918 <_ZN4core6option15Option$LT$T$GT$6as_ref17h85b752adf3cf1e1eE+0x38>
  204906:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  20490a:	48 83 c0 08          	add    $0x8,%rax
  20490e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  204913:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  204918:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20491d:	48 83 c4 20          	add    $0x20,%rsp
  204921:	c3                   	retq   
  204922:	cc                   	int3   
  204923:	cc                   	int3   
  204924:	cc                   	int3   
  204925:	cc                   	int3   
  204926:	cc                   	int3   
  204927:	cc                   	int3   
  204928:	cc                   	int3   
  204929:	cc                   	int3   
  20492a:	cc                   	int3   
  20492b:	cc                   	int3   
  20492c:	cc                   	int3   
  20492d:	cc                   	int3   
  20492e:	cc                   	int3   
  20492f:	cc                   	int3   

0000000000204930 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb32e5710d5dee042E>:
    pub const fn as_ref(&self) -> Option<&T> {
  204930:	48 83 ec 20          	sub    $0x20,%rsp
  204934:	48 89 3c 24          	mov    %rdi,(%rsp)
  204938:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  20493d:	48 8b 07             	mov    (%rdi),%rax
  204940:	48 85 c0             	test   %rax,%rax
  204943:	74 06                	je     20494b <_ZN4core6option15Option$LT$T$GT$6as_ref17hb32e5710d5dee042E+0x1b>
  204945:	eb 00                	jmp    204947 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb32e5710d5dee042E+0x17>
  204947:	eb 0d                	jmp    204956 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb32e5710d5dee042E+0x26>
  204949:	0f 0b                	ud2    
            None => None,
  20494b:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  204952:	00 00 
  204954:	eb 12                	jmp    204968 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb32e5710d5dee042E+0x38>
  204956:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  20495a:	48 83 c0 08          	add    $0x8,%rax
  20495e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  204963:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  204968:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20496d:	48 83 c4 20          	add    $0x20,%rsp
  204971:	c3                   	retq   
  204972:	cc                   	int3   
  204973:	cc                   	int3   
  204974:	cc                   	int3   
  204975:	cc                   	int3   
  204976:	cc                   	int3   
  204977:	cc                   	int3   
  204978:	cc                   	int3   
  204979:	cc                   	int3   
  20497a:	cc                   	int3   
  20497b:	cc                   	int3   
  20497c:	cc                   	int3   
  20497d:	cc                   	int3   
  20497e:	cc                   	int3   
  20497f:	cc                   	int3   

0000000000204980 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb788dc157266f297E>:
    pub const fn as_ref(&self) -> Option<&T> {
  204980:	48 83 ec 20          	sub    $0x20,%rsp
  204984:	48 89 3c 24          	mov    %rdi,(%rsp)
  204988:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  20498d:	48 8b 07             	mov    (%rdi),%rax
  204990:	48 85 c0             	test   %rax,%rax
  204993:	74 06                	je     20499b <_ZN4core6option15Option$LT$T$GT$6as_ref17hb788dc157266f297E+0x1b>
  204995:	eb 00                	jmp    204997 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb788dc157266f297E+0x17>
  204997:	eb 0d                	jmp    2049a6 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb788dc157266f297E+0x26>
  204999:	0f 0b                	ud2    
            None => None,
  20499b:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  2049a2:	00 00 
  2049a4:	eb 12                	jmp    2049b8 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb788dc157266f297E+0x38>
  2049a6:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  2049aa:	48 83 c0 08          	add    $0x8,%rax
  2049ae:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2049b3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  2049b8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2049bd:	48 83 c4 20          	add    $0x20,%rsp
  2049c1:	c3                   	retq   
  2049c2:	cc                   	int3   
  2049c3:	cc                   	int3   
  2049c4:	cc                   	int3   
  2049c5:	cc                   	int3   
  2049c6:	cc                   	int3   
  2049c7:	cc                   	int3   
  2049c8:	cc                   	int3   
  2049c9:	cc                   	int3   
  2049ca:	cc                   	int3   
  2049cb:	cc                   	int3   
  2049cc:	cc                   	int3   
  2049cd:	cc                   	int3   
  2049ce:	cc                   	int3   
  2049cf:	cc                   	int3   

00000000002049d0 <_ZN4core6option15Option$LT$T$GT$6as_ref17he23472d61c0ffa4bE>:
    pub const fn as_ref(&self) -> Option<&T> {
  2049d0:	48 83 ec 20          	sub    $0x20,%rsp
  2049d4:	48 89 3c 24          	mov    %rdi,(%rsp)
  2049d8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match *self {
  2049dd:	48 8b 07             	mov    (%rdi),%rax
  2049e0:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
  2049e4:	0f 95 c0             	setne  %al
  2049e7:	0f b6 c0             	movzbl %al,%eax
  2049ea:	74 06                	je     2049f2 <_ZN4core6option15Option$LT$T$GT$6as_ref17he23472d61c0ffa4bE+0x22>
  2049ec:	eb 00                	jmp    2049ee <_ZN4core6option15Option$LT$T$GT$6as_ref17he23472d61c0ffa4bE+0x1e>
  2049ee:	eb 0d                	jmp    2049fd <_ZN4core6option15Option$LT$T$GT$6as_ref17he23472d61c0ffa4bE+0x2d>
  2049f0:	0f 0b                	ud2    
            None => None,
  2049f2:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  2049f9:	00 00 
  2049fb:	eb 0e                	jmp    204a0b <_ZN4core6option15Option$LT$T$GT$6as_ref17he23472d61c0ffa4bE+0x3b>
  2049fd:	48 8b 04 24          	mov    (%rsp),%rax
            Some(ref x) => Some(x),
  204a01:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  204a06:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  204a0b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  204a10:	48 83 c4 20          	add    $0x20,%rsp
  204a14:	c3                   	retq   
  204a15:	cc                   	int3   
  204a16:	cc                   	int3   
  204a17:	cc                   	int3   
  204a18:	cc                   	int3   
  204a19:	cc                   	int3   
  204a1a:	cc                   	int3   
  204a1b:	cc                   	int3   
  204a1c:	cc                   	int3   
  204a1d:	cc                   	int3   
  204a1e:	cc                   	int3   
  204a1f:	cc                   	int3   

0000000000204a20 <_ZN4core6option15Option$LT$T$GT$6unwrap17h0214e307054b4802E>:
    /// ```
    #[inline]
    #[track_caller]
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_const_unstable(feature = "const_option", issue = "67441")]
    pub const fn unwrap(self) -> T {
  204a20:	48 83 ec 28          	sub    $0x28,%rsp
  204a24:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  204a29:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  204a2e:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        match self {
  204a33:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  204a38:	48 85 c0             	test   %rax,%rax
  204a3b:	74 06                	je     204a43 <_ZN4core6option15Option$LT$T$GT$6unwrap17h0214e307054b4802E+0x23>
  204a3d:	eb 00                	jmp    204a3f <_ZN4core6option15Option$LT$T$GT$6unwrap17h0214e307054b4802E+0x1f>
  204a3f:	eb 1a                	jmp    204a5b <_ZN4core6option15Option$LT$T$GT$6unwrap17h0214e307054b4802E+0x3b>
  204a41:	0f 0b                	ud2    
  204a43:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
            Some(val) => val,
            None => panic!("called `Option::unwrap()` on a `None` value"),
  204a48:	48 8d 3d a8 ba ff ff 	lea    -0x4558(%rip),%rdi        # 2004f7 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hb62bd72f0f4df038E+0x80>
  204a4f:	be 2b 00 00 00       	mov    $0x2b,%esi
  204a54:	e8 37 a4 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  204a59:	0f 0b                	ud2    
            Some(val) => val,
  204a5b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  204a60:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
        }
    }
  204a65:	48 83 c4 28          	add    $0x28,%rsp
  204a69:	c3                   	retq   
  204a6a:	cc                   	int3   
  204a6b:	cc                   	int3   
  204a6c:	cc                   	int3   
  204a6d:	cc                   	int3   
  204a6e:	cc                   	int3   
  204a6f:	cc                   	int3   

0000000000204a70 <_ZN4core6option15Option$LT$T$GT$6unwrap17hbbf896873896ed21E>:
    pub const fn unwrap(self) -> T {
  204a70:	48 83 ec 18          	sub    $0x18,%rsp
  204a74:	48 89 34 24          	mov    %rsi,(%rsp)
  204a78:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        match self {
  204a7d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  204a82:	48 85 c0             	test   %rax,%rax
  204a85:	0f 95 c0             	setne  %al
  204a88:	0f b6 c0             	movzbl %al,%eax
  204a8b:	74 06                	je     204a93 <_ZN4core6option15Option$LT$T$GT$6unwrap17hbbf896873896ed21E+0x23>
  204a8d:	eb 00                	jmp    204a8f <_ZN4core6option15Option$LT$T$GT$6unwrap17hbbf896873896ed21E+0x1f>
  204a8f:	eb 19                	jmp    204aaa <_ZN4core6option15Option$LT$T$GT$6unwrap17hbbf896873896ed21E+0x3a>
  204a91:	0f 0b                	ud2    
  204a93:	48 8b 14 24          	mov    (%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  204a97:	48 8d 3d 59 ba ff ff 	lea    -0x45a7(%rip),%rdi        # 2004f7 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hb62bd72f0f4df038E+0x80>
  204a9e:	be 2b 00 00 00       	mov    $0x2b,%esi
  204aa3:	e8 e8 a3 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  204aa8:	0f 0b                	ud2    
            Some(val) => val,
  204aaa:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  204aaf:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    }
  204ab4:	48 83 c4 18          	add    $0x18,%rsp
  204ab8:	c3                   	retq   
  204ab9:	cc                   	int3   
  204aba:	cc                   	int3   
  204abb:	cc                   	int3   
  204abc:	cc                   	int3   
  204abd:	cc                   	int3   
  204abe:	cc                   	int3   
  204abf:	cc                   	int3   

0000000000204ac0 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc6b8546214314199E>:
    pub const fn unwrap(self) -> T {
  204ac0:	48 83 ec 18          	sub    $0x18,%rsp
  204ac4:	48 89 34 24          	mov    %rsi,(%rsp)
  204ac8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        match self {
  204acd:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  204ad2:	48 85 c0             	test   %rax,%rax
  204ad5:	0f 95 c0             	setne  %al
  204ad8:	0f b6 c0             	movzbl %al,%eax
  204adb:	74 06                	je     204ae3 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc6b8546214314199E+0x23>
  204add:	eb 00                	jmp    204adf <_ZN4core6option15Option$LT$T$GT$6unwrap17hc6b8546214314199E+0x1f>
  204adf:	eb 19                	jmp    204afa <_ZN4core6option15Option$LT$T$GT$6unwrap17hc6b8546214314199E+0x3a>
  204ae1:	0f 0b                	ud2    
  204ae3:	48 8b 14 24          	mov    (%rsp),%rdx
            None => panic!("called `Option::unwrap()` on a `None` value"),
  204ae7:	48 8d 3d 09 ba ff ff 	lea    -0x45f7(%rip),%rdi        # 2004f7 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hb62bd72f0f4df038E+0x80>
  204aee:	be 2b 00 00 00       	mov    $0x2b,%esi
  204af3:	e8 98 a3 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  204af8:	0f 0b                	ud2    
            Some(val) => val,
  204afa:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  204aff:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    }
  204b04:	48 83 c4 18          	add    $0x18,%rsp
  204b08:	c3                   	retq   
  204b09:	cc                   	int3   
  204b0a:	cc                   	int3   
  204b0b:	cc                   	int3   
  204b0c:	cc                   	int3   
  204b0d:	cc                   	int3   
  204b0e:	cc                   	int3   
  204b0f:	cc                   	int3   

0000000000204b10 <_ZN4core6option15Option$LT$T$GT$7is_some17hf8aefa45402bfb24E>:
    pub const fn is_some(&self) -> bool {
  204b10:	48 83 ec 10          	sub    $0x10,%rsp
  204b14:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Some(_))
  204b19:	48 83 3f 01          	cmpq   $0x1,(%rdi)
  204b1d:	75 07                	jne    204b26 <_ZN4core6option15Option$LT$T$GT$7is_some17hf8aefa45402bfb24E+0x16>
  204b1f:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  204b24:	eb 05                	jmp    204b2b <_ZN4core6option15Option$LT$T$GT$7is_some17hf8aefa45402bfb24E+0x1b>
  204b26:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  204b2b:	8a 44 24 07          	mov    0x7(%rsp),%al
  204b2f:	24 01                	and    $0x1,%al
  204b31:	0f b6 c0             	movzbl %al,%eax
  204b34:	48 83 c4 10          	add    $0x10,%rsp
  204b38:	c3                   	retq   
  204b39:	cc                   	int3   
  204b3a:	cc                   	int3   
  204b3b:	cc                   	int3   
  204b3c:	cc                   	int3   
  204b3d:	cc                   	int3   
  204b3e:	cc                   	int3   
  204b3f:	cc                   	int3   

0000000000204b40 <_ZN4core6option19Option$LT$$RF$T$GT$6copied17h5feef6fcd2d2c583E>:
    /// let copied = opt_x.copied();
    /// assert_eq!(copied, Some(12));
    /// ```
    #[stable(feature = "copied", since = "1.35.0")]
    #[rustc_const_unstable(feature = "const_option", issue = "67441")]
    pub const fn copied(self) -> Option<T> {
  204b40:	48 83 ec 10          	sub    $0x10,%rsp
  204b44:	48 89 3c 24          	mov    %rdi,(%rsp)
        // FIXME: this implementation, which sidesteps using `Option::map` since it's not const
        // ready yet, should be reverted when possible to avoid code repetition
        match self {
  204b48:	48 8b 04 24          	mov    (%rsp),%rax
  204b4c:	48 85 c0             	test   %rax,%rax
  204b4f:	0f 95 c0             	setne  %al
  204b52:	0f b6 c0             	movzbl %al,%eax
  204b55:	74 06                	je     204b5d <_ZN4core6option19Option$LT$$RF$T$GT$6copied17h5feef6fcd2d2c583E+0x1d>
  204b57:	eb 00                	jmp    204b59 <_ZN4core6option19Option$LT$$RF$T$GT$6copied17h5feef6fcd2d2c583E+0x19>
  204b59:	eb 09                	jmp    204b64 <_ZN4core6option19Option$LT$$RF$T$GT$6copied17h5feef6fcd2d2c583E+0x24>
  204b5b:	0f 0b                	ud2    
            Some(&v) => Some(v),
            None => None,
  204b5d:	c6 44 24 08 00       	movb   $0x0,0x8(%rsp)
  204b62:	eb 13                	jmp    204b77 <_ZN4core6option19Option$LT$$RF$T$GT$6copied17h5feef6fcd2d2c583E+0x37>
            Some(&v) => Some(v),
  204b64:	48 8b 04 24          	mov    (%rsp),%rax
  204b68:	8a 00                	mov    (%rax),%al
  204b6a:	88 44 24 0f          	mov    %al,0xf(%rsp)
  204b6e:	88 44 24 09          	mov    %al,0x9(%rsp)
  204b72:	c6 44 24 08 01       	movb   $0x1,0x8(%rsp)
        }
    }
  204b77:	8a 44 24 08          	mov    0x8(%rsp),%al
  204b7b:	8a 54 24 09          	mov    0x9(%rsp),%dl
  204b7f:	48 83 c4 10          	add    $0x10,%rsp
  204b83:	c3                   	retq   
  204b84:	cc                   	int3   
  204b85:	cc                   	int3   
  204b86:	cc                   	int3   
  204b87:	cc                   	int3   
  204b88:	cc                   	int3   
  204b89:	cc                   	int3   
  204b8a:	cc                   	int3   
  204b8b:	cc                   	int3   
  204b8c:	cc                   	int3   
  204b8d:	cc                   	int3   
  204b8e:	cc                   	int3   
  204b8f:	cc                   	int3   

0000000000204b90 <_ZN3log13set_max_level17hde76aa4dc95feb85E>:
pub fn set_max_level(level: LevelFilter) {
  204b90:	48 83 ec 18          	sub    $0x18,%rsp
  204b94:	48 89 fe             	mov    %rdi,%rsi
  204b97:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
    MAX_LOG_LEVEL_FILTER.store(level as usize, Ordering::SeqCst)
  204b9c:	c6 44 24 0f 04       	movb   $0x4,0xf(%rsp)
  204ba1:	48 8b 3d 40 ef 00 00 	mov    0xef40(%rip),%rdi        # 213ae8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  204ba8:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  204bad:	e8 5e 5d 00 00       	callq  20a910 <_ZN4core4sync6atomic11AtomicUsize5store17h5dd1fdb8f532295fE>
}
  204bb2:	48 83 c4 18          	add    $0x18,%rsp
  204bb6:	c3                   	retq   
  204bb7:	cc                   	int3   
  204bb8:	cc                   	int3   
  204bb9:	cc                   	int3   
  204bba:	cc                   	int3   
  204bbb:	cc                   	int3   
  204bbc:	cc                   	int3   
  204bbd:	cc                   	int3   
  204bbe:	cc                   	int3   
  204bbf:	cc                   	int3   

0000000000204bc0 <_ZN3log6Record4args17h00da0becc25b6d80E>:
    pub fn args(&self) -> &fmt::Arguments<'a> {
  204bc0:	50                   	push   %rax
  204bc1:	48 89 f8             	mov    %rdi,%rax
  204bc4:	48 89 04 24          	mov    %rax,(%rsp)
        &self.args
  204bc8:	48 83 c0 18          	add    $0x18,%rax
    }
  204bcc:	59                   	pop    %rcx
  204bcd:	c3                   	retq   
  204bce:	cc                   	int3   
  204bcf:	cc                   	int3   

0000000000204bd0 <_ZN3log6Record5level17h9ec9075ad9e549b9E>:
    pub fn level(&self) -> Level {
  204bd0:	48 83 ec 18          	sub    $0x18,%rsp
  204bd4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.metadata.level()
  204bd9:	e8 42 00 00 00       	callq  204c20 <_ZN3log8Metadata5level17h4faf105409024f8aE>
  204bde:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  204be3:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  204be8:	48 83 c4 18          	add    $0x18,%rsp
  204bec:	c3                   	retq   
  204bed:	cc                   	int3   
  204bee:	cc                   	int3   
  204bef:	cc                   	int3   

0000000000204bf0 <_ZN3log6Record6target17h7f5fb57e8f9ebb4eE>:
    pub fn target(&self) -> &'a str {
  204bf0:	48 83 ec 18          	sub    $0x18,%rsp
  204bf4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.metadata.target()
  204bf9:	e8 32 00 00 00       	callq  204c30 <_ZN3log8Metadata6target17hd479539607d524cfE>
  204bfe:	48 89 04 24          	mov    %rax,(%rsp)
  204c02:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  204c07:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  204c0c:	48 8b 04 24          	mov    (%rsp),%rax
    }
  204c10:	48 83 c4 18          	add    $0x18,%rsp
  204c14:	c3                   	retq   
  204c15:	cc                   	int3   
  204c16:	cc                   	int3   
  204c17:	cc                   	int3   
  204c18:	cc                   	int3   
  204c19:	cc                   	int3   
  204c1a:	cc                   	int3   
  204c1b:	cc                   	int3   
  204c1c:	cc                   	int3   
  204c1d:	cc                   	int3   
  204c1e:	cc                   	int3   
  204c1f:	cc                   	int3   

0000000000204c20 <_ZN3log8Metadata5level17h4faf105409024f8aE>:
    pub fn level(&self) -> Level {
  204c20:	50                   	push   %rax
  204c21:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.level
  204c25:	48 8b 07             	mov    (%rdi),%rax
    }
  204c28:	59                   	pop    %rcx
  204c29:	c3                   	retq   
  204c2a:	cc                   	int3   
  204c2b:	cc                   	int3   
  204c2c:	cc                   	int3   
  204c2d:	cc                   	int3   
  204c2e:	cc                   	int3   
  204c2f:	cc                   	int3   

0000000000204c30 <_ZN3log8Metadata6target17hd479539607d524cfE>:
    pub fn target(&self) -> &'a str {
  204c30:	50                   	push   %rax
  204c31:	48 89 3c 24          	mov    %rdi,(%rsp)
        self.target
  204c35:	48 8b 47 08          	mov    0x8(%rdi),%rax
  204c39:	48 8b 57 10          	mov    0x10(%rdi),%rdx
    }
  204c3d:	59                   	pop    %rcx
  204c3e:	c3                   	retq   
  204c3f:	cc                   	int3   

0000000000204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>:
    fn le(&self, other: &LevelFilter) -> bool {
  204c40:	48 83 ec 10          	sub    $0x10,%rsp
  204c44:	48 89 3c 24          	mov    %rdi,(%rsp)
  204c48:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
        *self as usize <= *other as usize
  204c4d:	48 8b 07             	mov    (%rdi),%rax
  204c50:	48 8b 0e             	mov    (%rsi),%rcx
  204c53:	48 39 c8             	cmp    %rcx,%rax
  204c56:	0f 96 c0             	setbe  %al
    }
  204c59:	24 01                	and    $0x1,%al
  204c5b:	0f b6 c0             	movzbl %al,%eax
  204c5e:	48 83 c4 10          	add    $0x10,%rsp
  204c62:	c3                   	retq   
  204c63:	cc                   	int3   
  204c64:	cc                   	int3   
  204c65:	cc                   	int3   
  204c66:	cc                   	int3   
  204c67:	cc                   	int3   
  204c68:	cc                   	int3   
  204c69:	cc                   	int3   
  204c6a:	cc                   	int3   
  204c6b:	cc                   	int3   
  204c6c:	cc                   	int3   
  204c6d:	cc                   	int3   
  204c6e:	cc                   	int3   
  204c6f:	cc                   	int3   

0000000000204c70 <_ZN84_$LT$r3_kernel..cpu..interrupts..InterruptStackFrame$u20$as$u20$core..fmt..Debug$GT$3fmt17h17704686073dfe8aE>:
    pub stack_pointer: u64,
    pub stack_segment: u64,
}

impl fmt::Debug for InterruptStackFrame {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
  204c70:	48 83 ec 48          	sub    $0x48,%rsp
  204c74:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  204c79:	48 89 f8             	mov    %rdi,%rax
  204c7c:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  204c81:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  204c86:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  204c8b:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
        let mut format_string = f.debug_struct("Exception Info");
  204c90:	48 8d 35 8b b8 ff ff 	lea    -0x4775(%rip),%rsi        # 200522 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hb62bd72f0f4df038E+0xab>
  204c97:	ba 0e 00 00 00       	mov    $0xe,%edx
  204c9c:	e8 bf c0 00 00       	callq  210d60 <_ZN4core3fmt9Formatter12debug_struct17h5d99847e6c2ca81bE>
  204ca1:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  204ca6:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  204cab:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  204cb0:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  204cb5:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  204cba:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  204cbf:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
        format_string.field("instruction_pointer", &self.instruction_pointer);
  204cc4:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  204cc9:	48 8d 35 60 b8 ff ff 	lea    -0x47a0(%rip),%rsi        # 200530 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hb62bd72f0f4df038E+0xb9>
  204cd0:	ba 13 00 00 00       	mov    $0x13,%edx
  204cd5:	4c 8d 05 4c df 00 00 	lea    0xdf4c(%rip),%r8        # 212c28 <memset+0x1348>
  204cdc:	e8 cf 99 00 00       	callq  20e6b0 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  204ce1:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
        format_string.field("code_segment", &self.code_segment);
  204ce6:	48 83 c1 08          	add    $0x8,%rcx
  204cea:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  204cef:	48 8d 35 4d b8 ff ff 	lea    -0x47b3(%rip),%rsi        # 200543 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hb62bd72f0f4df038E+0xcc>
  204cf6:	ba 0c 00 00 00       	mov    $0xc,%edx
  204cfb:	4c 8d 05 26 df 00 00 	lea    0xdf26(%rip),%r8        # 212c28 <memset+0x1348>
  204d02:	e8 a9 99 00 00       	callq  20e6b0 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  204d07:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
        format_string.field("cpu_flags", &self.cpu_flags);
  204d0c:	48 83 c1 10          	add    $0x10,%rcx
  204d10:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  204d15:	48 8d 35 33 b8 ff ff 	lea    -0x47cd(%rip),%rsi        # 20054f <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hb62bd72f0f4df038E+0xd8>
  204d1c:	ba 09 00 00 00       	mov    $0x9,%edx
  204d21:	4c 8d 05 00 df 00 00 	lea    0xdf00(%rip),%r8        # 212c28 <memset+0x1348>
  204d28:	e8 83 99 00 00       	callq  20e6b0 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  204d2d:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
        format_string.field("stack_pointer", &self.stack_pointer);
  204d32:	48 83 c1 18          	add    $0x18,%rcx
  204d36:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  204d3b:	48 8d 35 16 b8 ff ff 	lea    -0x47ea(%rip),%rsi        # 200558 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hb62bd72f0f4df038E+0xe1>
  204d42:	ba 0d 00 00 00       	mov    $0xd,%edx
  204d47:	4c 8d 05 da de 00 00 	lea    0xdeda(%rip),%r8        # 212c28 <memset+0x1348>
  204d4e:	e8 5d 99 00 00       	callq  20e6b0 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  204d53:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
        format_string.field("stack_segment", &self.stack_segment);
  204d58:	48 83 c1 20          	add    $0x20,%rcx
  204d5c:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  204d61:	48 8d 35 fd b7 ff ff 	lea    -0x4803(%rip),%rsi        # 200565 <_ZN9r3_kernel3cpu8segments10KERNEL_TSS17hb62bd72f0f4df038E+0xee>
  204d68:	ba 0d 00 00 00       	mov    $0xd,%edx
  204d6d:	4c 8d 05 b4 de 00 00 	lea    0xdeb4(%rip),%r8        # 212c28 <memset+0x1348>
  204d74:	e8 37 99 00 00       	callq  20e6b0 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>

        format_string.finish()
  204d79:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  204d7e:	e8 ed 9a 00 00       	callq  20e870 <_ZN4core3fmt8builders11DebugStruct6finish17hc529cf49026acc64E>
  204d83:	88 44 24 07          	mov    %al,0x7(%rsp)
  204d87:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  204d8b:	24 01                	and    $0x1,%al
  204d8d:	0f b6 c0             	movzbl %al,%eax
  204d90:	48 83 c4 48          	add    $0x48,%rsp
  204d94:	c3                   	retq   
  204d95:	cc                   	int3   
  204d96:	cc                   	int3   
  204d97:	cc                   	int3   
  204d98:	cc                   	int3   
  204d99:	cc                   	int3   
  204d9a:	cc                   	int3   
  204d9b:	cc                   	int3   
  204d9c:	cc                   	int3   
  204d9d:	cc                   	int3   
  204d9e:	cc                   	int3   
  204d9f:	cc                   	int3   

0000000000204da0 <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable5empty17he645bac9df5f28f0E>:
    reserved_3: InterruptDescriptorEntry<DefaultHandlerFunction>,
    interrupts: [InterruptDescriptorEntry<DefaultHandlerFunction>; 256 - 32],
}

impl InterruptDescriptorTable {
    pub fn empty() -> Self {
  204da0:	48 81 ec f8 11 00 00 	sub    $0x11f8,%rsp
  204da7:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  204dac:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
        InterruptDescriptorTable {
            divide_error: InterruptDescriptorEntry::empty(),
  204db1:	e8 7a 20 00 00       	callq  206e30 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h630d1891060b21e5E>
  204db6:	48 89 94 24 70 10 00 	mov    %rdx,0x1070(%rsp)
  204dbd:	00 
  204dbe:	48 89 84 24 68 10 00 	mov    %rax,0x1068(%rsp)
  204dc5:	00 
  204dc6:	48 8b 84 24 68 10 00 	mov    0x1068(%rsp),%rax
  204dcd:	00 
  204dce:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  204dd3:	48 8b 84 24 70 10 00 	mov    0x1070(%rsp),%rax
  204dda:	00 
  204ddb:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
            debug: InterruptDescriptorEntry::empty(),
  204de0:	e8 4b 20 00 00       	callq  206e30 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h630d1891060b21e5E>
  204de5:	48 89 94 24 80 10 00 	mov    %rdx,0x1080(%rsp)
  204dec:	00 
  204ded:	48 89 84 24 78 10 00 	mov    %rax,0x1078(%rsp)
  204df4:	00 
  204df5:	48 8b 84 24 78 10 00 	mov    0x1078(%rsp),%rax
  204dfc:	00 
  204dfd:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  204e02:	48 8b 84 24 80 10 00 	mov    0x1080(%rsp),%rax
  204e09:	00 
  204e0a:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
            non_maskable_interrupt: InterruptDescriptorEntry::empty(),
  204e0f:	e8 1c 20 00 00       	callq  206e30 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h630d1891060b21e5E>
  204e14:	48 89 94 24 90 10 00 	mov    %rdx,0x1090(%rsp)
  204e1b:	00 
  204e1c:	48 89 84 24 88 10 00 	mov    %rax,0x1088(%rsp)
  204e23:	00 
  204e24:	48 8b 84 24 88 10 00 	mov    0x1088(%rsp),%rax
  204e2b:	00 
  204e2c:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  204e31:	48 8b 84 24 90 10 00 	mov    0x1090(%rsp),%rax
  204e38:	00 
  204e39:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
            breakpoint: InterruptDescriptorEntry::empty(),
  204e3e:	e8 ed 1f 00 00       	callq  206e30 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h630d1891060b21e5E>
  204e43:	48 89 94 24 a0 10 00 	mov    %rdx,0x10a0(%rsp)
  204e4a:	00 
  204e4b:	48 89 84 24 98 10 00 	mov    %rax,0x1098(%rsp)
  204e52:	00 
  204e53:	48 8b 84 24 98 10 00 	mov    0x1098(%rsp),%rax
  204e5a:	00 
  204e5b:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  204e60:	48 8b 84 24 a0 10 00 	mov    0x10a0(%rsp),%rax
  204e67:	00 
  204e68:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  204e6f:	00 
            overflow: InterruptDescriptorEntry::empty(),
  204e70:	e8 bb 1f 00 00       	callq  206e30 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h630d1891060b21e5E>
  204e75:	48 89 94 24 b0 10 00 	mov    %rdx,0x10b0(%rsp)
  204e7c:	00 
  204e7d:	48 89 84 24 a8 10 00 	mov    %rax,0x10a8(%rsp)
  204e84:	00 
  204e85:	48 8b 84 24 a8 10 00 	mov    0x10a8(%rsp),%rax
  204e8c:	00 
  204e8d:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  204e94:	00 
  204e95:	48 8b 84 24 b0 10 00 	mov    0x10b0(%rsp),%rax
  204e9c:	00 
  204e9d:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  204ea4:	00 
            bound_range_exceeded: InterruptDescriptorEntry::empty(),
  204ea5:	e8 86 1f 00 00       	callq  206e30 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h630d1891060b21e5E>
  204eaa:	48 89 94 24 c0 10 00 	mov    %rdx,0x10c0(%rsp)
  204eb1:	00 
  204eb2:	48 89 84 24 b8 10 00 	mov    %rax,0x10b8(%rsp)
  204eb9:	00 
  204eba:	48 8b 84 24 b8 10 00 	mov    0x10b8(%rsp),%rax
  204ec1:	00 
  204ec2:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  204ec9:	00 
  204eca:	48 8b 84 24 c0 10 00 	mov    0x10c0(%rsp),%rax
  204ed1:	00 
  204ed2:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  204ed9:	00 
            invalid_opcode: InterruptDescriptorEntry::empty(),
  204eda:	e8 51 1f 00 00       	callq  206e30 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h630d1891060b21e5E>
  204edf:	48 89 94 24 d0 10 00 	mov    %rdx,0x10d0(%rsp)
  204ee6:	00 
  204ee7:	48 89 84 24 c8 10 00 	mov    %rax,0x10c8(%rsp)
  204eee:	00 
  204eef:	48 8b 84 24 c8 10 00 	mov    0x10c8(%rsp),%rax
  204ef6:	00 
  204ef7:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  204efe:	00 
  204eff:	48 8b 84 24 d0 10 00 	mov    0x10d0(%rsp),%rax
  204f06:	00 
  204f07:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  204f0e:	00 
            device_not_available: InterruptDescriptorEntry::empty(),
  204f0f:	e8 1c 1f 00 00       	callq  206e30 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h630d1891060b21e5E>
  204f14:	48 89 94 24 e0 10 00 	mov    %rdx,0x10e0(%rsp)
  204f1b:	00 
  204f1c:	48 89 84 24 d8 10 00 	mov    %rax,0x10d8(%rsp)
  204f23:	00 
  204f24:	48 8b 84 24 d8 10 00 	mov    0x10d8(%rsp),%rax
  204f2b:	00 
  204f2c:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  204f33:	00 
  204f34:	48 8b 84 24 e0 10 00 	mov    0x10e0(%rsp),%rax
  204f3b:	00 
  204f3c:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  204f43:	00 
            double_fault: InterruptDescriptorEntry::empty(),
  204f44:	e8 67 1f 00 00       	callq  206eb0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hf14332c24ab91231E>
  204f49:	48 89 94 24 f0 10 00 	mov    %rdx,0x10f0(%rsp)
  204f50:	00 
  204f51:	48 89 84 24 e8 10 00 	mov    %rax,0x10e8(%rsp)
  204f58:	00 
  204f59:	48 8b 84 24 e8 10 00 	mov    0x10e8(%rsp),%rax
  204f60:	00 
  204f61:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  204f68:	00 
  204f69:	48 8b 84 24 f0 10 00 	mov    0x10f0(%rsp),%rax
  204f70:	00 
  204f71:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  204f78:	00 
            coprocessor_segment_overrun: InterruptDescriptorEntry::empty(),
  204f79:	e8 b2 1e 00 00       	callq  206e30 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h630d1891060b21e5E>
  204f7e:	48 89 94 24 00 11 00 	mov    %rdx,0x1100(%rsp)
  204f85:	00 
  204f86:	48 89 84 24 f8 10 00 	mov    %rax,0x10f8(%rsp)
  204f8d:	00 
  204f8e:	48 8b 84 24 f8 10 00 	mov    0x10f8(%rsp),%rax
  204f95:	00 
  204f96:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  204f9d:	00 
  204f9e:	48 8b 84 24 00 11 00 	mov    0x1100(%rsp),%rax
  204fa5:	00 
  204fa6:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  204fad:	00 
            invalid_tss: InterruptDescriptorEntry::empty(),
  204fae:	e8 bd 1e 00 00       	callq  206e70 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hab90ef8d45026c4fE>
  204fb3:	48 89 94 24 10 11 00 	mov    %rdx,0x1110(%rsp)
  204fba:	00 
  204fbb:	48 89 84 24 08 11 00 	mov    %rax,0x1108(%rsp)
  204fc2:	00 
  204fc3:	48 8b 84 24 08 11 00 	mov    0x1108(%rsp),%rax
  204fca:	00 
  204fcb:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  204fd2:	00 
  204fd3:	48 8b 84 24 10 11 00 	mov    0x1110(%rsp),%rax
  204fda:	00 
  204fdb:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  204fe2:	00 
            segment_not_present: InterruptDescriptorEntry::empty(),
  204fe3:	e8 88 1e 00 00       	callq  206e70 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hab90ef8d45026c4fE>
  204fe8:	48 89 94 24 20 11 00 	mov    %rdx,0x1120(%rsp)
  204fef:	00 
  204ff0:	48 89 84 24 18 11 00 	mov    %rax,0x1118(%rsp)
  204ff7:	00 
  204ff8:	48 8b 84 24 18 11 00 	mov    0x1118(%rsp),%rax
  204fff:	00 
  205000:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  205007:	00 
  205008:	48 8b 84 24 20 11 00 	mov    0x1120(%rsp),%rax
  20500f:	00 
  205010:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  205017:	00 
            stack_segment_fault: InterruptDescriptorEntry::empty(),
  205018:	e8 53 1e 00 00       	callq  206e70 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hab90ef8d45026c4fE>
  20501d:	48 89 94 24 30 11 00 	mov    %rdx,0x1130(%rsp)
  205024:	00 
  205025:	48 89 84 24 28 11 00 	mov    %rax,0x1128(%rsp)
  20502c:	00 
  20502d:	48 8b 84 24 28 11 00 	mov    0x1128(%rsp),%rax
  205034:	00 
  205035:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  20503c:	00 
  20503d:	48 8b 84 24 30 11 00 	mov    0x1130(%rsp),%rax
  205044:	00 
  205045:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  20504c:	00 
            general_protection_fault: InterruptDescriptorEntry::empty(),
  20504d:	e8 1e 1e 00 00       	callq  206e70 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hab90ef8d45026c4fE>
  205052:	48 89 94 24 40 11 00 	mov    %rdx,0x1140(%rsp)
  205059:	00 
  20505a:	48 89 84 24 38 11 00 	mov    %rax,0x1138(%rsp)
  205061:	00 
  205062:	48 8b 84 24 38 11 00 	mov    0x1138(%rsp),%rax
  205069:	00 
  20506a:	48 89 84 24 18 01 00 	mov    %rax,0x118(%rsp)
  205071:	00 
  205072:	48 8b 84 24 40 11 00 	mov    0x1140(%rsp),%rax
  205079:	00 
  20507a:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
  205081:	00 
            page_fault: InterruptDescriptorEntry::empty(),
  205082:	e8 e9 1d 00 00       	callq  206e70 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hab90ef8d45026c4fE>
  205087:	48 89 94 24 50 11 00 	mov    %rdx,0x1150(%rsp)
  20508e:	00 
  20508f:	48 89 84 24 48 11 00 	mov    %rax,0x1148(%rsp)
  205096:	00 
  205097:	48 8b 84 24 48 11 00 	mov    0x1148(%rsp),%rax
  20509e:	00 
  20509f:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
  2050a6:	00 
  2050a7:	48 8b 84 24 50 11 00 	mov    0x1150(%rsp),%rax
  2050ae:	00 
  2050af:	48 89 84 24 30 01 00 	mov    %rax,0x130(%rsp)
  2050b6:	00 
            reserved_1: InterruptDescriptorEntry::empty(),
  2050b7:	e8 74 1d 00 00       	callq  206e30 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h630d1891060b21e5E>
  2050bc:	48 89 94 24 60 11 00 	mov    %rdx,0x1160(%rsp)
  2050c3:	00 
  2050c4:	48 89 84 24 58 11 00 	mov    %rax,0x1158(%rsp)
  2050cb:	00 
  2050cc:	48 8b 84 24 58 11 00 	mov    0x1158(%rsp),%rax
  2050d3:	00 
  2050d4:	48 89 84 24 38 01 00 	mov    %rax,0x138(%rsp)
  2050db:	00 
  2050dc:	48 8b 84 24 60 11 00 	mov    0x1160(%rsp),%rax
  2050e3:	00 
  2050e4:	48 89 84 24 40 01 00 	mov    %rax,0x140(%rsp)
  2050eb:	00 
            x87_floating_point: InterruptDescriptorEntry::empty(),
  2050ec:	e8 3f 1d 00 00       	callq  206e30 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h630d1891060b21e5E>
  2050f1:	48 89 94 24 70 11 00 	mov    %rdx,0x1170(%rsp)
  2050f8:	00 
  2050f9:	48 89 84 24 68 11 00 	mov    %rax,0x1168(%rsp)
  205100:	00 
  205101:	48 8b 84 24 68 11 00 	mov    0x1168(%rsp),%rax
  205108:	00 
  205109:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
  205110:	00 
  205111:	48 8b 84 24 70 11 00 	mov    0x1170(%rsp),%rax
  205118:	00 
  205119:	48 89 84 24 50 01 00 	mov    %rax,0x150(%rsp)
  205120:	00 
            alignment_check: InterruptDescriptorEntry::empty(),
  205121:	e8 4a 1d 00 00       	callq  206e70 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hab90ef8d45026c4fE>
  205126:	48 89 94 24 80 11 00 	mov    %rdx,0x1180(%rsp)
  20512d:	00 
  20512e:	48 89 84 24 78 11 00 	mov    %rax,0x1178(%rsp)
  205135:	00 
  205136:	48 8b 84 24 78 11 00 	mov    0x1178(%rsp),%rax
  20513d:	00 
  20513e:	48 89 84 24 58 01 00 	mov    %rax,0x158(%rsp)
  205145:	00 
  205146:	48 8b 84 24 80 11 00 	mov    0x1180(%rsp),%rax
  20514d:	00 
  20514e:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
  205155:	00 
            machine_check: InterruptDescriptorEntry::empty(),
  205156:	e8 95 1c 00 00       	callq  206df0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h04c8c4937b73abf4E>
  20515b:	48 89 94 24 90 11 00 	mov    %rdx,0x1190(%rsp)
  205162:	00 
  205163:	48 89 84 24 88 11 00 	mov    %rax,0x1188(%rsp)
  20516a:	00 
  20516b:	48 8b 84 24 88 11 00 	mov    0x1188(%rsp),%rax
  205172:	00 
  205173:	48 89 84 24 68 01 00 	mov    %rax,0x168(%rsp)
  20517a:	00 
  20517b:	48 8b 84 24 90 11 00 	mov    0x1190(%rsp),%rax
  205182:	00 
  205183:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  20518a:	00 
            simd_floating_point: InterruptDescriptorEntry::empty(),
  20518b:	e8 a0 1c 00 00       	callq  206e30 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h630d1891060b21e5E>
  205190:	48 89 94 24 a0 11 00 	mov    %rdx,0x11a0(%rsp)
  205197:	00 
  205198:	48 89 84 24 98 11 00 	mov    %rax,0x1198(%rsp)
  20519f:	00 
  2051a0:	48 8b 84 24 98 11 00 	mov    0x1198(%rsp),%rax
  2051a7:	00 
  2051a8:	48 89 84 24 78 01 00 	mov    %rax,0x178(%rsp)
  2051af:	00 
  2051b0:	48 8b 84 24 a0 11 00 	mov    0x11a0(%rsp),%rax
  2051b7:	00 
  2051b8:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  2051bf:	00 
            virtualization: InterruptDescriptorEntry::empty(),
  2051c0:	e8 6b 1c 00 00       	callq  206e30 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h630d1891060b21e5E>
  2051c5:	48 89 94 24 b0 11 00 	mov    %rdx,0x11b0(%rsp)
  2051cc:	00 
  2051cd:	48 89 84 24 a8 11 00 	mov    %rax,0x11a8(%rsp)
  2051d4:	00 
  2051d5:	48 8b 84 24 a8 11 00 	mov    0x11a8(%rsp),%rax
  2051dc:	00 
  2051dd:	48 89 84 24 88 01 00 	mov    %rax,0x188(%rsp)
  2051e4:	00 
  2051e5:	48 8b 84 24 b0 11 00 	mov    0x11b0(%rsp),%rax
  2051ec:	00 
  2051ed:	48 89 84 24 90 01 00 	mov    %rax,0x190(%rsp)
  2051f4:	00 
            reserved_2: [InterruptDescriptorEntry::empty(); 9],
  2051f5:	e8 36 1c 00 00       	callq  206e30 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h630d1891060b21e5E>
  2051fa:	48 89 94 24 c0 11 00 	mov    %rdx,0x11c0(%rsp)
  205201:	00 
  205202:	48 89 84 24 b8 11 00 	mov    %rax,0x11b8(%rsp)
  205209:	00 
  20520a:	48 8b 84 24 b8 11 00 	mov    0x11b8(%rsp),%rax
  205211:	00 
  205212:	48 89 84 24 28 02 00 	mov    %rax,0x228(%rsp)
  205219:	00 
  20521a:	48 8b 84 24 c0 11 00 	mov    0x11c0(%rsp),%rax
  205221:	00 
  205222:	48 89 84 24 30 02 00 	mov    %rax,0x230(%rsp)
  205229:	00 
  20522a:	48 8d 84 24 98 01 00 	lea    0x198(%rsp),%rax
  205231:	00 
  205232:	48 8d 8c 24 98 01 00 	lea    0x198(%rsp),%rcx
  205239:	00 
  20523a:	48 81 c1 90 00 00 00 	add    $0x90,%rcx
  205241:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  205246:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20524b:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  205250:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  205255:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20525a:	48 39 c8             	cmp    %rcx,%rax
  20525d:	74 27                	je     205286 <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable5empty17he645bac9df5f28f0E+0x4e6>
  20525f:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  205264:	48 8b 8c 24 28 02 00 	mov    0x228(%rsp),%rcx
  20526b:	00 
  20526c:	48 89 08             	mov    %rcx,(%rax)
  20526f:	48 8b 8c 24 30 02 00 	mov    0x230(%rsp),%rcx
  205276:	00 
  205277:	48 89 48 08          	mov    %rcx,0x8(%rax)
  20527b:	48 83 c0 10          	add    $0x10,%rax
  20527f:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  205284:	eb c5                	jmp    20524b <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable5empty17he645bac9df5f28f0E+0x4ab>
            security_exception: InterruptDescriptorEntry::empty(),
  205286:	e8 e5 1b 00 00       	callq  206e70 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hab90ef8d45026c4fE>
  20528b:	48 89 94 24 d0 11 00 	mov    %rdx,0x11d0(%rsp)
  205292:	00 
  205293:	48 89 84 24 c8 11 00 	mov    %rax,0x11c8(%rsp)
  20529a:	00 
  20529b:	48 8b 84 24 c8 11 00 	mov    0x11c8(%rsp),%rax
  2052a2:	00 
  2052a3:	48 89 84 24 38 02 00 	mov    %rax,0x238(%rsp)
  2052aa:	00 
  2052ab:	48 8b 84 24 d0 11 00 	mov    0x11d0(%rsp),%rax
  2052b2:	00 
  2052b3:	48 89 84 24 40 02 00 	mov    %rax,0x240(%rsp)
  2052ba:	00 
            reserved_3: InterruptDescriptorEntry::empty(),
  2052bb:	e8 70 1b 00 00       	callq  206e30 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h630d1891060b21e5E>
  2052c0:	48 89 94 24 e0 11 00 	mov    %rdx,0x11e0(%rsp)
  2052c7:	00 
  2052c8:	48 89 84 24 d8 11 00 	mov    %rax,0x11d8(%rsp)
  2052cf:	00 
  2052d0:	48 8b 84 24 d8 11 00 	mov    0x11d8(%rsp),%rax
  2052d7:	00 
  2052d8:	48 89 84 24 48 02 00 	mov    %rax,0x248(%rsp)
  2052df:	00 
  2052e0:	48 8b 84 24 e0 11 00 	mov    0x11e0(%rsp),%rax
  2052e7:	00 
  2052e8:	48 89 84 24 50 02 00 	mov    %rax,0x250(%rsp)
  2052ef:	00 
            interrupts: [InterruptDescriptorEntry::empty(); 256 - 32],
  2052f0:	e8 3b 1b 00 00       	callq  206e30 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h630d1891060b21e5E>
  2052f5:	48 89 94 24 f0 11 00 	mov    %rdx,0x11f0(%rsp)
  2052fc:	00 
  2052fd:	48 89 84 24 e8 11 00 	mov    %rax,0x11e8(%rsp)
  205304:	00 
  205305:	48 8b 84 24 e8 11 00 	mov    0x11e8(%rsp),%rax
  20530c:	00 
  20530d:	48 89 84 24 58 10 00 	mov    %rax,0x1058(%rsp)
  205314:	00 
  205315:	48 8b 84 24 f0 11 00 	mov    0x11f0(%rsp),%rax
  20531c:	00 
  20531d:	48 89 84 24 60 10 00 	mov    %rax,0x1060(%rsp)
  205324:	00 
  205325:	48 8d 84 24 58 02 00 	lea    0x258(%rsp),%rax
  20532c:	00 
  20532d:	48 8d 8c 24 58 02 00 	lea    0x258(%rsp),%rcx
  205334:	00 
  205335:	48 81 c1 00 0e 00 00 	add    $0xe00,%rcx
  20533c:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  205341:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  205346:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20534b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  205350:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  205355:	48 39 c8             	cmp    %rcx,%rax
  205358:	74 27                	je     205381 <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable5empty17he645bac9df5f28f0E+0x5e1>
  20535a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20535f:	48 8b 8c 24 58 10 00 	mov    0x1058(%rsp),%rcx
  205366:	00 
  205367:	48 89 08             	mov    %rcx,(%rax)
  20536a:	48 8b 8c 24 60 10 00 	mov    0x1060(%rsp),%rcx
  205371:	00 
  205372:	48 89 48 08          	mov    %rcx,0x8(%rax)
  205376:	48 83 c0 10          	add    $0x10,%rax
  20537a:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20537f:	eb c5                	jmp    205346 <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable5empty17he645bac9df5f28f0E+0x5a6>
  205381:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
        InterruptDescriptorTable {
  205386:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  20538b:	48 89 07             	mov    %rax,(%rdi)
  20538e:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  205393:	48 89 47 08          	mov    %rax,0x8(%rdi)
  205397:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  20539c:	48 89 47 10          	mov    %rax,0x10(%rdi)
  2053a0:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  2053a5:	48 89 47 18          	mov    %rax,0x18(%rdi)
  2053a9:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  2053ae:	48 89 47 20          	mov    %rax,0x20(%rdi)
  2053b2:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  2053b7:	48 89 47 28          	mov    %rax,0x28(%rdi)
  2053bb:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  2053c0:	48 89 47 30          	mov    %rax,0x30(%rdi)
  2053c4:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  2053cb:	00 
  2053cc:	48 89 47 38          	mov    %rax,0x38(%rdi)
  2053d0:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  2053d7:	00 
  2053d8:	48 89 47 40          	mov    %rax,0x40(%rdi)
  2053dc:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  2053e3:	00 
  2053e4:	48 89 47 48          	mov    %rax,0x48(%rdi)
  2053e8:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  2053ef:	00 
  2053f0:	48 89 47 50          	mov    %rax,0x50(%rdi)
  2053f4:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  2053fb:	00 
  2053fc:	48 89 47 58          	mov    %rax,0x58(%rdi)
  205400:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  205407:	00 
  205408:	48 89 47 60          	mov    %rax,0x60(%rdi)
  20540c:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  205413:	00 
  205414:	48 89 47 68          	mov    %rax,0x68(%rdi)
  205418:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  20541f:	00 
  205420:	48 89 47 70          	mov    %rax,0x70(%rdi)
  205424:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  20542b:	00 
  20542c:	48 89 47 78          	mov    %rax,0x78(%rdi)
  205430:	48 8b 84 24 c8 00 00 	mov    0xc8(%rsp),%rax
  205437:	00 
  205438:	48 89 87 80 00 00 00 	mov    %rax,0x80(%rdi)
  20543f:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  205446:	00 
  205447:	48 89 87 88 00 00 00 	mov    %rax,0x88(%rdi)
  20544e:	48 8b 84 24 d8 00 00 	mov    0xd8(%rsp),%rax
  205455:	00 
  205456:	48 89 87 90 00 00 00 	mov    %rax,0x90(%rdi)
  20545d:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  205464:	00 
  205465:	48 89 87 98 00 00 00 	mov    %rax,0x98(%rdi)
  20546c:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  205473:	00 
  205474:	48 89 87 a0 00 00 00 	mov    %rax,0xa0(%rdi)
  20547b:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  205482:	00 
  205483:	48 89 87 a8 00 00 00 	mov    %rax,0xa8(%rdi)
  20548a:	48 8b 84 24 f8 00 00 	mov    0xf8(%rsp),%rax
  205491:	00 
  205492:	48 89 87 b0 00 00 00 	mov    %rax,0xb0(%rdi)
  205499:	48 8b 84 24 00 01 00 	mov    0x100(%rsp),%rax
  2054a0:	00 
  2054a1:	48 89 87 b8 00 00 00 	mov    %rax,0xb8(%rdi)
  2054a8:	48 8b 84 24 08 01 00 	mov    0x108(%rsp),%rax
  2054af:	00 
  2054b0:	48 89 87 c0 00 00 00 	mov    %rax,0xc0(%rdi)
  2054b7:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
  2054be:	00 
  2054bf:	48 89 87 c8 00 00 00 	mov    %rax,0xc8(%rdi)
  2054c6:	48 8b 84 24 18 01 00 	mov    0x118(%rsp),%rax
  2054cd:	00 
  2054ce:	48 89 87 d0 00 00 00 	mov    %rax,0xd0(%rdi)
  2054d5:	48 8b 84 24 20 01 00 	mov    0x120(%rsp),%rax
  2054dc:	00 
  2054dd:	48 89 87 d8 00 00 00 	mov    %rax,0xd8(%rdi)
  2054e4:	48 8b 84 24 28 01 00 	mov    0x128(%rsp),%rax
  2054eb:	00 
  2054ec:	48 89 87 e0 00 00 00 	mov    %rax,0xe0(%rdi)
  2054f3:	48 8b 84 24 30 01 00 	mov    0x130(%rsp),%rax
  2054fa:	00 
  2054fb:	48 89 87 e8 00 00 00 	mov    %rax,0xe8(%rdi)
  205502:	48 8b 84 24 38 01 00 	mov    0x138(%rsp),%rax
  205509:	00 
  20550a:	48 89 87 f0 00 00 00 	mov    %rax,0xf0(%rdi)
  205511:	48 8b 84 24 40 01 00 	mov    0x140(%rsp),%rax
  205518:	00 
  205519:	48 89 87 f8 00 00 00 	mov    %rax,0xf8(%rdi)
  205520:	48 8b 84 24 48 01 00 	mov    0x148(%rsp),%rax
  205527:	00 
  205528:	48 89 87 00 01 00 00 	mov    %rax,0x100(%rdi)
  20552f:	48 8b 84 24 50 01 00 	mov    0x150(%rsp),%rax
  205536:	00 
  205537:	48 89 87 08 01 00 00 	mov    %rax,0x108(%rdi)
  20553e:	48 8b 84 24 58 01 00 	mov    0x158(%rsp),%rax
  205545:	00 
  205546:	48 89 87 10 01 00 00 	mov    %rax,0x110(%rdi)
  20554d:	48 8b 84 24 60 01 00 	mov    0x160(%rsp),%rax
  205554:	00 
  205555:	48 89 87 18 01 00 00 	mov    %rax,0x118(%rdi)
  20555c:	48 8b 84 24 68 01 00 	mov    0x168(%rsp),%rax
  205563:	00 
  205564:	48 89 87 20 01 00 00 	mov    %rax,0x120(%rdi)
  20556b:	48 8b 84 24 70 01 00 	mov    0x170(%rsp),%rax
  205572:	00 
  205573:	48 89 87 28 01 00 00 	mov    %rax,0x128(%rdi)
  20557a:	48 8b 84 24 78 01 00 	mov    0x178(%rsp),%rax
  205581:	00 
  205582:	48 89 87 30 01 00 00 	mov    %rax,0x130(%rdi)
  205589:	48 8b 84 24 80 01 00 	mov    0x180(%rsp),%rax
  205590:	00 
  205591:	48 89 87 38 01 00 00 	mov    %rax,0x138(%rdi)
  205598:	48 8b 84 24 88 01 00 	mov    0x188(%rsp),%rax
  20559f:	00 
  2055a0:	48 89 87 40 01 00 00 	mov    %rax,0x140(%rdi)
  2055a7:	48 8b 84 24 90 01 00 	mov    0x190(%rsp),%rax
  2055ae:	00 
  2055af:	48 89 87 48 01 00 00 	mov    %rax,0x148(%rdi)
  2055b6:	48 81 c7 50 01 00 00 	add    $0x150,%rdi
  2055bd:	48 8d b4 24 98 01 00 	lea    0x198(%rsp),%rsi
  2055c4:	00 
  2055c5:	ba 90 00 00 00       	mov    $0x90,%edx
  2055ca:	e8 f1 c2 00 00       	callq  2118c0 <memcpy>
  2055cf:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  2055d4:	48 8b 84 24 38 02 00 	mov    0x238(%rsp),%rax
  2055db:	00 
  2055dc:	48 89 87 e0 01 00 00 	mov    %rax,0x1e0(%rdi)
  2055e3:	48 8b 84 24 40 02 00 	mov    0x240(%rsp),%rax
  2055ea:	00 
  2055eb:	48 89 87 e8 01 00 00 	mov    %rax,0x1e8(%rdi)
  2055f2:	48 8b 84 24 48 02 00 	mov    0x248(%rsp),%rax
  2055f9:	00 
  2055fa:	48 89 87 f0 01 00 00 	mov    %rax,0x1f0(%rdi)
  205601:	48 8b 84 24 50 02 00 	mov    0x250(%rsp),%rax
  205608:	00 
  205609:	48 89 87 f8 01 00 00 	mov    %rax,0x1f8(%rdi)
  205610:	48 81 c7 00 02 00 00 	add    $0x200,%rdi
  205617:	48 8d b4 24 58 02 00 	lea    0x258(%rsp),%rsi
  20561e:	00 
  20561f:	ba 00 0e 00 00       	mov    $0xe00,%edx
  205624:	e8 97 c2 00 00       	callq  2118c0 <memcpy>
  205629:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
        }
    }
  20562e:	48 81 c4 f8 11 00 00 	add    $0x11f8,%rsp
  205635:	c3                   	retq   
  205636:	cc                   	int3   
  205637:	cc                   	int3   
  205638:	cc                   	int3   
  205639:	cc                   	int3   
  20563a:	cc                   	int3   
  20563b:	cc                   	int3   
  20563c:	cc                   	int3   
  20563d:	cc                   	int3   
  20563e:	cc                   	int3   
  20563f:	cc                   	int3   

0000000000205640 <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable10as_pointer17h8b1ca2f2d1dcab77E>:

    pub fn as_pointer(&self) -> IDTPointer {
  205640:	48 83 ec 28          	sub    $0x28,%rsp
  205644:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  205649:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
        IDTPointer {
            base_addr: (self as *const _) as u64,
            size_limit: (mem::size_of::<Self>() - 1) as u16,
  20564e:	b8 00 10 00 00       	mov    $0x1000,%eax
  205653:	48 83 e8 01          	sub    $0x1,%rax
  205657:	48 89 04 24          	mov    %rax,(%rsp)
  20565b:	0f 92 c0             	setb   %al
  20565e:	a8 01                	test   $0x1,%al
  205660:	75 24                	jne    205686 <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable10as_pointer17h8b1ca2f2d1dcab77E+0x46>
  205662:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  205667:	48 8b 0c 24          	mov    (%rsp),%rcx
        IDTPointer {
  20566b:	66 89 4c 24 10       	mov    %cx,0x10(%rsp)
  205670:	48 89 44 24 12       	mov    %rax,0x12(%rsp)
        }
    }
  205675:	0f b7 44 24 18       	movzwl 0x18(%rsp),%eax
  20567a:	89 c2                	mov    %eax,%edx
  20567c:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  205681:	48 83 c4 28          	add    $0x28,%rsp
  205685:	c3                   	retq   
            size_limit: (mem::size_of::<Self>() - 1) as u16,
  205686:	48 8d 3d 03 af ff ff 	lea    -0x50fd(%rip),%rdi        # 200590 <str.0>
  20568d:	48 8d 15 b4 d5 00 00 	lea    0xd5b4(%rip),%rdx        # 212c48 <memset+0x1368>
  205694:	be 21 00 00 00       	mov    $0x21,%esi
  205699:	e8 f2 97 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20569e:	0f 0b                	ud2    

00000000002056a0 <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable13load_into_cpu17hfad6d3a77281dca1E>:

    pub fn load_into_cpu(&self) {
  2056a0:	48 83 ec 28          	sub    $0x28,%rsp
  2056a4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        let pointer = self.as_pointer();
  2056a9:	e8 92 ff ff ff       	callq  205640 <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable10as_pointer17h8b1ca2f2d1dcab77E>
  2056ae:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2056b3:	66 89 d0             	mov    %dx,%ax
  2056b6:	66 89 44 24 20       	mov    %ax,0x20(%rsp)
  2056bb:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2056c0:	48 89 04 24          	mov    %rax,(%rsp)
  2056c4:	66 8b 44 24 20       	mov    0x20(%rsp),%ax
  2056c9:	66 89 44 24 08       	mov    %ax,0x8(%rsp)
  2056ce:	48 89 e0             	mov    %rsp,%rax
        unsafe {
            asm!(
  2056d1:	0f 01 18             	lidt   (%rax)
                "lidt [{}]", in(reg) &pointer,
                options(nomem, nostack, preserves_flags)
            );
        }
    }
  2056d4:	48 83 c4 28          	add    $0x28,%rsp
  2056d8:	c3                   	retq   
  2056d9:	cc                   	int3   
  2056da:	cc                   	int3   
  2056db:	cc                   	int3   
  2056dc:	cc                   	int3   
  2056dd:	cc                   	int3   
  2056de:	cc                   	int3   
  2056df:	cc                   	int3   

00000000002056e0 <_ZN9r3_kernel3cpu10interrupts22prepare_default_handle17hd8eb7bb14fe770d5E>:
}

pub fn prepare_default_handle(
  2056e0:	48 83 ec 38          	sub    $0x38,%rsp
  2056e4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
    func: DefaultHandlerFunction,
) -> InterruptDescriptorEntry<DefaultHandlerFunction> {
    let handle_addr = func as u64;
  2056e9:	48 89 f8             	mov    %rdi,%rax
  2056ec:	48 89 04 24          	mov    %rax,(%rsp)
  2056f0:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
    let mut idt_entry = InterruptDescriptorEntry::empty();
  2056f5:	e8 36 17 00 00       	callq  206e30 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h630d1891060b21e5E>
  2056fa:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  2056ff:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  205704:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  205709:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20570e:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  205713:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  205718:	48 8b 34 24          	mov    (%rsp),%rsi
    idt_entry.set_handler(handle_addr);
  20571c:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  205721:	e8 0a 19 00 00       	callq  207030 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$11set_handler17h87df60b3140f4d6eE>
    return idt_entry;
}
  205726:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20572b:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  205730:	48 83 c4 38          	add    $0x38,%rsp
  205734:	c3                   	retq   
  205735:	cc                   	int3   
  205736:	cc                   	int3   
  205737:	cc                   	int3   
  205738:	cc                   	int3   
  205739:	cc                   	int3   
  20573a:	cc                   	int3   
  20573b:	cc                   	int3   
  20573c:	cc                   	int3   
  20573d:	cc                   	int3   
  20573e:	cc                   	int3   
  20573f:	cc                   	int3   

0000000000205740 <_ZN9r3_kernel3cpu10interrupts32prepare_no_ret_error_code_handle17h3b008e4f60cf1d75E>:

pub fn prepare_no_ret_error_code_handle(
  205740:	48 83 ec 38          	sub    $0x38,%rsp
  205744:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
    func: HandlerFuncNoReturnWithErr,
) -> InterruptDescriptorEntry<HandlerFuncNoReturnWithErr> {
    let handle_addr = func as u64;
  205749:	48 89 f8             	mov    %rdi,%rax
  20574c:	48 89 04 24          	mov    %rax,(%rsp)
  205750:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
    let mut idt_entry = InterruptDescriptorEntry::empty();
  205755:	e8 56 17 00 00       	callq  206eb0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hf14332c24ab91231E>
  20575a:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  20575f:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  205764:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  205769:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20576e:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  205773:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  205778:	48 8b 34 24          	mov    (%rsp),%rsi
    idt_entry.set_handler(handle_addr);
  20577c:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  205781:	e8 fa 18 00 00       	callq  207080 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$11set_handler17hf33eac12f7d04705E>
    return idt_entry;
}
  205786:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20578b:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  205790:	48 83 c4 38          	add    $0x38,%rsp
  205794:	c3                   	retq   
  205795:	cc                   	int3   
  205796:	cc                   	int3   
  205797:	cc                   	int3   
  205798:	cc                   	int3   
  205799:	cc                   	int3   
  20579a:	cc                   	int3   
  20579b:	cc                   	int3   
  20579c:	cc                   	int3   
  20579d:	cc                   	int3   
  20579e:	cc                   	int3   
  20579f:	cc                   	int3   

00000000002057a0 <_ZN9r3_kernel10boot_proto18BootProtoContainer5empty17h2895c2c060c9370bE>:
}

// unsafe impl<'a> Sync for BootProtoContainer<'a> {}

impl BootProtoContainer {
    pub fn empty() -> Self {
  2057a0:	48 83 ec 20          	sub    $0x20,%rsp
        BootProtoContainer { boot_info: None }
  2057a4:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  2057ab:	00 00 
  2057ad:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  2057b2:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2057b7:	48 89 0c 24          	mov    %rcx,(%rsp)
  2057bb:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    }
  2057c0:	48 8b 04 24          	mov    (%rsp),%rax
  2057c4:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2057c9:	48 83 c4 20          	add    $0x20,%rsp
  2057cd:	c3                   	retq   
  2057ce:	cc                   	int3   
  2057cf:	cc                   	int3   

00000000002057d0 <_ZN9r3_kernel10boot_proto18BootProtoContainer4save17hf260aeb0ec104c1bE>:

    pub fn save(&mut self, b_proto: u64) {
  2057d0:	48 83 ec 20          	sub    $0x20,%rsp
  2057d4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2057d9:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        self.boot_info = Some(b_proto);
  2057de:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  2057e3:	48 c7 04 24 01 00 00 	movq   $0x1,(%rsp)
  2057ea:	00 
  2057eb:	48 8b 0c 24          	mov    (%rsp),%rcx
  2057ef:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2057f4:	48 89 0f             	mov    %rcx,(%rdi)
  2057f7:	48 89 47 08          	mov    %rax,0x8(%rdi)
    }
  2057fb:	48 83 c4 20          	add    $0x20,%rsp
  2057ff:	c3                   	retq   

0000000000205800 <_ZN9r3_kernel10boot_proto12BootProtocol14get_boot_proto17he60c72ec1503c0f9E>:
// this implementation than the whole codebase.
pub struct BootProtocol {}

impl BootProtocol {
    #[inline]
    fn get_boot_proto() -> Option<&'static BootInfo> {
  205800:	48 83 ec 48          	sub    $0x48,%rsp
        if let Some(boot_info_addr) = BOOT_INFO.lock().boot_info {
  205804:	48 8d 3d 92 ae ff ff 	lea    -0x516e(%rip),%rdi        # 20069d <_ZN9r3_kernel10boot_proto9BOOT_INFO17h01ac4d2a4df9d266E>
  20580b:	e8 c0 0e 00 00       	callq  2066d0 <_ZN76_$LT$r3_kernel..boot_proto..BOOT_INFO$u20$as$u20$core..ops..deref..Deref$GT$5deref17he8254bf6449c3446E>
  205810:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  205815:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  20581a:	e8 e1 12 00 00       	callq  206b00 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h4ccc519c0d0de437E>
  20581f:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  205824:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  205829:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  20582e:	e8 7d 13 00 00       	callq  206bb0 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7e8efa7287244e89E>
  205833:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  205838:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20583d:	48 83 38 01          	cmpq   $0x1,(%rax)
  205841:	75 1a                	jne    20585d <_ZN9r3_kernel10boot_proto12BootProtocol14get_boot_proto17he60c72ec1503c0f9E+0x5d>
  205843:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  205848:	48 8b 78 08          	mov    0x8(%rax),%rdi
  20584c:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
            return Some(unsafe { (boot_info_addr as *const BootInfo).as_ref().unwrap() });
  205851:	e8 ba 25 00 00       	callq  207e10 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17h356ef27f5c1e3d27E>
  205856:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20585b:	eb 1d                	jmp    20587a <_ZN9r3_kernel10boot_proto12BootProtocol14get_boot_proto17he60c72ec1503c0f9E+0x7a>
        }
  20585d:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  205862:	e8 69 65 00 00       	callq  20bdd0 <_ZN4core3ptr93drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..boot_proto..BootProtoContainer$GT$$GT$17h754c2fd5620c579cE>

        None
  205867:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  20586e:	00 00 
    }
  205870:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  205875:	48 83 c4 48          	add    $0x48,%rsp
  205879:	c3                   	retq   
  20587a:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            return Some(unsafe { (boot_info_addr as *const BootInfo).as_ref().unwrap() });
  20587f:	48 8d 35 da d3 00 00 	lea    0xd3da(%rip),%rsi        # 212c60 <memset+0x1380>
  205886:	e8 35 f2 ff ff       	callq  204ac0 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc6b8546214314199E>
  20588b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  205890:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  205895:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
        }
  20589a:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  20589f:	e8 2c 65 00 00       	callq  20bdd0 <_ZN4core3ptr93drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..boot_proto..BootProtoContainer$GT$$GT$17h754c2fd5620c579cE>
  2058a4:	eb ca                	jmp    205870 <_ZN9r3_kernel10boot_proto12BootProtocol14get_boot_proto17he60c72ec1503c0f9E+0x70>
  2058a6:	cc                   	int3   
  2058a7:	cc                   	int3   
  2058a8:	cc                   	int3   
  2058a9:	cc                   	int3   
  2058aa:	cc                   	int3   
  2058ab:	cc                   	int3   
  2058ac:	cc                   	int3   
  2058ad:	cc                   	int3   
  2058ae:	cc                   	int3   
  2058af:	cc                   	int3   

00000000002058b0 <_ZN9r3_kernel10boot_proto12BootProtocol6create17hda06133fa30eec4aE>:

    pub fn create(info: &'static BootInfo) {
  2058b0:	48 83 ec 38          	sub    $0x38,%rsp
  2058b4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2058b9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        // translate boot info to boot_proto:
        let boot_struct_addr = (info as *const BootInfo) as u64;
  2058be:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
        BOOT_INFO.lock().save(boot_struct_addr);
  2058c3:	48 8d 3d d3 ad ff ff 	lea    -0x522d(%rip),%rdi        # 20069d <_ZN9r3_kernel10boot_proto9BOOT_INFO17h01ac4d2a4df9d266E>
  2058ca:	e8 01 0e 00 00       	callq  2066d0 <_ZN76_$LT$r3_kernel..boot_proto..BOOT_INFO$u20$as$u20$core..ops..deref..Deref$GT$5deref17he8254bf6449c3446E>
  2058cf:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2058d4:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  2058d9:	e8 22 12 00 00       	callq  206b00 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h4ccc519c0d0de437E>
  2058de:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  2058e3:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2058e8:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  2058ed:	e8 ce 12 00 00       	callq  206bc0 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h20776941560deab6E>
  2058f2:	48 89 04 24          	mov    %rax,(%rsp)
  2058f6:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  2058fb:	48 8b 3c 24          	mov    (%rsp),%rdi
  2058ff:	e8 cc fe ff ff       	callq  2057d0 <_ZN9r3_kernel10boot_proto18BootProtoContainer4save17hf260aeb0ec104c1bE>
  205904:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  205909:	e8 c2 64 00 00       	callq  20bdd0 <_ZN4core3ptr93drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..boot_proto..BootProtoContainer$GT$$GT$17h754c2fd5620c579cE>
    }
  20590e:	48 83 c4 38          	add    $0x38,%rsp
  205912:	c3                   	retq   
  205913:	cc                   	int3   
  205914:	cc                   	int3   
  205915:	cc                   	int3   
  205916:	cc                   	int3   
  205917:	cc                   	int3   
  205918:	cc                   	int3   
  205919:	cc                   	int3   
  20591a:	cc                   	int3   
  20591b:	cc                   	int3   
  20591c:	cc                   	int3   
  20591d:	cc                   	int3   
  20591e:	cc                   	int3   
  20591f:	cc                   	int3   

0000000000205920 <_ZN9r3_kernel10boot_proto12BootProtocol18get_memory_regions17hc43e767c006d814bE>:

    pub fn get_memory_regions() -> Option<&'static MemoryRegions> {
  205920:	48 83 ec 18          	sub    $0x18,%rsp
        if let Some(bi) = BootProtocol::get_boot_proto() {
  205924:	e8 d7 fe ff ff       	callq  205800 <_ZN9r3_kernel10boot_proto12BootProtocol14get_boot_proto17he60c72ec1503c0f9E>
  205929:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20592e:	b8 01 00 00 00       	mov    $0x1,%eax
  205933:	31 c9                	xor    %ecx,%ecx
  205935:	48 83 7c 24 08 00    	cmpq   $0x0,0x8(%rsp)
  20593b:	48 0f 44 c1          	cmove  %rcx,%rax
  20593f:	48 83 f8 01          	cmp    $0x1,%rax
  205943:	75 14                	jne    205959 <_ZN9r3_kernel10boot_proto12BootProtocol18get_memory_regions17hc43e767c006d814bE+0x39>
  205945:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20594a:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
            return Some(&bi.memory_regions);
  20594f:	48 83 c0 08          	add    $0x8,%rax
  205953:	48 89 04 24          	mov    %rax,(%rsp)
        }

        None
    }
  205957:	eb 08                	jmp    205961 <_ZN9r3_kernel10boot_proto12BootProtocol18get_memory_regions17hc43e767c006d814bE+0x41>
        None
  205959:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
  205960:	00 
    }
  205961:	48 8b 04 24          	mov    (%rsp),%rax
  205965:	48 83 c4 18          	add    $0x18,%rsp
  205969:	c3                   	retq   
  20596a:	cc                   	int3   
  20596b:	cc                   	int3   
  20596c:	cc                   	int3   
  20596d:	cc                   	int3   
  20596e:	cc                   	int3   
  20596f:	cc                   	int3   

0000000000205970 <_ZN9r3_kernel10boot_proto12BootProtocol20get_framebuffer_info17h359cc5b08ce307ecE>:

    pub fn get_framebuffer_info() -> Option<FrameBufferInfo> {
  205970:	48 83 ec 68          	sub    $0x68,%rsp
  205974:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  205979:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        if let Some(bi) = BootProtocol::get_boot_proto() {
  20597e:	e8 7d fe ff ff       	callq  205800 <_ZN9r3_kernel10boot_proto12BootProtocol14get_boot_proto17he60c72ec1503c0f9E>
  205983:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  205988:	b8 01 00 00 00       	mov    $0x1,%eax
  20598d:	31 c9                	xor    %ecx,%ecx
  20598f:	48 83 7c 24 18 00    	cmpq   $0x0,0x18(%rsp)
  205995:	48 0f 44 c1          	cmove  %rcx,%rax
  205999:	48 83 f8 01          	cmp    $0x1,%rax
  20599d:	75 1a                	jne    2059b9 <_ZN9r3_kernel10boot_proto12BootProtocol20get_framebuffer_info17h359cc5b08ce307ecE+0x49>
  20599f:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  2059a4:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
            if let Some(fb_struct) = bi.framebuffer.as_ref() {
  2059a9:	48 83 c7 18          	add    $0x18,%rdi
  2059ad:	e8 0e 24 00 00       	callq  207dc0 <_ZN10bootloader9boot_info17Optional$LT$T$GT$6as_ref17h5bc539a7aa59d212E>
  2059b2:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2059b7:	eb 16                	jmp    2059cf <_ZN9r3_kernel10boot_proto12BootProtocol20get_framebuffer_info17h359cc5b08ce307ecE+0x5f>
  2059b9:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            }

            return None;
        }

        None
  2059be:	c7 40 18 03 00 00 00 	movl   $0x3,0x18(%rax)
  2059c5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    }
  2059ca:	48 83 c4 68          	add    $0x68,%rsp
  2059ce:	c3                   	retq   
            if let Some(fb_struct) = bi.framebuffer.as_ref() {
  2059cf:	b8 01 00 00 00       	mov    $0x1,%eax
  2059d4:	31 c9                	xor    %ecx,%ecx
  2059d6:	48 83 7c 24 20 00    	cmpq   $0x0,0x20(%rsp)
  2059dc:	48 0f 44 c1          	cmove  %rcx,%rax
  2059e0:	48 83 f8 01          	cmp    $0x1,%rax
  2059e4:	75 16                	jne    2059fc <_ZN9r3_kernel10boot_proto12BootProtocol20get_framebuffer_info17h359cc5b08ce307ecE+0x8c>
  2059e6:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  2059eb:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
                return Some(fb_struct.info());
  2059f0:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  2059f5:	e8 c6 82 00 00       	callq  20dcc0 <_ZN10bootloader9boot_info11FrameBuffer4info17h83684cd9a74a1065E>
  2059fa:	eb 0e                	jmp    205a0a <_ZN9r3_kernel10boot_proto12BootProtocol20get_framebuffer_info17h359cc5b08ce307ecE+0x9a>
  2059fc:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            return None;
  205a01:	c7 40 18 03 00 00 00 	movl   $0x3,0x18(%rax)
  205a08:	eb bb                	jmp    2059c5 <_ZN9r3_kernel10boot_proto12BootProtocol20get_framebuffer_info17h359cc5b08ce307ecE+0x55>
  205a0a:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
                return Some(fb_struct.info());
  205a0f:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  205a14:	ba 30 00 00 00       	mov    $0x30,%edx
  205a19:	e8 a2 be 00 00       	callq  2118c0 <memcpy>
#![no_std] // don't link the Rust standard library
  205a1e:	eb a5                	jmp    2059c5 <_ZN9r3_kernel10boot_proto12BootProtocol20get_framebuffer_info17h359cc5b08ce307ecE+0x55>

0000000000205a20 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E>:

    pub fn print_boot_info() {
  205a20:	48 81 ec e8 05 00 00 	sub    $0x5e8,%rsp
        if let Some(bi) = BootProtocol::get_boot_proto() {
  205a27:	e8 d4 fd ff ff       	callq  205800 <_ZN9r3_kernel10boot_proto12BootProtocol14get_boot_proto17he60c72ec1503c0f9E>
  205a2c:	48 89 84 24 58 01 00 	mov    %rax,0x158(%rsp)
  205a33:	00 
  205a34:	b8 01 00 00 00       	mov    $0x1,%eax
  205a39:	31 c9                	xor    %ecx,%ecx
  205a3b:	48 83 bc 24 58 01 00 	cmpq   $0x0,0x158(%rsp)
  205a42:	00 00 
  205a44:	48 0f 44 c1          	cmove  %rcx,%rax
  205a48:	48 83 f8 01          	cmp    $0x1,%rax
  205a4c:	75 41                	jne    205a8f <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x6f>
  205a4e:	48 8b 84 24 58 01 00 	mov    0x158(%rsp),%rax
  205a55:	00 
  205a56:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
  205a5d:	00 
  205a5e:	48 89 84 24 00 05 00 	mov    %rax,0x500(%rsp)
  205a65:	00 
            // display version:
            log::info!(
  205a66:	48 c7 84 24 60 01 00 	movq   $0x3,0x160(%rsp)
  205a6d:	00 03 00 00 00 
  205a72:	48 8d bc 24 60 01 00 	lea    0x160(%rsp),%rdi
  205a79:	00 
  205a7a:	48 8d 35 b7 a8 ff ff 	lea    -0x5749(%rip),%rsi        # 200338 <str.0+0x38>
  205a81:	e8 ba f1 ff ff       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  205a86:	88 84 24 57 01 00 00 	mov    %al,0x157(%rsp)
  205a8d:	eb 08                	jmp    205a97 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x77>
                );
            } else {
                log::warn!("Boot info doesn't contain framebuffer information.");
            }
        }
    }
  205a8f:	48 81 c4 e8 05 00 00 	add    $0x5e8,%rsp
  205a96:	c3                   	retq   
  205a97:	8a 84 24 57 01 00 00 	mov    0x157(%rsp),%al
            log::info!(
  205a9e:	a8 01                	test   $0x1,%al
  205aa0:	75 0c                	jne    205aae <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x8e>
  205aa2:	eb 00                	jmp    205aa4 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x84>
  205aa4:	c6 84 24 6f 01 00 00 	movb   $0x0,0x16f(%rsp)
  205aab:	00 
  205aac:	eb 60                	jmp    205b0e <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0xee>
    unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
  205aae:	c6 84 24 df 05 00 00 	movb   $0x0,0x5df(%rsp)
  205ab5:	00 
  205ab6:	48 8b 3d 2b e0 00 00 	mov    0xe02b(%rip),%rdi        # 213ae8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  205abd:	0f b6 b4 24 df 05 00 	movzbl 0x5df(%rsp),%esi
  205ac4:	00 
  205ac5:	e8 06 4e 00 00       	callq  20a8d0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  205aca:	48 89 84 24 e0 05 00 	mov    %rax,0x5e0(%rsp)
  205ad1:	00 
  205ad2:	48 8b 84 24 e0 05 00 	mov    0x5e0(%rsp),%rax
  205ad9:	00 
  205ada:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  205ae1:	00 
  205ae2:	48 8d bc 24 60 01 00 	lea    0x160(%rsp),%rdi
  205ae9:	00 
  205aea:	48 8d b4 24 70 01 00 	lea    0x170(%rsp),%rsi
  205af1:	00 
  205af2:	e8 49 f1 ff ff       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  205af7:	88 84 24 47 01 00 00 	mov    %al,0x147(%rsp)
  205afe:	8a 84 24 47 01 00 00 	mov    0x147(%rsp),%al
  205b05:	24 01                	and    $0x1,%al
  205b07:	88 84 24 6f 01 00 00 	mov    %al,0x16f(%rsp)
  205b0e:	f6 84 24 6f 01 00 00 	testb  $0x1,0x16f(%rsp)
  205b15:	01 
  205b16:	75 2c                	jne    205b44 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x124>
            log::info!("RSDT Address: {:?}", bi.rsdp_addr);
  205b18:	48 c7 84 24 f0 01 00 	movq   $0x3,0x1f0(%rsp)
  205b1f:	00 03 00 00 00 
  205b24:	48 8d bc 24 f0 01 00 	lea    0x1f0(%rsp),%rdi
  205b2b:	00 
  205b2c:	48 8d 35 05 a8 ff ff 	lea    -0x57fb(%rip),%rsi        # 200338 <str.0+0x38>
  205b33:	e8 08 f1 ff ff       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  205b38:	88 84 24 46 01 00 00 	mov    %al,0x146(%rsp)
  205b3f:	e9 78 01 00 00       	jmpq   205cbc <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x29c>
  205b44:	48 8b 84 24 48 01 00 	mov    0x148(%rsp),%rax
  205b4b:	00 
                bi.version_major,
  205b4c:	48 89 c2             	mov    %rax,%rdx
                bi.version_minor,
  205b4f:	48 89 c1             	mov    %rax,%rcx
  205b52:	48 83 c1 02          	add    $0x2,%rcx
                bi.version_patch
  205b56:	48 83 c0 04          	add    $0x4,%rax
            log::info!(
  205b5a:	48 89 94 24 d8 01 00 	mov    %rdx,0x1d8(%rsp)
  205b61:	00 
  205b62:	48 89 8c 24 e0 01 00 	mov    %rcx,0x1e0(%rsp)
  205b69:	00 
  205b6a:	48 89 84 24 e8 01 00 	mov    %rax,0x1e8(%rsp)
  205b71:	00 
  205b72:	48 8b bc 24 d8 01 00 	mov    0x1d8(%rsp),%rdi
  205b79:	00 
  205b7a:	48 89 bc 24 08 05 00 	mov    %rdi,0x508(%rsp)
  205b81:	00 
  205b82:	48 8b 84 24 e0 01 00 	mov    0x1e0(%rsp),%rax
  205b89:	00 
  205b8a:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
  205b91:	00 
  205b92:	48 89 84 24 10 05 00 	mov    %rax,0x510(%rsp)
  205b99:	00 
  205b9a:	48 8b 84 24 e8 01 00 	mov    0x1e8(%rsp),%rax
  205ba1:	00 
  205ba2:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
  205ba9:	00 
  205baa:	48 89 84 24 18 05 00 	mov    %rax,0x518(%rsp)
  205bb1:	00 
  205bb2:	48 8b 35 47 df 00 00 	mov    0xdf47(%rip),%rsi        # 213b00 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  205bb9:	e8 22 53 00 00       	callq  20aee0 <_ZN4core3fmt10ArgumentV13new17hf01d32011d96aef4E>
  205bbe:	48 89 84 24 30 01 00 	mov    %rax,0x130(%rsp)
  205bc5:	00 
  205bc6:	48 89 94 24 38 01 00 	mov    %rdx,0x138(%rsp)
  205bcd:	00 
  205bce:	48 8b bc 24 20 01 00 	mov    0x120(%rsp),%rdi
  205bd5:	00 
  205bd6:	48 8b 35 23 df 00 00 	mov    0xdf23(%rip),%rsi        # 213b00 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  205bdd:	e8 fe 52 00 00       	callq  20aee0 <_ZN4core3fmt10ArgumentV13new17hf01d32011d96aef4E>
  205be2:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  205be9:	00 
  205bea:	48 89 94 24 18 01 00 	mov    %rdx,0x118(%rsp)
  205bf1:	00 
  205bf2:	48 8b bc 24 28 01 00 	mov    0x128(%rsp),%rdi
  205bf9:	00 
  205bfa:	48 8b 35 ff de 00 00 	mov    0xdeff(%rip),%rsi        # 213b00 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x78>
  205c01:	e8 da 52 00 00       	callq  20aee0 <_ZN4core3fmt10ArgumentV13new17hf01d32011d96aef4E>
  205c06:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  205c0d:	00 
  205c0e:	48 89 94 24 08 01 00 	mov    %rdx,0x108(%rsp)
  205c15:	00 
  205c16:	48 8b 84 24 08 01 00 	mov    0x108(%rsp),%rax
  205c1d:	00 
  205c1e:	48 8b 8c 24 00 01 00 	mov    0x100(%rsp),%rcx
  205c25:	00 
  205c26:	48 8b 94 24 18 01 00 	mov    0x118(%rsp),%rdx
  205c2d:	00 
  205c2e:	48 8b b4 24 10 01 00 	mov    0x110(%rsp),%rsi
  205c35:	00 
  205c36:	48 8b bc 24 38 01 00 	mov    0x138(%rsp),%rdi
  205c3d:	00 
  205c3e:	4c 8b 84 24 30 01 00 	mov    0x130(%rsp),%r8
  205c45:	00 
  205c46:	4c 89 84 24 a8 01 00 	mov    %r8,0x1a8(%rsp)
  205c4d:	00 
  205c4e:	48 89 bc 24 b0 01 00 	mov    %rdi,0x1b0(%rsp)
  205c55:	00 
  205c56:	48 89 b4 24 b8 01 00 	mov    %rsi,0x1b8(%rsp)
  205c5d:	00 
  205c5e:	48 89 94 24 c0 01 00 	mov    %rdx,0x1c0(%rsp)
  205c65:	00 
  205c66:	48 89 8c 24 c8 01 00 	mov    %rcx,0x1c8(%rsp)
  205c6d:	00 
  205c6e:	48 89 84 24 d0 01 00 	mov    %rax,0x1d0(%rsp)
  205c75:	00 
  205c76:	48 8d 8c 24 a8 01 00 	lea    0x1a8(%rsp),%rcx
  205c7d:	00 
  205c7e:	48 8d bc 24 78 01 00 	lea    0x178(%rsp),%rdi
  205c85:	00 
  205c86:	48 8d 35 eb cf 00 00 	lea    0xcfeb(%rip),%rsi        # 212c78 <memset+0x1398>
  205c8d:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  205c93:	4c 89 c2             	mov    %r8,%rdx
  205c96:	e8 75 ea ff ff       	callq  204710 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  205c9b:	48 8b b4 24 60 01 00 	mov    0x160(%rsp),%rsi
  205ca2:	00 
  205ca3:	48 8d bc 24 78 01 00 	lea    0x178(%rsp),%rdi
  205caa:	00 
  205cab:	48 8d 15 f6 cf 00 00 	lea    0xcff6(%rip),%rdx        # 212ca8 <memset+0x13c8>
  205cb2:	e8 79 6a 00 00       	callq  20c730 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  205cb7:	e9 5c fe ff ff       	jmpq   205b18 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0xf8>
  205cbc:	8a 84 24 46 01 00 00 	mov    0x146(%rsp),%al
            log::info!("RSDT Address: {:?}", bi.rsdp_addr);
  205cc3:	a8 01                	test   $0x1,%al
  205cc5:	75 0c                	jne    205cd3 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x2b3>
  205cc7:	eb 00                	jmp    205cc9 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x2a9>
  205cc9:	c6 84 24 ff 01 00 00 	movb   $0x0,0x1ff(%rsp)
  205cd0:	00 
  205cd1:	eb 60                	jmp    205d33 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x313>
  205cd3:	c6 84 24 cf 05 00 00 	movb   $0x0,0x5cf(%rsp)
  205cda:	00 
  205cdb:	48 8b 3d 06 de 00 00 	mov    0xde06(%rip),%rdi        # 213ae8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  205ce2:	0f b6 b4 24 cf 05 00 	movzbl 0x5cf(%rsp),%esi
  205ce9:	00 
  205cea:	e8 e1 4b 00 00       	callq  20a8d0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  205cef:	48 89 84 24 d0 05 00 	mov    %rax,0x5d0(%rsp)
  205cf6:	00 
  205cf7:	48 8b 84 24 d0 05 00 	mov    0x5d0(%rsp),%rax
  205cfe:	00 
  205cff:	48 89 84 24 00 02 00 	mov    %rax,0x200(%rsp)
  205d06:	00 
  205d07:	48 8d bc 24 f0 01 00 	lea    0x1f0(%rsp),%rdi
  205d0e:	00 
  205d0f:	48 8d b4 24 00 02 00 	lea    0x200(%rsp),%rsi
  205d16:	00 
  205d17:	e8 24 ef ff ff       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  205d1c:	88 84 24 ff 00 00 00 	mov    %al,0xff(%rsp)
  205d23:	8a 84 24 ff 00 00 00 	mov    0xff(%rsp),%al
  205d2a:	24 01                	and    $0x1,%al
  205d2c:	88 84 24 ff 01 00 00 	mov    %al,0x1ff(%rsp)
  205d33:	f6 84 24 ff 01 00 00 	testb  $0x1,0x1ff(%rsp)
  205d3a:	01 
  205d3b:	75 2c                	jne    205d69 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x349>
            log::info!("Memory offset: 0x{:x}", bi.physical_memory_offset.into_option().unwrap());
  205d3d:	48 c7 84 24 50 02 00 	movq   $0x3,0x250(%rsp)
  205d44:	00 03 00 00 00 
  205d49:	48 8d bc 24 50 02 00 	lea    0x250(%rsp),%rdi
  205d50:	00 
  205d51:	48 8d 35 e0 a5 ff ff 	lea    -0x5a20(%rip),%rsi        # 200338 <str.0+0x38>
  205d58:	e8 e3 ee ff ff       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  205d5d:	88 84 24 fe 00 00 00 	mov    %al,0xfe(%rsp)
  205d64:	e9 a6 00 00 00       	jmpq   205e0f <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x3ef>
  205d69:	48 8b 84 24 48 01 00 	mov    0x148(%rsp),%rax
  205d70:	00 
            log::info!("RSDT Address: {:?}", bi.rsdp_addr);
  205d71:	48 83 c0 78          	add    $0x78,%rax
  205d75:	48 89 84 24 48 02 00 	mov    %rax,0x248(%rsp)
  205d7c:	00 
  205d7d:	48 8b bc 24 48 02 00 	mov    0x248(%rsp),%rdi
  205d84:	00 
  205d85:	48 89 bc 24 20 05 00 	mov    %rdi,0x520(%rsp)
  205d8c:	00 
  205d8d:	48 8b 35 74 dd 00 00 	mov    0xdd74(%rip),%rsi        # 213b08 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x80>
  205d94:	e8 87 4d 00 00       	callq  20ab20 <_ZN4core3fmt10ArgumentV13new17h1055d36b2201d16bE>
  205d99:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  205da0:	00 
  205da1:	48 89 94 24 f0 00 00 	mov    %rdx,0xf0(%rsp)
  205da8:	00 
  205da9:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  205db0:	00 
  205db1:	48 8b 8c 24 e8 00 00 	mov    0xe8(%rsp),%rcx
  205db8:	00 
  205db9:	48 89 8c 24 38 02 00 	mov    %rcx,0x238(%rsp)
  205dc0:	00 
  205dc1:	48 89 84 24 40 02 00 	mov    %rax,0x240(%rsp)
  205dc8:	00 
  205dc9:	48 8d 8c 24 38 02 00 	lea    0x238(%rsp),%rcx
  205dd0:	00 
  205dd1:	48 8d bc 24 08 02 00 	lea    0x208(%rsp),%rdi
  205dd8:	00 
  205dd9:	48 8d 35 00 cf 00 00 	lea    0xcf00(%rip),%rsi        # 212ce0 <memset+0x1400>
  205de0:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  205de6:	4c 89 c2             	mov    %r8,%rdx
  205de9:	e8 22 e9 ff ff       	callq  204710 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  205dee:	48 8b b4 24 f0 01 00 	mov    0x1f0(%rsp),%rsi
  205df5:	00 
  205df6:	48 8d bc 24 08 02 00 	lea    0x208(%rsp),%rdi
  205dfd:	00 
  205dfe:	48 8d 15 eb ce 00 00 	lea    0xceeb(%rip),%rdx        # 212cf0 <memset+0x1410>
  205e05:	e8 26 69 00 00       	callq  20c730 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  205e0a:	e9 2e ff ff ff       	jmpq   205d3d <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x31d>
  205e0f:	8a 84 24 fe 00 00 00 	mov    0xfe(%rsp),%al
            log::info!("Memory offset: 0x{:x}", bi.physical_memory_offset.into_option().unwrap());
  205e16:	a8 01                	test   $0x1,%al
  205e18:	75 0c                	jne    205e26 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x406>
  205e1a:	eb 00                	jmp    205e1c <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x3fc>
  205e1c:	c6 84 24 5f 02 00 00 	movb   $0x0,0x25f(%rsp)
  205e23:	00 
  205e24:	eb 60                	jmp    205e86 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x466>
  205e26:	c6 84 24 bf 05 00 00 	movb   $0x0,0x5bf(%rsp)
  205e2d:	00 
  205e2e:	48 8b 3d b3 dc 00 00 	mov    0xdcb3(%rip),%rdi        # 213ae8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  205e35:	0f b6 b4 24 bf 05 00 	movzbl 0x5bf(%rsp),%esi
  205e3c:	00 
  205e3d:	e8 8e 4a 00 00       	callq  20a8d0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  205e42:	48 89 84 24 c0 05 00 	mov    %rax,0x5c0(%rsp)
  205e49:	00 
  205e4a:	48 8b 84 24 c0 05 00 	mov    0x5c0(%rsp),%rax
  205e51:	00 
  205e52:	48 89 84 24 60 02 00 	mov    %rax,0x260(%rsp)
  205e59:	00 
  205e5a:	48 8d bc 24 50 02 00 	lea    0x250(%rsp),%rdi
  205e61:	00 
  205e62:	48 8d b4 24 60 02 00 	lea    0x260(%rsp),%rsi
  205e69:	00 
  205e6a:	e8 d1 ed ff ff       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  205e6f:	88 84 24 e7 00 00 00 	mov    %al,0xe7(%rsp)
  205e76:	8a 84 24 e7 00 00 00 	mov    0xe7(%rsp),%al
  205e7d:	24 01                	and    $0x1,%al
  205e7f:	88 84 24 5f 02 00 00 	mov    %al,0x25f(%rsp)
  205e86:	f6 84 24 5f 02 00 00 	testb  $0x1,0x25f(%rsp)
  205e8d:	01 
  205e8e:	75 12                	jne    205ea2 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x482>
            if let Some(memory_regions) = BootProtocol::get_memory_regions() {
  205e90:	e8 8b fa ff ff       	callq  205920 <_ZN9r3_kernel10boot_proto12BootProtocol18get_memory_regions17hc43e767c006d814bE>
  205e95:	48 89 84 24 b8 02 00 	mov    %rax,0x2b8(%rsp)
  205e9c:	00 
  205e9d:	e9 ea 00 00 00       	jmpq   205f8c <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x56c>
  205ea2:	48 8b 84 24 48 01 00 	mov    0x148(%rsp),%rax
  205ea9:	00 
            log::info!("Memory offset: 0x{:x}", bi.physical_memory_offset.into_option().unwrap());
  205eaa:	8b 78 60             	mov    0x60(%rax),%edi
  205ead:	48 8b 70 68          	mov    0x68(%rax),%rsi
  205eb1:	e8 da 1e 00 00       	callq  207d90 <_ZN10bootloader9boot_info17Optional$LT$T$GT$11into_option17h2ff5b3c95de4d9fdE>
  205eb6:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  205ebd:	00 
  205ebe:	48 89 94 24 d8 00 00 	mov    %rdx,0xd8(%rsp)
  205ec5:	00 
  205ec6:	48 8b b4 24 d8 00 00 	mov    0xd8(%rsp),%rsi
  205ecd:	00 
  205ece:	48 8b bc 24 d0 00 00 	mov    0xd0(%rsp),%rdi
  205ed5:	00 
  205ed6:	48 8d 15 5b ce 00 00 	lea    0xce5b(%rip),%rdx        # 212d38 <memset+0x1458>
  205edd:	e8 3e eb ff ff       	callq  204a20 <_ZN4core6option15Option$LT$T$GT$6unwrap17h0214e307054b4802E>
  205ee2:	48 89 84 24 b0 02 00 	mov    %rax,0x2b0(%rsp)
  205ee9:	00 
  205eea:	48 8d 84 24 b0 02 00 	lea    0x2b0(%rsp),%rax
  205ef1:	00 
  205ef2:	48 89 84 24 a8 02 00 	mov    %rax,0x2a8(%rsp)
  205ef9:	00 
  205efa:	48 8b bc 24 a8 02 00 	mov    0x2a8(%rsp),%rdi
  205f01:	00 
  205f02:	48 89 bc 24 28 05 00 	mov    %rdi,0x528(%rsp)
  205f09:	00 
  205f0a:	48 8b 35 df db 00 00 	mov    0xdbdf(%rip),%rsi        # 213af0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x68>
  205f11:	e8 6a 4f 00 00       	callq  20ae80 <_ZN4core3fmt10ArgumentV13new17hed39039da1d20c39E>
  205f16:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  205f1d:	00 
  205f1e:	48 89 94 24 c8 00 00 	mov    %rdx,0xc8(%rsp)
  205f25:	00 
  205f26:	48 8b 84 24 c8 00 00 	mov    0xc8(%rsp),%rax
  205f2d:	00 
  205f2e:	48 8b 8c 24 c0 00 00 	mov    0xc0(%rsp),%rcx
  205f35:	00 
  205f36:	48 89 8c 24 98 02 00 	mov    %rcx,0x298(%rsp)
  205f3d:	00 
  205f3e:	48 89 84 24 a0 02 00 	mov    %rax,0x2a0(%rsp)
  205f45:	00 
  205f46:	48 8d 8c 24 98 02 00 	lea    0x298(%rsp),%rcx
  205f4d:	00 
  205f4e:	48 8d bc 24 68 02 00 	lea    0x268(%rsp),%rdi
  205f55:	00 
  205f56:	48 8d 35 cb cd 00 00 	lea    0xcdcb(%rip),%rsi        # 212d28 <memset+0x1448>
  205f5d:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  205f63:	4c 89 c2             	mov    %r8,%rdx
  205f66:	e8 a5 e7 ff ff       	callq  204710 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  205f6b:	48 8b b4 24 50 02 00 	mov    0x250(%rsp),%rsi
  205f72:	00 
  205f73:	48 8d bc 24 68 02 00 	lea    0x268(%rsp),%rdi
  205f7a:	00 
  205f7b:	48 8d 15 ce cd 00 00 	lea    0xcdce(%rip),%rdx        # 212d50 <memset+0x1470>
  205f82:	e8 a9 67 00 00       	callq  20c730 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  205f87:	e9 04 ff ff ff       	jmpq   205e90 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x470>
            if let Some(memory_regions) = BootProtocol::get_memory_regions() {
  205f8c:	b8 01 00 00 00       	mov    $0x1,%eax
  205f91:	31 c9                	xor    %ecx,%ecx
  205f93:	48 83 bc 24 b8 02 00 	cmpq   $0x0,0x2b8(%rsp)
  205f9a:	00 00 
  205f9c:	48 0f 44 c1          	cmove  %rcx,%rax
  205fa0:	48 83 f8 01          	cmp    $0x1,%rax
  205fa4:	75 2a                	jne    205fd0 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x5b0>
  205fa6:	48 8b bc 24 b8 02 00 	mov    0x2b8(%rsp),%rdi
  205fad:	00 
  205fae:	48 89 bc 24 b0 00 00 	mov    %rdi,0xb0(%rsp)
  205fb5:	00 
  205fb6:	48 89 bc 24 30 05 00 	mov    %rdi,0x530(%rsp)
  205fbd:	00 
                for region_idx in 0..memory_regions.len() {
  205fbe:	e8 cd 7c 00 00       	callq  20dc90 <_ZN80_$LT$bootloader..boot_info..MemoryRegions$u20$as$u20$core..ops..deref..Deref$GT$5deref17h83924d426b7efd36E>
  205fc3:	48 89 94 24 b8 00 00 	mov    %rdx,0xb8(%rsp)
  205fca:	00 
  205fcb:	e9 fd 00 00 00       	jmpq   2060cd <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x6ad>
                log::warn!("Boot info doesn't contain memory map information.");
  205fd0:	48 c7 84 24 68 03 00 	movq   $0x2,0x368(%rsp)
  205fd7:	00 02 00 00 00 
  205fdc:	48 8d bc 24 68 03 00 	lea    0x368(%rsp),%rdi
  205fe3:	00 
  205fe4:	48 8d 35 4d a3 ff ff 	lea    -0x5cb3(%rip),%rsi        # 200338 <str.0+0x38>
  205feb:	e8 50 ec ff ff       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  205ff0:	88 84 24 af 00 00 00 	mov    %al,0xaf(%rsp)
  205ff7:	8a 84 24 af 00 00 00 	mov    0xaf(%rsp),%al
  205ffe:	a8 01                	test   $0x1,%al
  206000:	75 0c                	jne    20600e <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x5ee>
  206002:	eb 00                	jmp    206004 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x5e4>
  206004:	c6 84 24 77 03 00 00 	movb   $0x0,0x377(%rsp)
  20600b:	00 
  20600c:	eb 60                	jmp    20606e <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x64e>
  20600e:	c6 84 24 af 05 00 00 	movb   $0x0,0x5af(%rsp)
  206015:	00 
  206016:	48 8b 3d cb da 00 00 	mov    0xdacb(%rip),%rdi        # 213ae8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  20601d:	0f b6 b4 24 af 05 00 	movzbl 0x5af(%rsp),%esi
  206024:	00 
  206025:	e8 a6 48 00 00       	callq  20a8d0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  20602a:	48 89 84 24 b0 05 00 	mov    %rax,0x5b0(%rsp)
  206031:	00 
  206032:	48 8b 84 24 b0 05 00 	mov    0x5b0(%rsp),%rax
  206039:	00 
  20603a:	48 89 84 24 78 03 00 	mov    %rax,0x378(%rsp)
  206041:	00 
  206042:	48 8d bc 24 68 03 00 	lea    0x368(%rsp),%rdi
  206049:	00 
  20604a:	48 8d b4 24 78 03 00 	lea    0x378(%rsp),%rsi
  206051:	00 
  206052:	e8 e9 eb ff ff       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  206057:	88 84 24 ae 00 00 00 	mov    %al,0xae(%rsp)
  20605e:	8a 84 24 ae 00 00 00 	mov    0xae(%rsp),%al
  206065:	24 01                	and    $0x1,%al
  206067:	88 84 24 77 03 00 00 	mov    %al,0x377(%rsp)
  20606e:	f6 84 24 77 03 00 00 	testb  $0x1,0x377(%rsp)
  206075:	01 
  206076:	75 12                	jne    20608a <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x66a>
            if let Some(fb_info) = BootProtocol::get_framebuffer_info() {
  206078:	48 8d bc 24 b0 03 00 	lea    0x3b0(%rsp),%rdi
  20607f:	00 
  206080:	e8 eb f8 ff ff       	callq  205970 <_ZN9r3_kernel10boot_proto12BootProtocol20get_framebuffer_info17h359cc5b08ce307ecE>
  206085:	e9 c9 02 00 00       	jmpq   206353 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x933>
                log::warn!("Boot info doesn't contain memory map information.");
  20608a:	48 8d bc 24 80 03 00 	lea    0x380(%rsp),%rdi
  206091:	00 
  206092:	48 8d 35 ef cc 00 00 	lea    0xccef(%rip),%rsi        # 212d88 <memset+0x14a8>
  206099:	ba 01 00 00 00       	mov    $0x1,%edx
  20609e:	48 8d 0d 9b a5 ff ff 	lea    -0x5a65(%rip),%rcx        # 200640 <str.0+0xb0>
  2060a5:	31 c0                	xor    %eax,%eax
  2060a7:	41 89 c0             	mov    %eax,%r8d
  2060aa:	e8 61 e6 ff ff       	callq  204710 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  2060af:	48 8b b4 24 68 03 00 	mov    0x368(%rsp),%rsi
  2060b6:	00 
  2060b7:	48 8d bc 24 80 03 00 	lea    0x380(%rsp),%rdi
  2060be:	00 
  2060bf:	48 8d 15 d2 cc 00 00 	lea    0xccd2(%rip),%rdx        # 212d98 <memset+0x14b8>
  2060c6:	e8 65 66 00 00       	callq  20c730 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  2060cb:	eb ab                	jmp    206078 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x658>
  2060cd:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  2060d4:	00 
                for region_idx in 0..memory_regions.len() {
  2060d5:	48 c7 84 24 c0 02 00 	movq   $0x0,0x2c0(%rsp)
  2060dc:	00 00 00 00 00 
  2060e1:	48 89 84 24 c8 02 00 	mov    %rax,0x2c8(%rsp)
  2060e8:	00 
  2060e9:	48 8b bc 24 c0 02 00 	mov    0x2c0(%rsp),%rdi
  2060f0:	00 
  2060f1:	48 8b b4 24 c8 02 00 	mov    0x2c8(%rsp),%rsi
  2060f8:	00 
  2060f9:	e8 12 32 00 00       	callq  209310 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17haabf9c3393bbf5bcE>
  2060fe:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  206105:	00 
  206106:	48 89 94 24 a0 00 00 	mov    %rdx,0xa0(%rsp)
  20610d:	00 
  20610e:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  206115:	00 
  206116:	48 8b 8c 24 98 00 00 	mov    0x98(%rsp),%rcx
  20611d:	00 
  20611e:	48 89 8c 24 d0 02 00 	mov    %rcx,0x2d0(%rsp)
  206125:	00 
  206126:	48 89 84 24 d8 02 00 	mov    %rax,0x2d8(%rsp)
  20612d:	00 
  20612e:	48 8d bc 24 d0 02 00 	lea    0x2d0(%rsp),%rdi
  206135:	00 
  206136:	e8 a5 31 00 00       	callq  2092e0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hde79bfc4fb025d57E>
  20613b:	48 89 94 24 e8 02 00 	mov    %rdx,0x2e8(%rsp)
  206142:	00 
  206143:	48 89 84 24 e0 02 00 	mov    %rax,0x2e0(%rsp)
  20614a:	00 
  20614b:	48 8b 84 24 e0 02 00 	mov    0x2e0(%rsp),%rax
  206152:	00 
  206153:	48 85 c0             	test   %rax,%rax
  206156:	0f 84 1c ff ff ff    	je     206078 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x658>
  20615c:	eb 00                	jmp    20615e <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x73e>
  20615e:	eb 02                	jmp    206162 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x742>
  206160:	0f 0b                	ud2    
  206162:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
  206169:	00 
  20616a:	48 8b 84 24 e8 02 00 	mov    0x2e8(%rsp),%rax
  206171:	00 
  206172:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  206179:	00 
  20617a:	48 89 84 24 38 05 00 	mov    %rax,0x538(%rsp)
  206181:	00 
  206182:	48 89 84 24 40 05 00 	mov    %rax,0x540(%rsp)
  206189:	00 
  20618a:	48 89 84 24 48 05 00 	mov    %rax,0x548(%rsp)
  206191:	00 
                    let region = memory_regions[region_idx];
  206192:	e8 f9 7a 00 00       	callq  20dc90 <_ZN80_$LT$bootloader..boot_info..MemoryRegions$u20$as$u20$core..ops..deref..Deref$GT$5deref17h83924d426b7efd36E>
  206197:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  20619e:	00 
  20619f:	48 89 94 24 90 00 00 	mov    %rdx,0x90(%rsp)
  2061a6:	00 
  2061a7:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  2061ae:	00 
  2061af:	48 8b 8c 24 90 00 00 	mov    0x90(%rsp),%rcx
  2061b6:	00 
  2061b7:	48 39 c8             	cmp    %rcx,%rax
  2061ba:	0f 92 c0             	setb   %al
  2061bd:	a8 01                	test   $0x1,%al
  2061bf:	75 02                	jne    2061c3 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x7a3>
  2061c1:	eb 60                	jmp    206223 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x803>
  2061c3:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  2061ca:	00 
  2061cb:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  2061d2:	00 
  2061d3:	48 6b c9 18          	imul   $0x18,%rcx,%rcx
  2061d7:	48 01 c8             	add    %rcx,%rax
  2061da:	48 8b 08             	mov    (%rax),%rcx
  2061dd:	48 89 8c 24 f0 02 00 	mov    %rcx,0x2f0(%rsp)
  2061e4:	00 
  2061e5:	48 8b 48 08          	mov    0x8(%rax),%rcx
  2061e9:	48 89 8c 24 f8 02 00 	mov    %rcx,0x2f8(%rsp)
  2061f0:	00 
  2061f1:	48 8b 40 10          	mov    0x10(%rax),%rax
  2061f5:	48 89 84 24 00 03 00 	mov    %rax,0x300(%rsp)
  2061fc:	00 
                    log::info!("{:?}", region);
  2061fd:	48 c7 84 24 08 03 00 	movq   $0x3,0x308(%rsp)
  206204:	00 03 00 00 00 
  206209:	48 8d bc 24 08 03 00 	lea    0x308(%rsp),%rdi
  206210:	00 
  206211:	48 8d 35 20 a1 ff ff 	lea    -0x5ee0(%rip),%rsi        # 200338 <str.0+0x38>
  206218:	e8 23 ea ff ff       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20621d:	88 44 24 7f          	mov    %al,0x7f(%rsp)
  206221:	eb 1e                	jmp    206241 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x821>
  206223:	48 8b b4 24 90 00 00 	mov    0x90(%rsp),%rsi
  20622a:	00 
  20622b:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
  206232:	00 
                    let region = memory_regions[region_idx];
  206233:	48 8d 15 96 cb 00 00 	lea    0xcb96(%rip),%rdx        # 212dd0 <memset+0x14f0>
  20623a:	e8 a1 8c 00 00       	callq  20eee0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  20623f:	0f 0b                	ud2    
  206241:	8a 44 24 7f          	mov    0x7f(%rsp),%al
                    log::info!("{:?}", region);
  206245:	a8 01                	test   $0x1,%al
  206247:	75 0c                	jne    206255 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x835>
  206249:	eb 00                	jmp    20624b <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x82b>
  20624b:	c6 84 24 17 03 00 00 	movb   $0x0,0x317(%rsp)
  206252:	00 
  206253:	eb 5a                	jmp    2062af <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x88f>
  206255:	c6 84 24 9f 05 00 00 	movb   $0x0,0x59f(%rsp)
  20625c:	00 
  20625d:	48 8b 3d 84 d8 00 00 	mov    0xd884(%rip),%rdi        # 213ae8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  206264:	0f b6 b4 24 9f 05 00 	movzbl 0x59f(%rsp),%esi
  20626b:	00 
  20626c:	e8 5f 46 00 00       	callq  20a8d0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  206271:	48 89 84 24 a0 05 00 	mov    %rax,0x5a0(%rsp)
  206278:	00 
  206279:	48 8b 84 24 a0 05 00 	mov    0x5a0(%rsp),%rax
  206280:	00 
  206281:	48 89 84 24 18 03 00 	mov    %rax,0x318(%rsp)
  206288:	00 
  206289:	48 8d bc 24 08 03 00 	lea    0x308(%rsp),%rdi
  206290:	00 
  206291:	48 8d b4 24 18 03 00 	lea    0x318(%rsp),%rsi
  206298:	00 
  206299:	e8 a2 e9 ff ff       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20629e:	88 44 24 7e          	mov    %al,0x7e(%rsp)
  2062a2:	8a 44 24 7e          	mov    0x7e(%rsp),%al
  2062a6:	24 01                	and    $0x1,%al
  2062a8:	88 84 24 17 03 00 00 	mov    %al,0x317(%rsp)
  2062af:	f6 84 24 17 03 00 00 	testb  $0x1,0x317(%rsp)
  2062b6:	01 
  2062b7:	0f 84 71 fe ff ff    	je     20612e <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x70e>
  2062bd:	48 8d 84 24 f0 02 00 	lea    0x2f0(%rsp),%rax
  2062c4:	00 
  2062c5:	48 89 84 24 60 03 00 	mov    %rax,0x360(%rsp)
  2062cc:	00 
  2062cd:	48 8b bc 24 60 03 00 	mov    0x360(%rsp),%rdi
  2062d4:	00 
  2062d5:	48 89 bc 24 50 05 00 	mov    %rdi,0x550(%rsp)
  2062dc:	00 
  2062dd:	48 8b 35 2c d8 00 00 	mov    0xd82c(%rip),%rsi        # 213b10 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x88>
  2062e4:	e8 57 49 00 00       	callq  20ac40 <_ZN4core3fmt10ArgumentV13new17h3d8fc7a58ad0ecdfE>
  2062e9:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  2062ee:	48 89 54 24 70       	mov    %rdx,0x70(%rsp)
  2062f3:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  2062f8:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
  2062fd:	48 89 8c 24 50 03 00 	mov    %rcx,0x350(%rsp)
  206304:	00 
  206305:	48 89 84 24 58 03 00 	mov    %rax,0x358(%rsp)
  20630c:	00 
  20630d:	48 8d 8c 24 50 03 00 	lea    0x350(%rsp),%rcx
  206314:	00 
  206315:	48 8d bc 24 20 03 00 	lea    0x320(%rsp),%rdi
  20631c:	00 
  20631d:	48 8d 35 c4 ca 00 00 	lea    0xcac4(%rip),%rsi        # 212de8 <memset+0x1508>
  206324:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  20632a:	4c 89 c2             	mov    %r8,%rdx
  20632d:	e8 de e3 ff ff       	callq  204710 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  206332:	48 8b b4 24 08 03 00 	mov    0x308(%rsp),%rsi
  206339:	00 
  20633a:	48 8d bc 24 20 03 00 	lea    0x320(%rsp),%rdi
  206341:	00 
  206342:	48 8d 15 af ca 00 00 	lea    0xcaaf(%rip),%rdx        # 212df8 <memset+0x1518>
  206349:	e8 e2 63 00 00       	callq  20c730 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  20634e:	e9 db fd ff ff       	jmpq   20612e <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x70e>
            if let Some(fb_info) = BootProtocol::get_framebuffer_info() {
  206353:	8b 94 24 c8 03 00 00 	mov    0x3c8(%rsp),%edx
  20635a:	83 ea 03             	sub    $0x3,%edx
  20635d:	b8 01 00 00 00       	mov    $0x1,%eax
  206362:	31 c9                	xor    %ecx,%ecx
  206364:	83 fa 00             	cmp    $0x0,%edx
  206367:	48 0f 44 c1          	cmove  %rcx,%rax
  20636b:	48 83 f8 01          	cmp    $0x1,%rax
  20636f:	75 43                	jne    2063b4 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x994>
  206371:	48 8d b4 24 b0 03 00 	lea    0x3b0(%rsp),%rsi
  206378:	00 
  206379:	48 8d bc 24 e0 03 00 	lea    0x3e0(%rsp),%rdi
  206380:	00 
  206381:	ba 30 00 00 00       	mov    $0x30,%edx
  206386:	e8 35 b5 00 00       	callq  2118c0 <memcpy>
                log::info!(
  20638b:	48 c7 84 24 10 04 00 	movq   $0x3,0x410(%rsp)
  206392:	00 03 00 00 00 
  206397:	48 8d bc 24 10 04 00 	lea    0x410(%rsp),%rdi
  20639e:	00 
  20639f:	48 8d 35 92 9f ff ff 	lea    -0x606e(%rip),%rsi        # 200338 <str.0+0x38>
  2063a6:	e8 95 e8 ff ff       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  2063ab:	88 44 24 67          	mov    %al,0x67(%rsp)
  2063af:	e9 e6 00 00 00       	jmpq   20649a <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0xa7a>
                log::warn!("Boot info doesn't contain framebuffer information.");
  2063b4:	48 c7 84 24 b8 04 00 	movq   $0x2,0x4b8(%rsp)
  2063bb:	00 02 00 00 00 
  2063c0:	48 8d bc 24 b8 04 00 	lea    0x4b8(%rsp),%rdi
  2063c7:	00 
  2063c8:	48 8d 35 69 9f ff ff 	lea    -0x6097(%rip),%rsi        # 200338 <str.0+0x38>
  2063cf:	e8 6c e8 ff ff       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  2063d4:	88 44 24 66          	mov    %al,0x66(%rsp)
  2063d8:	8a 44 24 66          	mov    0x66(%rsp),%al
  2063dc:	a8 01                	test   $0x1,%al
  2063de:	75 0c                	jne    2063ec <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x9cc>
  2063e0:	eb 00                	jmp    2063e2 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x9c2>
  2063e2:	c6 84 24 c7 04 00 00 	movb   $0x0,0x4c7(%rsp)
  2063e9:	00 
  2063ea:	eb 5a                	jmp    206446 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0xa26>
  2063ec:	c6 84 24 8f 05 00 00 	movb   $0x0,0x58f(%rsp)
  2063f3:	00 
  2063f4:	48 8b 3d ed d6 00 00 	mov    0xd6ed(%rip),%rdi        # 213ae8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  2063fb:	0f b6 b4 24 8f 05 00 	movzbl 0x58f(%rsp),%esi
  206402:	00 
  206403:	e8 c8 44 00 00       	callq  20a8d0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  206408:	48 89 84 24 90 05 00 	mov    %rax,0x590(%rsp)
  20640f:	00 
  206410:	48 8b 84 24 90 05 00 	mov    0x590(%rsp),%rax
  206417:	00 
  206418:	48 89 84 24 c8 04 00 	mov    %rax,0x4c8(%rsp)
  20641f:	00 
  206420:	48 8d bc 24 b8 04 00 	lea    0x4b8(%rsp),%rdi
  206427:	00 
  206428:	48 8d b4 24 c8 04 00 	lea    0x4c8(%rsp),%rsi
  20642f:	00 
  206430:	e8 0b e8 ff ff       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  206435:	88 44 24 65          	mov    %al,0x65(%rsp)
  206439:	8a 44 24 65          	mov    0x65(%rsp),%al
  20643d:	24 01                	and    $0x1,%al
  20643f:	88 84 24 c7 04 00 00 	mov    %al,0x4c7(%rsp)
  206446:	f6 84 24 c7 04 00 00 	testb  $0x1,0x4c7(%rsp)
  20644d:	01 
  20644e:	0f 84 3b f6 ff ff    	je     205a8f <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x6f>
  206454:	48 8d bc 24 d0 04 00 	lea    0x4d0(%rsp),%rdi
  20645b:	00 
  20645c:	48 8d 35 cd c9 00 00 	lea    0xc9cd(%rip),%rsi        # 212e30 <memset+0x1550>
  206463:	ba 01 00 00 00       	mov    $0x1,%edx
  206468:	48 8d 0d d1 a1 ff ff 	lea    -0x5e2f(%rip),%rcx        # 200640 <str.0+0xb0>
  20646f:	31 c0                	xor    %eax,%eax
  206471:	41 89 c0             	mov    %eax,%r8d
  206474:	e8 97 e2 ff ff       	callq  204710 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  206479:	48 8b b4 24 b8 04 00 	mov    0x4b8(%rsp),%rsi
  206480:	00 
  206481:	48 8d bc 24 d0 04 00 	lea    0x4d0(%rsp),%rdi
  206488:	00 
  206489:	48 8d 15 b0 c9 00 00 	lea    0xc9b0(%rip),%rdx        # 212e40 <memset+0x1560>
  206490:	e8 9b 62 00 00       	callq  20c730 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  206495:	e9 f5 f5 ff ff       	jmpq   205a8f <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x6f>
  20649a:	8a 44 24 67          	mov    0x67(%rsp),%al
                log::info!(
  20649e:	a8 01                	test   $0x1,%al
  2064a0:	75 0c                	jne    2064ae <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0xa8e>
  2064a2:	eb 00                	jmp    2064a4 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0xa84>
  2064a4:	c6 84 24 1f 04 00 00 	movb   $0x0,0x41f(%rsp)
  2064ab:	00 
  2064ac:	eb 5a                	jmp    206508 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0xae8>
  2064ae:	c6 84 24 7f 05 00 00 	movb   $0x0,0x57f(%rsp)
  2064b5:	00 
  2064b6:	48 8b 3d 2b d6 00 00 	mov    0xd62b(%rip),%rdi        # 213ae8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  2064bd:	0f b6 b4 24 7f 05 00 	movzbl 0x57f(%rsp),%esi
  2064c4:	00 
  2064c5:	e8 06 44 00 00       	callq  20a8d0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  2064ca:	48 89 84 24 80 05 00 	mov    %rax,0x580(%rsp)
  2064d1:	00 
  2064d2:	48 8b 84 24 80 05 00 	mov    0x580(%rsp),%rax
  2064d9:	00 
  2064da:	48 89 84 24 20 04 00 	mov    %rax,0x420(%rsp)
  2064e1:	00 
  2064e2:	48 8d bc 24 10 04 00 	lea    0x410(%rsp),%rdi
  2064e9:	00 
  2064ea:	48 8d b4 24 20 04 00 	lea    0x420(%rsp),%rsi
  2064f1:	00 
  2064f2:	e8 49 e7 ff ff       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  2064f7:	88 44 24 64          	mov    %al,0x64(%rsp)
  2064fb:	8a 44 24 64          	mov    0x64(%rsp),%al
  2064ff:	24 01                	and    $0x1,%al
  206501:	88 84 24 1f 04 00 00 	mov    %al,0x41f(%rsp)
  206508:	f6 84 24 1f 04 00 00 	testb  $0x1,0x41f(%rsp)
  20650f:	01 
  206510:	0f 84 79 f5 ff ff    	je     205a8f <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x6f>
                    fb_info.horizontal_resolution, fb_info.vertical_resolution,
  206516:	48 8d b4 24 e0 03 00 	lea    0x3e0(%rsp),%rsi
  20651d:	00 
  20651e:	48 83 c6 08          	add    $0x8,%rsi
  206522:	48 8d 94 24 e0 03 00 	lea    0x3e0(%rsp),%rdx
  206529:	00 
  20652a:	48 83 c2 10          	add    $0x10,%rdx
                    fb_info.bytes_per_pixel, fb_info.pixel_format
  20652e:	48 8d 8c 24 e0 03 00 	lea    0x3e0(%rsp),%rcx
  206535:	00 
  206536:	48 83 c1 20          	add    $0x20,%rcx
  20653a:	48 8d 84 24 e0 03 00 	lea    0x3e0(%rsp),%rax
  206541:	00 
  206542:	48 83 c0 18          	add    $0x18,%rax
                log::info!(
  206546:	48 89 b4 24 98 04 00 	mov    %rsi,0x498(%rsp)
  20654d:	00 
  20654e:	48 89 94 24 a0 04 00 	mov    %rdx,0x4a0(%rsp)
  206555:	00 
  206556:	48 89 8c 24 a8 04 00 	mov    %rcx,0x4a8(%rsp)
  20655d:	00 
  20655e:	48 89 84 24 b0 04 00 	mov    %rax,0x4b0(%rsp)
  206565:	00 
  206566:	48 8b bc 24 98 04 00 	mov    0x498(%rsp),%rdi
  20656d:	00 
  20656e:	48 89 bc 24 58 05 00 	mov    %rdi,0x558(%rsp)
  206575:	00 
  206576:	48 8b 84 24 a0 04 00 	mov    0x4a0(%rsp),%rax
  20657d:	00 
  20657e:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  206583:	48 89 84 24 60 05 00 	mov    %rax,0x560(%rsp)
  20658a:	00 
  20658b:	48 8b 84 24 a8 04 00 	mov    0x4a8(%rsp),%rax
  206592:	00 
  206593:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  206598:	48 89 84 24 68 05 00 	mov    %rax,0x568(%rsp)
  20659f:	00 
  2065a0:	48 8b 84 24 b0 04 00 	mov    0x4b0(%rsp),%rax
  2065a7:	00 
  2065a8:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  2065ad:	48 89 84 24 70 05 00 	mov    %rax,0x570(%rsp)
  2065b4:	00 
  2065b5:	48 8b 35 5c d5 00 00 	mov    0xd55c(%rip),%rsi        # 213b18 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x90>
  2065bc:	e8 ff 47 00 00       	callq  20adc0 <_ZN4core3fmt10ArgumentV13new17hdc56630c0a43f264E>
  2065c1:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  2065c6:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  2065cb:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  2065d0:	48 8b 35 41 d5 00 00 	mov    0xd541(%rip),%rsi        # 213b18 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x90>
  2065d7:	e8 e4 47 00 00       	callq  20adc0 <_ZN4core3fmt10ArgumentV13new17hdc56630c0a43f264E>
  2065dc:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2065e1:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  2065e6:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  2065eb:	48 8b 35 26 d5 00 00 	mov    0xd526(%rip),%rsi        # 213b18 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x90>
  2065f2:	e8 c9 47 00 00       	callq  20adc0 <_ZN4core3fmt10ArgumentV13new17hdc56630c0a43f264E>
  2065f7:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2065fc:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  206601:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  206606:	48 8b 35 13 d5 00 00 	mov    0xd513(%rip),%rsi        # 213b20 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x98>
  20660d:	e8 4e 47 00 00       	callq  20ad60 <_ZN4core3fmt10ArgumentV13new17hcebee369d36adbb6E>
  206612:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  206617:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  20661c:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  206621:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  206626:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20662b:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  206630:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  206635:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
  20663a:	4c 8b 4c 24 58       	mov    0x58(%rsp),%r9
  20663f:	4c 8b 54 24 50       	mov    0x50(%rsp),%r10
  206644:	4c 89 94 24 58 04 00 	mov    %r10,0x458(%rsp)
  20664b:	00 
  20664c:	4c 89 8c 24 60 04 00 	mov    %r9,0x460(%rsp)
  206653:	00 
  206654:	4c 89 84 24 68 04 00 	mov    %r8,0x468(%rsp)
  20665b:	00 
  20665c:	48 89 bc 24 70 04 00 	mov    %rdi,0x470(%rsp)
  206663:	00 
  206664:	48 89 b4 24 78 04 00 	mov    %rsi,0x478(%rsp)
  20666b:	00 
  20666c:	48 89 94 24 80 04 00 	mov    %rdx,0x480(%rsp)
  206673:	00 
  206674:	48 89 8c 24 88 04 00 	mov    %rcx,0x488(%rsp)
  20667b:	00 
  20667c:	48 89 84 24 90 04 00 	mov    %rax,0x490(%rsp)
  206683:	00 
  206684:	48 8d 8c 24 58 04 00 	lea    0x458(%rsp),%rcx
  20668b:	00 
  20668c:	48 8d bc 24 28 04 00 	lea    0x428(%rsp),%rdi
  206693:	00 
  206694:	48 8d 35 dd c7 00 00 	lea    0xc7dd(%rip),%rsi        # 212e78 <memset+0x1598>
  20669b:	41 b8 04 00 00 00    	mov    $0x4,%r8d
  2066a1:	4c 89 c2             	mov    %r8,%rdx
  2066a4:	e8 67 e0 ff ff       	callq  204710 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  2066a9:	48 8b b4 24 10 04 00 	mov    0x410(%rsp),%rsi
  2066b0:	00 
  2066b1:	48 8d bc 24 28 04 00 	lea    0x428(%rsp),%rdi
  2066b8:	00 
  2066b9:	48 8d 15 f8 c7 00 00 	lea    0xc7f8(%rip),%rdx        # 212eb8 <memset+0x15d8>
  2066c0:	e8 6b 60 00 00       	callq  20c730 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  2066c5:	e9 c5 f3 ff ff       	jmpq   205a8f <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E+0x6f>
  2066ca:	cc                   	int3   
  2066cb:	cc                   	int3   
  2066cc:	cc                   	int3   
  2066cd:	cc                   	int3   
  2066ce:	cc                   	int3   
  2066cf:	cc                   	int3   

00000000002066d0 <_ZN76_$LT$r3_kernel..boot_proto..BOOT_INFO$u20$as$u20$core..ops..deref..Deref$GT$5deref17he8254bf6449c3446E>:
            fn deref(&self) -> &$T {
  2066d0:	48 83 ec 18          	sub    $0x18,%rsp
  2066d4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2066d9:	48 8d 05 a8 35 01 00 	lea    0x135a8(%rip),%rax        # 219c88 <_ZN76_$LT$r3_kernel..boot_proto..BOOT_INFO$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h95f8b6f4aca1b584E>
  2066e0:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2066e5:	48 8d 3d 9c 35 01 00 	lea    0x1359c(%rip),%rdi        # 219c88 <_ZN76_$LT$r3_kernel..boot_proto..BOOT_INFO$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17h95f8b6f4aca1b584E>
  2066ec:	e8 6f 0e 00 00       	callq  207560 <_ZN4spin4once13Once$LT$T$GT$9call_once17hacbad4e30be1d63fE>
  2066f1:	48 89 04 24          	mov    %rax,(%rsp)
  2066f5:	48 8b 04 24          	mov    (%rsp),%rax
            }
  2066f9:	48 83 c4 18          	add    $0x18,%rsp
  2066fd:	c3                   	retq   
  2066fe:	cc                   	int3   
  2066ff:	cc                   	int3   

0000000000206700 <_ZN4core3mem7replace17h73afdf1293179534E>:
#[inline]
#[stable(feature = "rust1", since = "1.0.0")]
#[must_use = "if you don't need the old value, you can just assign the new value directly"]
#[rustc_const_unstable(feature = "const_replace", issue = "83164")]
#[cfg_attr(not(test), rustc_diagnostic_item = "mem_replace")]
pub const fn replace<T>(dest: &mut T, src: T) -> T {
  206700:	48 83 ec 38          	sub    $0x38,%rsp
  206704:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  206709:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20670e:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  206713:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
    // SAFETY: We read from `dest` but directly write `src` into it afterwards,
    // such that the old value is not duplicated. Nothing is dropped and
    // nothing here can panic.
    unsafe {
        let result = ptr::read(dest);
  206718:	e8 23 4b 00 00       	callq  20b240 <_ZN4core3ptr4read17h3174a0a85995dc74E>
  20671d:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  206722:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  206727:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  20672c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        ptr::write(dest, src);
  206731:	e8 5a 4b 00 00       	callq  20b290 <_ZN4core3ptr5write17hb4ae5111637a2d49E>
  206736:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
        result
    }
}
  20673b:	48 83 c4 38          	add    $0x38,%rsp
  20673f:	c3                   	retq   

0000000000206740 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h2581c86e0c11bcbcE>:
    }
}

impl<T: ?Sized> Mutex<T>
{
    fn obtain_lock(&self)
  206740:	48 83 ec 28          	sub    $0x28,%rsp
  206744:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  206749:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  20674e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    {
        while self.lock.compare_and_swap(false, true, Ordering::Acquire) != false
  206753:	c6 44 24 1e 02       	movb   $0x2,0x1e(%rsp)
  206758:	31 f6                	xor    %esi,%esi
  20675a:	ba 01 00 00 00       	mov    $0x1,%edx
  20675f:	0f b6 4c 24 1e       	movzbl 0x1e(%rsp),%ecx
  206764:	e8 d7 3d 00 00       	callq  20a540 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h2284ade66790ed9bE>
  206769:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20676d:	8a 44 24 0f          	mov    0xf(%rsp),%al
  206771:	a8 01                	test   $0x1,%al
  206773:	75 07                	jne    20677c <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h2581c86e0c11bcbcE+0x3c>
  206775:	eb 00                	jmp    206777 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h2581c86e0c11bcbcE+0x37>
            while self.lock.load(Ordering::Relaxed)
            {
                cpu_relax();
            }
        }
    }
  206777:	48 83 c4 28          	add    $0x28,%rsp
  20677b:	c3                   	retq   
  20677c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            while self.lock.load(Ordering::Relaxed)
  206781:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  206786:	0f b6 74 24 1f       	movzbl 0x1f(%rsp),%esi
  20678b:	e8 80 3f 00 00       	callq  20a710 <_ZN4core4sync6atomic10AtomicBool4load17h2c6e38e521bd9650E>
  206790:	88 44 24 0e          	mov    %al,0xe(%rsp)
  206794:	8a 44 24 0e          	mov    0xe(%rsp),%al
  206798:	a8 01                	test   $0x1,%al
  20679a:	75 02                	jne    20679e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h2581c86e0c11bcbcE+0x5e>
  20679c:	eb b0                	jmp    20674e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h2581c86e0c11bcbcE+0xe>
                cpu_relax();
  20679e:	e8 ad 41 00 00       	callq  20a950 <_ZN4core4sync6atomic14spin_loop_hint17h92421a221054ae95E>
  2067a3:	eb d7                	jmp    20677c <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h2581c86e0c11bcbcE+0x3c>
  2067a5:	cc                   	int3   
  2067a6:	cc                   	int3   
  2067a7:	cc                   	int3   
  2067a8:	cc                   	int3   
  2067a9:	cc                   	int3   
  2067aa:	cc                   	int3   
  2067ab:	cc                   	int3   
  2067ac:	cc                   	int3   
  2067ad:	cc                   	int3   
  2067ae:	cc                   	int3   
  2067af:	cc                   	int3   

00000000002067b0 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h43185fa240c1f9acE>:
    fn obtain_lock(&self)
  2067b0:	48 83 ec 28          	sub    $0x28,%rsp
  2067b4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  2067b9:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  2067be:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        while self.lock.compare_and_swap(false, true, Ordering::Acquire) != false
  2067c3:	c6 44 24 1e 02       	movb   $0x2,0x1e(%rsp)
  2067c8:	31 f6                	xor    %esi,%esi
  2067ca:	ba 01 00 00 00       	mov    $0x1,%edx
  2067cf:	0f b6 4c 24 1e       	movzbl 0x1e(%rsp),%ecx
  2067d4:	e8 67 3d 00 00       	callq  20a540 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h2284ade66790ed9bE>
  2067d9:	88 44 24 0f          	mov    %al,0xf(%rsp)
  2067dd:	8a 44 24 0f          	mov    0xf(%rsp),%al
  2067e1:	a8 01                	test   $0x1,%al
  2067e3:	75 07                	jne    2067ec <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h43185fa240c1f9acE+0x3c>
  2067e5:	eb 00                	jmp    2067e7 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h43185fa240c1f9acE+0x37>
    }
  2067e7:	48 83 c4 28          	add    $0x28,%rsp
  2067eb:	c3                   	retq   
  2067ec:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            while self.lock.load(Ordering::Relaxed)
  2067f1:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  2067f6:	0f b6 74 24 1f       	movzbl 0x1f(%rsp),%esi
  2067fb:	e8 10 3f 00 00       	callq  20a710 <_ZN4core4sync6atomic10AtomicBool4load17h2c6e38e521bd9650E>
  206800:	88 44 24 0e          	mov    %al,0xe(%rsp)
  206804:	8a 44 24 0e          	mov    0xe(%rsp),%al
  206808:	a8 01                	test   $0x1,%al
  20680a:	75 02                	jne    20680e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h43185fa240c1f9acE+0x5e>
  20680c:	eb b0                	jmp    2067be <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h43185fa240c1f9acE+0xe>
                cpu_relax();
  20680e:	e8 3d 41 00 00       	callq  20a950 <_ZN4core4sync6atomic14spin_loop_hint17h92421a221054ae95E>
  206813:	eb d7                	jmp    2067ec <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h43185fa240c1f9acE+0x3c>
  206815:	cc                   	int3   
  206816:	cc                   	int3   
  206817:	cc                   	int3   
  206818:	cc                   	int3   
  206819:	cc                   	int3   
  20681a:	cc                   	int3   
  20681b:	cc                   	int3   
  20681c:	cc                   	int3   
  20681d:	cc                   	int3   
  20681e:	cc                   	int3   
  20681f:	cc                   	int3   

0000000000206820 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h90978d024cd17780E>:
    fn obtain_lock(&self)
  206820:	48 83 ec 28          	sub    $0x28,%rsp
  206824:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  206829:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  20682e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        while self.lock.compare_and_swap(false, true, Ordering::Acquire) != false
  206833:	c6 44 24 1e 02       	movb   $0x2,0x1e(%rsp)
  206838:	31 f6                	xor    %esi,%esi
  20683a:	ba 01 00 00 00       	mov    $0x1,%edx
  20683f:	0f b6 4c 24 1e       	movzbl 0x1e(%rsp),%ecx
  206844:	e8 f7 3c 00 00       	callq  20a540 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h2284ade66790ed9bE>
  206849:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20684d:	8a 44 24 0f          	mov    0xf(%rsp),%al
  206851:	a8 01                	test   $0x1,%al
  206853:	75 07                	jne    20685c <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h90978d024cd17780E+0x3c>
  206855:	eb 00                	jmp    206857 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h90978d024cd17780E+0x37>
    }
  206857:	48 83 c4 28          	add    $0x28,%rsp
  20685b:	c3                   	retq   
  20685c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
            while self.lock.load(Ordering::Relaxed)
  206861:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
  206866:	0f b6 74 24 1f       	movzbl 0x1f(%rsp),%esi
  20686b:	e8 a0 3e 00 00       	callq  20a710 <_ZN4core4sync6atomic10AtomicBool4load17h2c6e38e521bd9650E>
  206870:	88 44 24 0e          	mov    %al,0xe(%rsp)
  206874:	8a 44 24 0e          	mov    0xe(%rsp),%al
  206878:	a8 01                	test   $0x1,%al
  20687a:	75 02                	jne    20687e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h90978d024cd17780E+0x5e>
  20687c:	eb b0                	jmp    20682e <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h90978d024cd17780E+0xe>
                cpu_relax();
  20687e:	e8 cd 40 00 00       	callq  20a950 <_ZN4core4sync6atomic14spin_loop_hint17h92421a221054ae95E>
  206883:	eb d7                	jmp    20685c <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h90978d024cd17780E+0x3c>
  206885:	cc                   	int3   
  206886:	cc                   	int3   
  206887:	cc                   	int3   
  206888:	cc                   	int3   
  206889:	cc                   	int3   
  20688a:	cc                   	int3   
  20688b:	cc                   	int3   
  20688c:	cc                   	int3   
  20688d:	cc                   	int3   
  20688e:	cc                   	int3   
  20688f:	cc                   	int3   

0000000000206890 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h1368181a5039d411E>:
    pub const fn new(user_data: T) -> Mutex<T>
  206890:	48 83 ec 78          	sub    $0x78,%rsp
  206894:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  206899:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  20689e:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  2068a3:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  2068a8:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  2068ad:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
            lock: AtomicBool::new(false),
  2068b2:	31 ff                	xor    %edi,%edi
  2068b4:	e8 17 3e 00 00       	callq  20a6d0 <_ZN4core4sync6atomic10AtomicBool3new17h98a9ecabc8d0c764E>
  2068b9:	88 44 24 57          	mov    %al,0x57(%rsp)
  2068bd:	8a 44 24 57          	mov    0x57(%rsp),%al
  2068c1:	88 44 24 38          	mov    %al,0x38(%rsp)
  2068c5:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2068ca:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  2068cf:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  2068d4:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_const_stable(feature = "const_unsafe_cell_new", since = "1.32.0")]
    #[inline(always)]
    pub const fn new(value: T) -> UnsafeCell<T> {
        UnsafeCell { value }
  2068d9:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  2068de:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
    }
  2068e3:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  2068e8:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2068ed:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  2068f2:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2068f7:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  2068fc:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  206901:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  206906:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
        Mutex
  20690b:	40 8a 7c 24 38       	mov    0x38(%rsp),%dil
  206910:	40 88 39             	mov    %dil,(%rcx)
  206913:	48 89 71 08          	mov    %rsi,0x8(%rcx)
  206917:	48 89 51 10          	mov    %rdx,0x10(%rcx)
    }
  20691b:	48 83 c4 78          	add    $0x78,%rsp
  20691f:	c3                   	retq   

0000000000206920 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h278439292dab46e4E>:
    pub const fn new(user_data: T) -> Mutex<T>
  206920:	48 81 ec 38 30 00 00 	sub    $0x3038,%rsp
  206927:	48 89 34 24          	mov    %rsi,(%rsp)
  20692b:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  206930:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
            lock: AtomicBool::new(false),
  206935:	31 ff                	xor    %edi,%edi
  206937:	e8 94 3d 00 00       	callq  20a6d0 <_ZN4core4sync6atomic10AtomicBool3new17h98a9ecabc8d0c764E>
  20693c:	88 84 24 2f 20 00 00 	mov    %al,0x202f(%rsp)
  206943:	8a 84 24 2f 20 00 00 	mov    0x202f(%rsp),%al
  20694a:	88 44 24 18          	mov    %al,0x18(%rsp)
  20694e:	48 8b 34 24          	mov    (%rsp),%rsi
            data: UnsafeCell::new(user_data),
  206952:	48 8d bc 24 20 10 00 	lea    0x1020(%rsp),%rdi
  206959:	00 
  20695a:	ba 00 10 00 00       	mov    $0x1000,%edx
  20695f:	e8 5c af 00 00       	callq  2118c0 <memcpy>
        UnsafeCell { value }
  206964:	48 8d bc 24 30 20 00 	lea    0x2030(%rsp),%rdi
  20696b:	00 
  20696c:	48 8d b4 24 20 10 00 	lea    0x1020(%rsp),%rsi
  206973:	00 
  206974:	ba 00 10 00 00       	mov    $0x1000,%edx
  206979:	e8 42 af 00 00       	callq  2118c0 <memcpy>
  20697e:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  206983:	48 8d b4 24 30 20 00 	lea    0x2030(%rsp),%rsi
  20698a:	00 
  20698b:	ba 00 10 00 00       	mov    $0x1000,%edx
  206990:	e8 2b af 00 00       	callq  2118c0 <memcpy>
  206995:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        Mutex
  20699a:	8a 44 24 18          	mov    0x18(%rsp),%al
  20699e:	88 07                	mov    %al,(%rdi)
  2069a0:	48 83 c7 10          	add    $0x10,%rdi
  2069a4:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  2069a9:	ba 00 10 00 00       	mov    $0x1000,%edx
  2069ae:	e8 0d af 00 00       	callq  2118c0 <memcpy>
  2069b3:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    }
  2069b8:	48 81 c4 38 30 00 00 	add    $0x3038,%rsp
  2069bf:	c3                   	retq   

00000000002069c0 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h9c67aabfb8c12465E>:
    pub const fn new(user_data: T) -> Mutex<T>
  2069c0:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  2069c7:	48 89 34 24          	mov    %rsi,(%rsp)
  2069cb:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2069d0:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
            lock: AtomicBool::new(false),
  2069d5:	31 ff                	xor    %edi,%edi
  2069d7:	e8 f4 3c 00 00       	callq  20a6d0 <_ZN4core4sync6atomic10AtomicBool3new17h98a9ecabc8d0c764E>
  2069dc:	88 44 24 67          	mov    %al,0x67(%rsp)
  2069e0:	8a 44 24 67          	mov    0x67(%rsp),%al
  2069e4:	88 44 24 18          	mov    %al,0x18(%rsp)
  2069e8:	48 8b 04 24          	mov    (%rsp),%rax
            data: UnsafeCell::new(user_data),
  2069ec:	48 8b 08             	mov    (%rax),%rcx
  2069ef:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  2069f4:	48 8b 48 08          	mov    0x8(%rax),%rcx
  2069f8:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  2069fd:	48 8b 48 10          	mov    0x10(%rax),%rcx
  206a01:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  206a06:	48 8b 40 18          	mov    0x18(%rax),%rax
  206a0a:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  206a0f:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  206a14:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  206a19:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  206a1e:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  206a23:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  206a28:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  206a2d:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  206a32:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  206a39:	00 
  206a3a:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  206a3f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  206a44:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  206a49:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  206a4e:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  206a53:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  206a58:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  206a5f:	00 
  206a60:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  206a65:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  206a6a:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
        Mutex
  206a6f:	8a 54 24 18          	mov    0x18(%rsp),%dl
  206a73:	88 11                	mov    %dl,(%rcx)
  206a75:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  206a7a:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  206a7e:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  206a83:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  206a87:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  206a8c:	48 89 51 18          	mov    %rdx,0x18(%rcx)
  206a90:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  206a95:	48 89 51 20          	mov    %rdx,0x20(%rcx)
    }
  206a99:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  206aa0:	c3                   	retq   
  206aa1:	cc                   	int3   
  206aa2:	cc                   	int3   
  206aa3:	cc                   	int3   
  206aa4:	cc                   	int3   
  206aa5:	cc                   	int3   
  206aa6:	cc                   	int3   
  206aa7:	cc                   	int3   
  206aa8:	cc                   	int3   
  206aa9:	cc                   	int3   
  206aaa:	cc                   	int3   
  206aab:	cc                   	int3   
  206aac:	cc                   	int3   
  206aad:	cc                   	int3   
  206aae:	cc                   	int3   
  206aaf:	cc                   	int3   

0000000000206ab0 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h2d82f46c320cde4bE>:
    ///     *data += 1;
    ///     // The lock is implicitly dropped
    /// }
    ///
    /// ```
    pub fn lock(&self) -> MutexGuard<T>
  206ab0:	48 83 ec 38          	sub    $0x38,%rsp
  206ab4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  206ab9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
    {
        self.obtain_lock();
  206abe:	e8 5d fd ff ff       	callq  206820 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h90978d024cd17780E>
  206ac3:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
        MutexGuard
        {
            lock: &self.lock,
  206ac8:	48 89 c1             	mov    %rax,%rcx
  206acb:	48 89 0c 24          	mov    %rcx,(%rsp)
            data: unsafe { &mut *self.data.get() },
  206acf:	48 83 c0 10          	add    $0x10,%rax
  206ad3:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  206ad8:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  206add:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  206ae2:	48 8b 0c 24          	mov    (%rsp),%rcx
        MutexGuard
  206ae6:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  206aeb:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
        }
    }
  206af0:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  206af5:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  206afa:	48 83 c4 38          	add    $0x38,%rsp
  206afe:	c3                   	retq   
  206aff:	cc                   	int3   

0000000000206b00 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h4ccc519c0d0de437E>:
    pub fn lock(&self) -> MutexGuard<T>
  206b00:	48 83 ec 38          	sub    $0x38,%rsp
  206b04:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  206b09:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        self.obtain_lock();
  206b0e:	e8 9d fc ff ff       	callq  2067b0 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h43185fa240c1f9acE>
  206b13:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            lock: &self.lock,
  206b18:	48 89 c1             	mov    %rax,%rcx
  206b1b:	48 89 0c 24          	mov    %rcx,(%rsp)
            data: unsafe { &mut *self.data.get() },
  206b1f:	48 83 c0 08          	add    $0x8,%rax
  206b23:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  206b28:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  206b2d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  206b32:	48 8b 0c 24          	mov    (%rsp),%rcx
        MutexGuard
  206b36:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  206b3b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  206b40:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  206b45:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  206b4a:	48 83 c4 38          	add    $0x38,%rsp
  206b4e:	c3                   	retq   
  206b4f:	cc                   	int3   

0000000000206b50 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17hec36eaefd6fec6a2E>:
    pub fn lock(&self) -> MutexGuard<T>
  206b50:	48 83 ec 38          	sub    $0x38,%rsp
  206b54:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  206b59:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        self.obtain_lock();
  206b5e:	e8 dd fb ff ff       	callq  206740 <_ZN4spin5mutex14Mutex$LT$T$GT$11obtain_lock17h2581c86e0c11bcbcE>
  206b63:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            lock: &self.lock,
  206b68:	48 89 c1             	mov    %rax,%rcx
  206b6b:	48 89 0c 24          	mov    %rcx,(%rsp)
            data: unsafe { &mut *self.data.get() },
  206b6f:	48 83 c0 08          	add    $0x8,%rax
  206b73:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  206b78:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  206b7d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  206b82:	48 8b 0c 24          	mov    (%rsp),%rcx
        MutexGuard
  206b86:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  206b8b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  206b90:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  206b95:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  206b9a:	48 83 c4 38          	add    $0x38,%rsp
  206b9e:	c3                   	retq   
  206b9f:	cc                   	int3   

0000000000206ba0 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h6438e4ee6feea27dE>:
}

impl<'a, T: ?Sized> Deref for MutexGuard<'a, T>
{
    type Target = T;
    fn deref<'b>(&'b self) -> &'b T { &*self.data }
  206ba0:	50                   	push   %rax
  206ba1:	48 89 3c 24          	mov    %rdi,(%rsp)
  206ba5:	48 8b 47 08          	mov    0x8(%rdi),%rax
  206ba9:	59                   	pop    %rcx
  206baa:	c3                   	retq   
  206bab:	cc                   	int3   
  206bac:	cc                   	int3   
  206bad:	cc                   	int3   
  206bae:	cc                   	int3   
  206baf:	cc                   	int3   

0000000000206bb0 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7e8efa7287244e89E>:
  206bb0:	50                   	push   %rax
  206bb1:	48 89 3c 24          	mov    %rdi,(%rsp)
  206bb5:	48 8b 47 08          	mov    0x8(%rdi),%rax
  206bb9:	59                   	pop    %rcx
  206bba:	c3                   	retq   
  206bbb:	cc                   	int3   
  206bbc:	cc                   	int3   
  206bbd:	cc                   	int3   
  206bbe:	cc                   	int3   
  206bbf:	cc                   	int3   

0000000000206bc0 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h20776941560deab6E>:
}

impl<'a, T: ?Sized> DerefMut for MutexGuard<'a, T>
{
    fn deref_mut<'b>(&'b mut self) -> &'b mut T { &mut *self.data }
  206bc0:	50                   	push   %rax
  206bc1:	48 89 3c 24          	mov    %rdi,(%rsp)
  206bc5:	48 8b 47 08          	mov    0x8(%rdi),%rax
  206bc9:	59                   	pop    %rcx
  206bca:	c3                   	retq   
  206bcb:	cc                   	int3   
  206bcc:	cc                   	int3   
  206bcd:	cc                   	int3   
  206bce:	cc                   	int3   
  206bcf:	cc                   	int3   

0000000000206bd0 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h54ef8133560726b4E>:
  206bd0:	50                   	push   %rax
  206bd1:	48 89 3c 24          	mov    %rdi,(%rsp)
  206bd5:	48 8b 47 08          	mov    0x8(%rdi),%rax
  206bd9:	59                   	pop    %rcx
  206bda:	c3                   	retq   
  206bdb:	cc                   	int3   
  206bdc:	cc                   	int3   
  206bdd:	cc                   	int3   
  206bde:	cc                   	int3   
  206bdf:	cc                   	int3   

0000000000206be0 <_ZN4core3fmt5Write10write_char17h9bab67b7f6efb3c7E>:
    fn write_char(&mut self, c: char) -> Result {
  206be0:	48 83 ec 48          	sub    $0x48,%rsp
  206be4:	89 74 24 1c          	mov    %esi,0x1c(%rsp)
  206be8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  206bed:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  206bf2:	89 74 24 44          	mov    %esi,0x44(%rsp)
        self.write_str(c.encode_utf8(&mut [0; 4]))
  206bf6:	48 8d 7c 24 34       	lea    0x34(%rsp),%rdi
  206bfb:	31 f6                	xor    %esi,%esi
  206bfd:	ba 04 00 00 00       	mov    $0x4,%edx
  206c02:	e8 d9 ac 00 00       	callq  2118e0 <memset>
  206c07:	8b 7c 24 1c          	mov    0x1c(%rsp),%edi
  206c0b:	48 8d 74 24 34       	lea    0x34(%rsp),%rsi
  206c10:	ba 04 00 00 00       	mov    $0x4,%edx
  206c15:	e8 66 2c 00 00       	callq  209880 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$11encode_utf817ha8814ecebb05de4fE>
  206c1a:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  206c1f:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  206c24:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  206c29:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  206c2e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  206c33:	e8 18 31 00 00       	callq  209d50 <_ZN67_$LT$r3_kernel..drivers..uart..UART$u20$as$u20$core..fmt..Write$GT$9write_str17h6dd3433d3a1bef49E>
  206c38:	88 44 24 0f          	mov    %al,0xf(%rsp)
  206c3c:	8a 44 24 0f          	mov    0xf(%rsp),%al
    }
  206c40:	24 01                	and    $0x1,%al
  206c42:	0f b6 c0             	movzbl %al,%eax
  206c45:	48 83 c4 48          	add    $0x48,%rsp
  206c49:	c3                   	retq   
  206c4a:	cc                   	int3   
  206c4b:	cc                   	int3   
  206c4c:	cc                   	int3   
  206c4d:	cc                   	int3   
  206c4e:	cc                   	int3   
  206c4f:	cc                   	int3   

0000000000206c50 <_ZN4core3fmt5Write9write_fmt17ha4961bdedbae3b7aE>:
    fn write_fmt(mut self: &mut Self, args: Arguments<'_>) -> Result {
  206c50:	48 83 ec 48          	sub    $0x48,%rsp
  206c54:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        write(&mut self, args)
  206c59:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
  206c5e:	48 89 04 24          	mov    %rax,(%rsp)
  206c62:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  206c67:	ba 30 00 00 00       	mov    $0x30,%edx
  206c6c:	e8 4f ac 00 00       	callq  2118c0 <memcpy>
  206c71:	48 8b 3c 24          	mov    (%rsp),%rdi
  206c75:	48 8d 35 74 c2 00 00 	lea    0xc274(%rip),%rsi        # 212ef0 <memset+0x1610>
  206c7c:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  206c81:	e8 ba 96 00 00       	callq  210340 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE>
  206c86:	88 44 24 0f          	mov    %al,0xf(%rsp)
  206c8a:	8a 44 24 0f          	mov    0xf(%rsp),%al
    }
  206c8e:	24 01                	and    $0x1,%al
  206c90:	0f b6 c0             	movzbl %al,%eax
  206c93:	48 83 c4 48          	add    $0x48,%rsp
  206c97:	c3                   	retq   
  206c98:	cc                   	int3   
  206c99:	cc                   	int3   
  206c9a:	cc                   	int3   
  206c9b:	cc                   	int3   
  206c9c:	cc                   	int3   
  206c9d:	cc                   	int3   
  206c9e:	cc                   	int3   
  206c9f:	cc                   	int3   

0000000000206ca0 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17hf2c80c0b89e9db1aE>:
    fn write_char(&mut self, c: char) -> Result {
  206ca0:	48 83 ec 18          	sub    $0x18,%rsp
  206ca4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  206ca9:	89 74 24 14          	mov    %esi,0x14(%rsp)
        (**self).write_char(c)
  206cad:	48 8b 3f             	mov    (%rdi),%rdi
  206cb0:	e8 2b ff ff ff       	callq  206be0 <_ZN4core3fmt5Write10write_char17h9bab67b7f6efb3c7E>
  206cb5:	88 44 24 07          	mov    %al,0x7(%rsp)
  206cb9:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  206cbd:	24 01                	and    $0x1,%al
  206cbf:	0f b6 c0             	movzbl %al,%eax
  206cc2:	48 83 c4 18          	add    $0x18,%rsp
  206cc6:	c3                   	retq   
  206cc7:	cc                   	int3   
  206cc8:	cc                   	int3   
  206cc9:	cc                   	int3   
  206cca:	cc                   	int3   
  206ccb:	cc                   	int3   
  206ccc:	cc                   	int3   
  206ccd:	cc                   	int3   
  206cce:	cc                   	int3   
  206ccf:	cc                   	int3   

0000000000206cd0 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h1a9ff4cd2b830013E>:
    fn write_fmt(&mut self, args: Arguments<'_>) -> Result {
  206cd0:	48 83 ec 48          	sub    $0x48,%rsp
  206cd4:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
        (**self).write_fmt(args)
  206cd9:	48 8b 07             	mov    (%rdi),%rax
  206cdc:	48 89 04 24          	mov    %rax,(%rsp)
  206ce0:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  206ce5:	ba 30 00 00 00       	mov    $0x30,%edx
  206cea:	e8 d1 ab 00 00       	callq  2118c0 <memcpy>
  206cef:	48 8b 3c 24          	mov    (%rsp),%rdi
  206cf3:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  206cf8:	e8 53 ff ff ff       	callq  206c50 <_ZN4core3fmt5Write9write_fmt17ha4961bdedbae3b7aE>
  206cfd:	88 44 24 0f          	mov    %al,0xf(%rsp)
  206d01:	8a 44 24 0f          	mov    0xf(%rsp),%al
    }
  206d05:	24 01                	and    $0x1,%al
  206d07:	0f b6 c0             	movzbl %al,%eax
  206d0a:	48 83 c4 48          	add    $0x48,%rsp
  206d0e:	c3                   	retq   
  206d0f:	cc                   	int3   

0000000000206d10 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h5f230e53c2aa2cf4E>:
    fn write_str(&mut self, s: &str) -> Result {
  206d10:	48 83 ec 28          	sub    $0x28,%rsp
  206d14:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  206d19:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  206d1e:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
        (**self).write_str(s)
  206d23:	48 8b 3f             	mov    (%rdi),%rdi
  206d26:	e8 25 30 00 00       	callq  209d50 <_ZN67_$LT$r3_kernel..drivers..uart..UART$u20$as$u20$core..fmt..Write$GT$9write_str17h6dd3433d3a1bef49E>
  206d2b:	88 44 24 0f          	mov    %al,0xf(%rsp)
  206d2f:	8a 44 24 0f          	mov    0xf(%rsp),%al
    }
  206d33:	24 01                	and    $0x1,%al
  206d35:	0f b6 c0             	movzbl %al,%eax
  206d38:	48 83 c4 28          	add    $0x28,%rsp
  206d3c:	c3                   	retq   
  206d3d:	cc                   	int3   
  206d3e:	cc                   	int3   
  206d3f:	cc                   	int3   

0000000000206d40 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17hfe775e20a83bc342E>:
macro_rules! debug {
    ($($T:ident)*) => {$(
        #[stable(feature = "rust1", since = "1.0.0")]
        impl fmt::Debug for $T {
            #[inline]
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  206d40:	48 83 ec 38          	sub    $0x38,%rsp
  206d44:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  206d49:	48 89 f8             	mov    %rdi,%rax
  206d4c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  206d51:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  206d56:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  206d5b:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
                if f.debug_lower_hex() {
  206d60:	e8 db 9f 00 00       	callq  210d40 <_ZN4core3fmt9Formatter15debug_lower_hex17hb64b59229092e7f9E>
  206d65:	88 44 24 26          	mov    %al,0x26(%rsp)
  206d69:	8a 44 24 26          	mov    0x26(%rsp),%al
  206d6d:	a8 01                	test   $0x1,%al
  206d6f:	75 12                	jne    206d83 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17hfe775e20a83bc342E+0x43>
  206d71:	eb 00                	jmp    206d73 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17hfe775e20a83bc342E+0x33>
  206d73:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                    fmt::LowerHex::fmt(self, f)
                } else if f.debug_upper_hex() {
  206d78:	e8 d3 9f 00 00       	callq  210d50 <_ZN4core3fmt9Formatter15debug_upper_hex17h1791008eaa6156e8E>
  206d7d:	88 44 24 0f          	mov    %al,0xf(%rsp)
  206d81:	eb 25                	jmp    206da8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17hfe775e20a83bc342E+0x68>
  206d83:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  206d88:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::LowerHex::fmt(self, f)
  206d8d:	e8 5e 75 00 00       	callq  20e2f0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17he8aeedb5ba5b6efdE>
  206d92:	24 01                	and    $0x1,%al
  206d94:	88 44 24 27          	mov    %al,0x27(%rsp)
                if f.debug_lower_hex() {
  206d98:	eb 00                	jmp    206d9a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17hfe775e20a83bc342E+0x5a>
                    fmt::UpperHex::fmt(self, f)
                } else {
                    fmt::Display::fmt(self, f)
                }
            }
  206d9a:	8a 44 24 27          	mov    0x27(%rsp),%al
  206d9e:	24 01                	and    $0x1,%al
  206da0:	0f b6 c0             	movzbl %al,%eax
  206da3:	48 83 c4 38          	add    $0x38,%rsp
  206da7:	c3                   	retq   
  206da8:	8a 44 24 0f          	mov    0xf(%rsp),%al
                } else if f.debug_upper_hex() {
  206dac:	a8 01                	test   $0x1,%al
  206dae:	75 19                	jne    206dc9 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17hfe775e20a83bc342E+0x89>
  206db0:	eb 00                	jmp    206db2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17hfe775e20a83bc342E+0x72>
  206db2:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  206db7:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::Display::fmt(self, f)
  206dbc:	e8 cf 8f 00 00       	callq  20fd90 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E>
  206dc1:	24 01                	and    $0x1,%al
  206dc3:	88 44 24 27          	mov    %al,0x27(%rsp)
  206dc7:	eb 19                	jmp    206de2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17hfe775e20a83bc342E+0xa2>
  206dc9:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  206dce:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::UpperHex::fmt(self, f)
  206dd3:	e8 b8 75 00 00       	callq  20e390 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hf56a3534b31be474E>
  206dd8:	24 01                	and    $0x1,%al
  206dda:	88 44 24 27          	mov    %al,0x27(%rsp)
                } else if f.debug_upper_hex() {
  206dde:	eb 00                	jmp    206de0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17hfe775e20a83bc342E+0xa0>
                if f.debug_lower_hex() {
  206de0:	eb b8                	jmp    206d9a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17hfe775e20a83bc342E+0x5a>
                } else if f.debug_upper_hex() {
  206de2:	eb fc                	jmp    206de0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17hfe775e20a83bc342E+0xa0>
  206de4:	cc                   	int3   
  206de5:	cc                   	int3   
  206de6:	cc                   	int3   
  206de7:	cc                   	int3   
  206de8:	cc                   	int3   
  206de9:	cc                   	int3   
  206dea:	cc                   	int3   
  206deb:	cc                   	int3   
  206dec:	cc                   	int3   
  206ded:	cc                   	int3   
  206dee:	cc                   	int3   
  206def:	cc                   	int3   

0000000000206df0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h04c8c4937b73abf4E>:
    pub fn empty() -> Self {
  206df0:	48 83 ec 10          	sub    $0x10,%rsp
        InterruptDescriptorEntry {
  206df4:	66 c7 04 24 00 00    	movw   $0x0,(%rsp)
  206dfa:	66 c7 44 24 02 00 00 	movw   $0x0,0x2(%rsp)
  206e01:	66 c7 44 24 04 00 0e 	movw   $0xe00,0x4(%rsp)
  206e08:	66 c7 44 24 06 00 00 	movw   $0x0,0x6(%rsp)
  206e0f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%rsp)
  206e16:	00 
  206e17:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%rsp)
  206e1e:	00 
    }
  206e1f:	48 8b 04 24          	mov    (%rsp),%rax
  206e23:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  206e28:	48 83 c4 10          	add    $0x10,%rsp
  206e2c:	c3                   	retq   
  206e2d:	cc                   	int3   
  206e2e:	cc                   	int3   
  206e2f:	cc                   	int3   

0000000000206e30 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17h630d1891060b21e5E>:
    pub fn empty() -> Self {
  206e30:	48 83 ec 10          	sub    $0x10,%rsp
        InterruptDescriptorEntry {
  206e34:	66 c7 04 24 00 00    	movw   $0x0,(%rsp)
  206e3a:	66 c7 44 24 02 00 00 	movw   $0x0,0x2(%rsp)
  206e41:	66 c7 44 24 04 00 0e 	movw   $0xe00,0x4(%rsp)
  206e48:	66 c7 44 24 06 00 00 	movw   $0x0,0x6(%rsp)
  206e4f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%rsp)
  206e56:	00 
  206e57:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%rsp)
  206e5e:	00 
    }
  206e5f:	48 8b 04 24          	mov    (%rsp),%rax
  206e63:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  206e68:	48 83 c4 10          	add    $0x10,%rsp
  206e6c:	c3                   	retq   
  206e6d:	cc                   	int3   
  206e6e:	cc                   	int3   
  206e6f:	cc                   	int3   

0000000000206e70 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hab90ef8d45026c4fE>:
    pub fn empty() -> Self {
  206e70:	48 83 ec 10          	sub    $0x10,%rsp
        InterruptDescriptorEntry {
  206e74:	66 c7 04 24 00 00    	movw   $0x0,(%rsp)
  206e7a:	66 c7 44 24 02 00 00 	movw   $0x0,0x2(%rsp)
  206e81:	66 c7 44 24 04 00 0e 	movw   $0xe00,0x4(%rsp)
  206e88:	66 c7 44 24 06 00 00 	movw   $0x0,0x6(%rsp)
  206e8f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%rsp)
  206e96:	00 
  206e97:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%rsp)
  206e9e:	00 
    }
  206e9f:	48 8b 04 24          	mov    (%rsp),%rax
  206ea3:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  206ea8:	48 83 c4 10          	add    $0x10,%rsp
  206eac:	c3                   	retq   
  206ead:	cc                   	int3   
  206eae:	cc                   	int3   
  206eaf:	cc                   	int3   

0000000000206eb0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$5empty17hf14332c24ab91231E>:
    pub fn empty() -> Self {
  206eb0:	48 83 ec 10          	sub    $0x10,%rsp
        InterruptDescriptorEntry {
  206eb4:	66 c7 04 24 00 00    	movw   $0x0,(%rsp)
  206eba:	66 c7 44 24 02 00 00 	movw   $0x0,0x2(%rsp)
  206ec1:	66 c7 44 24 04 00 0e 	movw   $0xe00,0x4(%rsp)
  206ec8:	66 c7 44 24 06 00 00 	movw   $0x0,0x6(%rsp)
  206ecf:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%rsp)
  206ed6:	00 
  206ed7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%rsp)
  206ede:	00 
    }
  206edf:	48 8b 04 24          	mov    (%rsp),%rax
  206ee3:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  206ee8:	48 83 c4 10          	add    $0x10,%rsp
  206eec:	c3                   	retq   
  206eed:	cc                   	int3   
  206eee:	cc                   	int3   
  206eef:	cc                   	int3   

0000000000206ef0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$7read_cs17h7f8161d063dd0582E>:
    fn read_cs(&self) -> u16 {
  206ef0:	48 83 ec 18          	sub    $0x18,%rsp
  206ef4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        SegmentRegister::CS.get()
  206ef9:	48 8d 3d 9d 97 ff ff 	lea    -0x6863(%rip),%rdi        # 20069d <_ZN9r3_kernel10boot_proto9BOOT_INFO17h01ac4d2a4df9d266E>
  206f00:	e8 7b c6 ff ff       	callq  203580 <_ZN9r3_kernel3cpu8segments15SegmentRegister3get17h9ff0d933d57839d7E>
  206f05:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  206f0a:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
    }
  206f0f:	48 83 c4 18          	add    $0x18,%rsp
  206f13:	c3                   	retq   
  206f14:	cc                   	int3   
  206f15:	cc                   	int3   
  206f16:	cc                   	int3   
  206f17:	cc                   	int3   
  206f18:	cc                   	int3   
  206f19:	cc                   	int3   
  206f1a:	cc                   	int3   
  206f1b:	cc                   	int3   
  206f1c:	cc                   	int3   
  206f1d:	cc                   	int3   
  206f1e:	cc                   	int3   
  206f1f:	cc                   	int3   

0000000000206f20 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$7read_cs17hb4e7d55b73862266E>:
    fn read_cs(&self) -> u16 {
  206f20:	48 83 ec 18          	sub    $0x18,%rsp
  206f24:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        SegmentRegister::CS.get()
  206f29:	48 8d 3d 6d 97 ff ff 	lea    -0x6893(%rip),%rdi        # 20069d <_ZN9r3_kernel10boot_proto9BOOT_INFO17h01ac4d2a4df9d266E>
  206f30:	e8 4b c6 ff ff       	callq  203580 <_ZN9r3_kernel3cpu8segments15SegmentRegister3get17h9ff0d933d57839d7E>
  206f35:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  206f3a:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
    }
  206f3f:	48 83 c4 18          	add    $0x18,%rsp
  206f43:	c3                   	retq   
  206f44:	cc                   	int3   
  206f45:	cc                   	int3   
  206f46:	cc                   	int3   
  206f47:	cc                   	int3   
  206f48:	cc                   	int3   
  206f49:	cc                   	int3   
  206f4a:	cc                   	int3   
  206f4b:	cc                   	int3   
  206f4c:	cc                   	int3   
  206f4d:	cc                   	int3   
  206f4e:	cc                   	int3   
  206f4f:	cc                   	int3   

0000000000206f50 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$12set_pointers17h5f5959c61bee202dE>:
    fn set_pointers(&mut self, addr: u64) {
  206f50:	48 83 ec 30          	sub    $0x30,%rsp
  206f54:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  206f59:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  206f5e:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  206f63:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
        self.pointer_low = (addr & 0xffff) as u16;
  206f68:	48 89 f0             	mov    %rsi,%rax
  206f6b:	48 25 ff ff 00 00    	and    $0xffff,%rax
  206f71:	66 89 07             	mov    %ax,(%rdi)
        self.pointer_middle = ((addr >> 16) & 0xffff) as u16;
  206f74:	48 c1 ee 10          	shr    $0x10,%rsi
  206f78:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  206f7d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  206f82:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  206f87:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  206f8c:	48 81 e2 ff ff 00 00 	and    $0xffff,%rdx
  206f93:	66 89 51 06          	mov    %dx,0x6(%rcx)
        self.pointer_high = ((addr >> 32) & 0xffffffff) as u32;
  206f97:	48 c1 e8 20          	shr    $0x20,%rax
  206f9b:	48 89 04 24          	mov    %rax,(%rsp)
  206f9f:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  206fa4:	48 8b 0c 24          	mov    (%rsp),%rcx
  206fa8:	48 ba ff ff ff ff 00 	movabs $0xffffffff,%rdx
  206faf:	00 00 00 
  206fb2:	48 21 d1             	and    %rdx,%rcx
  206fb5:	89 48 08             	mov    %ecx,0x8(%rax)
    }
  206fb8:	48 83 c4 30          	add    $0x30,%rsp
  206fbc:	c3                   	retq   
  206fbd:	cc                   	int3   
  206fbe:	cc                   	int3   
  206fbf:	cc                   	int3   

0000000000206fc0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$12set_pointers17hdf329a675328a8f5E>:
    fn set_pointers(&mut self, addr: u64) {
  206fc0:	48 83 ec 30          	sub    $0x30,%rsp
  206fc4:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  206fc9:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  206fce:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  206fd3:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
        self.pointer_low = (addr & 0xffff) as u16;
  206fd8:	48 89 f0             	mov    %rsi,%rax
  206fdb:	48 25 ff ff 00 00    	and    $0xffff,%rax
  206fe1:	66 89 07             	mov    %ax,(%rdi)
        self.pointer_middle = ((addr >> 16) & 0xffff) as u16;
  206fe4:	48 c1 ee 10          	shr    $0x10,%rsi
  206fe8:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  206fed:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  206ff2:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  206ff7:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  206ffc:	48 81 e2 ff ff 00 00 	and    $0xffff,%rdx
  207003:	66 89 51 06          	mov    %dx,0x6(%rcx)
        self.pointer_high = ((addr >> 32) & 0xffffffff) as u32;
  207007:	48 c1 e8 20          	shr    $0x20,%rax
  20700b:	48 89 04 24          	mov    %rax,(%rsp)
  20700f:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  207014:	48 8b 0c 24          	mov    (%rsp),%rcx
  207018:	48 ba ff ff ff ff 00 	movabs $0xffffffff,%rdx
  20701f:	00 00 00 
  207022:	48 21 d1             	and    %rdx,%rcx
  207025:	89 48 08             	mov    %ecx,0x8(%rax)
    }
  207028:	48 83 c4 30          	add    $0x30,%rsp
  20702c:	c3                   	retq   
  20702d:	cc                   	int3   
  20702e:	cc                   	int3   
  20702f:	cc                   	int3   

0000000000207030 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$11set_handler17h87df60b3140f4d6eE>:
    pub fn set_handler(&mut self, handler_address: u64) {
  207030:	48 83 ec 28          	sub    $0x28,%rsp
  207034:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  207039:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20703e:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        self.set_pointers(handler_address);
  207043:	e8 08 ff ff ff       	callq  206f50 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$12set_pointers17h5f5959c61bee202dE>
  207048:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        self.gdt_selector = self.read_cs();
  20704d:	e8 ce fe ff ff       	callq  206f20 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$7read_cs17hb4e7d55b73862266E>
  207052:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  207057:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  20705c:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
  207061:	66 89 47 02          	mov    %ax,0x2(%rdi)
        self.options.set_bit(15, true);
  207065:	48 83 c7 04          	add    $0x4,%rdi
  207069:	be 0f 00 00 00       	mov    $0xf,%esi
  20706e:	ba 01 00 00 00       	mov    $0x1,%edx
  207073:	e8 d8 c2 ff ff       	callq  203350 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4f6f716800d15974E>
    }
  207078:	48 83 c4 28          	add    $0x28,%rsp
  20707c:	c3                   	retq   
  20707d:	cc                   	int3   
  20707e:	cc                   	int3   
  20707f:	cc                   	int3   

0000000000207080 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$11set_handler17hf33eac12f7d04705E>:
    pub fn set_handler(&mut self, handler_address: u64) {
  207080:	48 83 ec 28          	sub    $0x28,%rsp
  207084:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  207089:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20708e:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        self.set_pointers(handler_address);
  207093:	e8 28 ff ff ff       	callq  206fc0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$12set_pointers17hdf329a675328a8f5E>
  207098:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        self.gdt_selector = self.read_cs();
  20709d:	e8 4e fe ff ff       	callq  206ef0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$7read_cs17h7f8161d063dd0582E>
  2070a2:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  2070a7:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  2070ac:	66 8b 44 24 0e       	mov    0xe(%rsp),%ax
  2070b1:	66 89 47 02          	mov    %ax,0x2(%rdi)
        self.options.set_bit(15, true);
  2070b5:	48 83 c7 04          	add    $0x4,%rdi
  2070b9:	be 0f 00 00 00       	mov    $0xf,%esi
  2070be:	ba 01 00 00 00       	mov    $0x1,%edx
  2070c3:	e8 88 c2 ff ff       	callq  203350 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$7set_bit17h4f6f716800d15974E>
    }
  2070c8:	48 83 c4 28          	add    $0x28,%rsp
  2070cc:	c3                   	retq   
  2070cd:	cc                   	int3   
  2070ce:	cc                   	int3   
  2070cf:	cc                   	int3   

00000000002070d0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$15set_stack_index17h8c751100918cb978E>:
    pub fn set_stack_index(&mut self, stack_index: u16) {
  2070d0:	48 83 ec 38          	sub    $0x38,%rsp
  2070d4:	66 89 f0             	mov    %si,%ax
  2070d7:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  2070dc:	66 89 44 24 36       	mov    %ax,0x36(%rsp)
        self.options.set_bits(0..3, stack_index + 1);
  2070e1:	48 83 c7 04          	add    $0x4,%rdi
  2070e5:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2070ea:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
  2070f1:	00 00 
  2070f3:	48 c7 44 24 20 03 00 	movq   $0x3,0x20(%rsp)
  2070fa:	00 00 
  2070fc:	66 83 c0 01          	add    $0x1,%ax
  207100:	66 89 44 24 16       	mov    %ax,0x16(%rsp)
  207105:	0f 92 c0             	setb   %al
  207108:	a8 01                	test   $0x1,%al
  20710a:	75 1e                	jne    20712a <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$15set_stack_index17h8c751100918cb978E+0x5a>
  20710c:	66 8b 44 24 16       	mov    0x16(%rsp),%ax
  207111:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  207116:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  20711b:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  207120:	0f b7 c8             	movzwl %ax,%ecx
  207123:	e8 48 0f 00 00       	callq  208070 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE>
  207128:	eb 1a                	jmp    207144 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$15set_stack_index17h8c751100918cb978E+0x74>
  20712a:	48 8d 3d 8f 95 ff ff 	lea    -0x6a71(%rip),%rdi        # 2006c0 <str.0>
  207131:	48 8d 15 e8 bd 00 00 	lea    0xbde8(%rip),%rdx        # 212f20 <memset+0x1640>
  207138:	be 1c 00 00 00       	mov    $0x1c,%esi
  20713d:	e8 4e 7d 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  207142:	0f 0b                	ud2    
    }
  207144:	48 83 c4 38          	add    $0x38,%rsp
  207148:	c3                   	retq   
  207149:	cc                   	int3   
  20714a:	cc                   	int3   
  20714b:	cc                   	int3   
  20714c:	cc                   	int3   
  20714d:	cc                   	int3   
  20714e:	cc                   	int3   
  20714f:	cc                   	int3   

0000000000207150 <_ZN4spin4once13Once$LT$T$GT$9call_once17h52946531d93d03a6E>:
    /// fn expensive_computation() -> usize {
    ///     // ...
    /// # 2
    /// }
    /// ```
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  207150:	48 81 ec 58 01 00 00 	sub    $0x158,%rsp
  207157:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  20715c:	48 89 bc 24 40 01 00 	mov    %rdi,0x140(%rsp)
  207163:	00 
                // This next line is strictly an optimization
                return self.force_get();
            }
        }

        loop {
  207164:	c6 84 24 3f 01 00 00 	movb   $0x0,0x13f(%rsp)
  20716b:	00 
  20716c:	c6 84 24 3f 01 00 00 	movb   $0x1,0x13f(%rsp)
  207173:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  207174:	c6 44 24 4e 04       	movb   $0x4,0x4e(%rsp)
  207179:	0f b6 74 24 4e       	movzbl 0x4e(%rsp),%esi
  20717e:	e8 4d 37 00 00       	callq  20a8d0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  207183:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        if status == INCOMPLETE {
  207188:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  20718e:	74 29                	je     2071b9 <_ZN4spin4once13Once$LT$T$GT$9call_once17h52946531d93d03a6E+0x69>
            match status {
  207190:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  207195:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20719a:	48 83 e8 03          	sub    $0x3,%rax
  20719e:	0f 87 15 01 00 00    	ja     2072b9 <_ZN4spin4once13Once$LT$T$GT$9call_once17h52946531d93d03a6E+0x169>
  2071a4:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  2071a9:	48 8d 0d 2c 95 ff ff 	lea    -0x6ad4(%rip),%rcx        # 2006dc <str.0+0x1c>
  2071b0:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  2071b4:	48 01 c8             	add    %rcx,%rax
  2071b7:	ff e0                	jmpq   *%rax
  2071b9:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                                                 Ordering::SeqCst);
  2071be:	c6 44 24 4f 04       	movb   $0x4,0x4f(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  2071c3:	31 c0                	xor    %eax,%eax
  2071c5:	89 c6                	mov    %eax,%esi
  2071c7:	ba 01 00 00 00       	mov    $0x1,%edx
  2071cc:	0f b6 4c 24 4f       	movzbl 0x4f(%rsp),%ecx
  2071d1:	e8 da 35 00 00       	callq  20a7b0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h6b6a92d7904b1f4dE>
  2071d6:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2071db:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2071e0:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            if status == INCOMPLETE { // We init
  2071e5:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  2071eb:	75 a3                	jne    207190 <_ZN4spin4once13Once$LT$T$GT$9call_once17h52946531d93d03a6E+0x40>
  2071ed:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  2071f2:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  2071f7:	c6 44 24 58 01       	movb   $0x1,0x58(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  2071fc:	c6 84 24 3f 01 00 00 	movb   $0x0,0x13f(%rsp)
  207203:	00 
  207204:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  20720b:	00 
  20720c:	e8 4f 4a 00 00       	callq  20bc60 <_ZN4core3ops8function6FnOnce9call_once17h9f4a139d2a8e95dbE>
  207211:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  207216:	48 83 c7 01          	add    $0x1,%rdi
  20721a:	48 8d b4 24 d0 00 00 	lea    0xd0(%rsp),%rsi
  207221:	00 
  207222:	ba 68 00 00 00       	mov    $0x68,%edx
  207227:	e8 94 a6 00 00       	callq  2118c0 <memcpy>
  20722c:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  207231:	c6 44 24 60 01       	movb   $0x1,0x60(%rsp)
  207236:	48 83 c0 08          	add    $0x8,%rax
  20723a:	48 89 84 24 50 01 00 	mov    %rax,0x150(%rsp)
  207241:	00 
  207242:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  207247:	eb 00                	jmp    207249 <_ZN4spin4once13Once$LT$T$GT$9call_once17h52946531d93d03a6E+0xf9>
  207249:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  20724e:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
  207253:	ba 69 00 00 00       	mov    $0x69,%edx
  207258:	e8 63 a6 00 00       	callq  2118c0 <memcpy>
  20725d:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                finish.panicked = false;
  207262:	c6 44 24 58 00       	movb   $0x0,0x58(%rsp)
                status = COMPLETE;
  207267:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  20726e:	00 00 
                self.state.store(status, Ordering::SeqCst);
  207270:	c6 84 24 3d 01 00 00 	movb   $0x4,0x13d(%rsp)
  207277:	04 
  207278:	be 02 00 00 00       	mov    $0x2,%esi
  20727d:	0f b6 94 24 3d 01 00 	movzbl 0x13d(%rsp),%edx
  207284:	00 
  207285:	e8 86 36 00 00       	callq  20a910 <_ZN4core4sync6atomic11AtomicUsize5store17h5dd1fdb8f532295fE>
  20728a:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                return self.force_get();
  20728f:	e8 ec 09 00 00       	callq  207c80 <_ZN4spin4once13Once$LT$T$GT$9force_get17h80bad03012130c6bE>
  207294:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  207299:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20729e:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            }
  2072a3:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  2072a8:	e8 d3 4a 00 00       	callq  20bd80 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h93a754bf50e05e07E>
                PANICKED => panic!("Once has panicked"),
                COMPLETE => return self.force_get(),
                _ => unsafe { unreachable() },
            }
        }
    }
  2072ad:	f6 84 24 3f 01 00 00 	testb  $0x1,0x13f(%rsp)
  2072b4:	01 
  2072b5:	75 6c                	jne    207323 <_ZN4spin4once13Once$LT$T$GT$9call_once17h52946531d93d03a6E+0x1d3>
  2072b7:	eb 5d                	jmp    207316 <_ZN4spin4once13Once$LT$T$GT$9call_once17h52946531d93d03a6E+0x1c6>
                _ => unsafe { unreachable() },
  2072b9:	e8 62 49 00 00       	callq  20bc20 <_ZN4core4hint21unreachable_unchecked17he3b397bdcee5fea3E>
  2072be:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  2072c0:	48 8d 3d cc 94 ff ff 	lea    -0x6b34(%rip),%rdi        # 200793 <str.0+0xd3>
  2072c7:	48 8d 15 82 bc 00 00 	lea    0xbc82(%rip),%rdx        # 212f50 <memset+0x1670>
  2072ce:	be 28 00 00 00       	mov    $0x28,%esi
  2072d3:	e8 b8 7b 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2072d8:	0f 0b                	ud2    
                    cpu_relax();
  2072da:	e8 71 36 00 00       	callq  20a950 <_ZN4core4sync6atomic14spin_loop_hint17h92421a221054ae95E>
  2072df:	eb 44                	jmp    207325 <_ZN4spin4once13Once$LT$T$GT$9call_once17h52946531d93d03a6E+0x1d5>
                PANICKED => panic!("Once has panicked"),
  2072e1:	48 8d 3d 44 94 ff ff 	lea    -0x6bbc(%rip),%rdi        # 20072c <str.0+0x6c>
  2072e8:	48 8d 15 49 bc 00 00 	lea    0xbc49(%rip),%rdx        # 212f38 <memset+0x1658>
  2072ef:	be 11 00 00 00       	mov    $0x11,%esi
  2072f4:	e8 97 7b 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2072f9:	0f 0b                	ud2    
  2072fb:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                COMPLETE => return self.force_get(),
  207300:	e8 7b 09 00 00       	callq  207c80 <_ZN4spin4once13Once$LT$T$GT$9force_get17h80bad03012130c6bE>
  207305:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20730a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20730f:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  207314:	eb 97                	jmp    2072ad <_ZN4spin4once13Once$LT$T$GT$9call_once17h52946531d93d03a6E+0x15d>
    }
  207316:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20731b:	48 81 c4 58 01 00 00 	add    $0x158,%rsp
  207322:	c3                   	retq   
  207323:	eb f1                	jmp    207316 <_ZN4spin4once13Once$LT$T$GT$9call_once17h52946531d93d03a6E+0x1c6>
  207325:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  20732a:	c6 84 24 3e 01 00 00 	movb   $0x4,0x13e(%rsp)
  207331:	04 
  207332:	0f b6 b4 24 3e 01 00 	movzbl 0x13e(%rsp),%esi
  207339:	00 
  20733a:	e8 91 35 00 00       	callq  20a8d0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  20733f:	48 89 04 24          	mov    %rax,(%rsp)
  207343:	48 8b 04 24          	mov    (%rsp),%rax
  207347:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20734c:	e9 3f fe ff ff       	jmpq   207190 <_ZN4spin4once13Once$LT$T$GT$9call_once17h52946531d93d03a6E+0x40>
  207351:	cc                   	int3   
  207352:	cc                   	int3   
  207353:	cc                   	int3   
  207354:	cc                   	int3   
  207355:	cc                   	int3   
  207356:	cc                   	int3   
  207357:	cc                   	int3   
  207358:	cc                   	int3   
  207359:	cc                   	int3   
  20735a:	cc                   	int3   
  20735b:	cc                   	int3   
  20735c:	cc                   	int3   
  20735d:	cc                   	int3   
  20735e:	cc                   	int3   
  20735f:	cc                   	int3   

0000000000207360 <_ZN4spin4once13Once$LT$T$GT$9call_once17h8104c9757455a476E>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  207360:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
  207367:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  20736c:	48 89 bc 24 d0 00 00 	mov    %rdi,0xd0(%rsp)
  207373:	00 
        loop {
  207374:	c6 84 24 cf 00 00 00 	movb   $0x0,0xcf(%rsp)
  20737b:	00 
  20737c:	c6 84 24 cf 00 00 00 	movb   $0x1,0xcf(%rsp)
  207383:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  207384:	c6 44 24 56 04       	movb   $0x4,0x56(%rsp)
  207389:	0f b6 74 24 56       	movzbl 0x56(%rsp),%esi
  20738e:	e8 3d 35 00 00       	callq  20a8d0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  207393:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
        if status == INCOMPLETE {
  207398:	48 83 7c 24 48 00    	cmpq   $0x0,0x48(%rsp)
  20739e:	74 29                	je     2073c9 <_ZN4spin4once13Once$LT$T$GT$9call_once17h8104c9757455a476E+0x69>
            match status {
  2073a0:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  2073a5:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2073aa:	48 83 e8 03          	sub    $0x3,%rax
  2073ae:	0f 87 0c 01 00 00    	ja     2074c0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h8104c9757455a476E+0x160>
  2073b4:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  2073b9:	48 8d 0d 2c 93 ff ff 	lea    -0x6cd4(%rip),%rcx        # 2006ec <str.0+0x2c>
  2073c0:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  2073c4:	48 01 c8             	add    %rcx,%rax
  2073c7:	ff e0                	jmpq   *%rax
  2073c9:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                                                 Ordering::SeqCst);
  2073ce:	c6 44 24 57 04       	movb   $0x4,0x57(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  2073d3:	31 c0                	xor    %eax,%eax
  2073d5:	89 c6                	mov    %eax,%esi
  2073d7:	ba 01 00 00 00       	mov    $0x1,%edx
  2073dc:	0f b6 4c 24 57       	movzbl 0x57(%rsp),%ecx
  2073e1:	e8 ca 33 00 00       	callq  20a7b0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h6b6a92d7904b1f4dE>
  2073e6:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2073eb:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  2073f0:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
            if status == INCOMPLETE { // We init
  2073f5:	48 83 7c 24 48 00    	cmpq   $0x0,0x48(%rsp)
  2073fb:	75 a3                	jne    2073a0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h8104c9757455a476E+0x40>
  2073fd:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  207402:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  207407:	c6 44 24 60 01       	movb   $0x1,0x60(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  20740c:	c6 84 24 cf 00 00 00 	movb   $0x0,0xcf(%rsp)
  207413:	00 
  207414:	48 8d bc 24 98 00 00 	lea    0x98(%rsp),%rdi
  20741b:	00 
  20741c:	e8 ef 48 00 00       	callq  20bd10 <_ZN4core3ops8function6FnOnce9call_once17he9df15db724f2edfE>
  207421:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  207426:	48 8d b4 24 98 00 00 	lea    0x98(%rsp),%rsi
  20742d:	00 
  20742e:	ba 30 00 00 00       	mov    $0x30,%edx
  207433:	e8 88 a4 00 00       	callq  2118c0 <memcpy>
  207438:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20743d:	48 83 c0 08          	add    $0x8,%rax
  207441:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  207448:	00 
  207449:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20744e:	eb 00                	jmp    207450 <_ZN4spin4once13Once$LT$T$GT$9call_once17h8104c9757455a476E+0xf0>
  207450:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  207455:	48 8d 74 24 68       	lea    0x68(%rsp),%rsi
  20745a:	ba 30 00 00 00       	mov    $0x30,%edx
  20745f:	e8 5c a4 00 00       	callq  2118c0 <memcpy>
  207464:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                finish.panicked = false;
  207469:	c6 44 24 60 00       	movb   $0x0,0x60(%rsp)
                status = COMPLETE;
  20746e:	48 c7 44 24 48 02 00 	movq   $0x2,0x48(%rsp)
  207475:	00 00 
                self.state.store(status, Ordering::SeqCst);
  207477:	c6 84 24 cd 00 00 00 	movb   $0x4,0xcd(%rsp)
  20747e:	04 
  20747f:	be 02 00 00 00       	mov    $0x2,%esi
  207484:	0f b6 94 24 cd 00 00 	movzbl 0xcd(%rsp),%edx
  20748b:	00 
  20748c:	e8 7f 34 00 00       	callq  20a910 <_ZN4core4sync6atomic11AtomicUsize5store17h5dd1fdb8f532295fE>
  207491:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                return self.force_get();
  207496:	e8 95 08 00 00       	callq  207d30 <_ZN4spin4once13Once$LT$T$GT$9force_get17hfb11ec1bc47b8f8eE>
  20749b:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2074a0:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  2074a5:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            }
  2074aa:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  2074af:	e8 cc 48 00 00       	callq  20bd80 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h93a754bf50e05e07E>
    }
  2074b4:	f6 84 24 cf 00 00 00 	testb  $0x1,0xcf(%rsp)
  2074bb:	01 
  2074bc:	75 6c                	jne    20752a <_ZN4spin4once13Once$LT$T$GT$9call_once17h8104c9757455a476E+0x1ca>
  2074be:	eb 5d                	jmp    20751d <_ZN4spin4once13Once$LT$T$GT$9call_once17h8104c9757455a476E+0x1bd>
                _ => unsafe { unreachable() },
  2074c0:	e8 5b 47 00 00       	callq  20bc20 <_ZN4core4hint21unreachable_unchecked17he3b397bdcee5fea3E>
  2074c5:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  2074c7:	48 8d 3d c5 92 ff ff 	lea    -0x6d3b(%rip),%rdi        # 200793 <str.0+0xd3>
  2074ce:	48 8d 15 7b ba 00 00 	lea    0xba7b(%rip),%rdx        # 212f50 <memset+0x1670>
  2074d5:	be 28 00 00 00       	mov    $0x28,%esi
  2074da:	e8 b1 79 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2074df:	0f 0b                	ud2    
                    cpu_relax();
  2074e1:	e8 6a 34 00 00       	callq  20a950 <_ZN4core4sync6atomic14spin_loop_hint17h92421a221054ae95E>
  2074e6:	eb 44                	jmp    20752c <_ZN4spin4once13Once$LT$T$GT$9call_once17h8104c9757455a476E+0x1cc>
                PANICKED => panic!("Once has panicked"),
  2074e8:	48 8d 3d 3d 92 ff ff 	lea    -0x6dc3(%rip),%rdi        # 20072c <str.0+0x6c>
  2074ef:	48 8d 15 42 ba 00 00 	lea    0xba42(%rip),%rdx        # 212f38 <memset+0x1658>
  2074f6:	be 11 00 00 00       	mov    $0x11,%esi
  2074fb:	e8 90 79 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  207500:	0f 0b                	ud2    
  207502:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                COMPLETE => return self.force_get(),
  207507:	e8 24 08 00 00       	callq  207d30 <_ZN4spin4once13Once$LT$T$GT$9force_get17hfb11ec1bc47b8f8eE>
  20750c:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  207511:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  207516:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20751b:	eb 97                	jmp    2074b4 <_ZN4spin4once13Once$LT$T$GT$9call_once17h8104c9757455a476E+0x154>
    }
  20751d:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  207522:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
  207529:	c3                   	retq   
  20752a:	eb f1                	jmp    20751d <_ZN4spin4once13Once$LT$T$GT$9call_once17h8104c9757455a476E+0x1bd>
  20752c:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  207531:	c6 84 24 ce 00 00 00 	movb   $0x4,0xce(%rsp)
  207538:	04 
  207539:	0f b6 b4 24 ce 00 00 	movzbl 0xce(%rsp),%esi
  207540:	00 
  207541:	e8 8a 33 00 00       	callq  20a8d0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  207546:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20754b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  207550:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  207555:	e9 46 fe ff ff       	jmpq   2073a0 <_ZN4spin4once13Once$LT$T$GT$9call_once17h8104c9757455a476E+0x40>
  20755a:	cc                   	int3   
  20755b:	cc                   	int3   
  20755c:	cc                   	int3   
  20755d:	cc                   	int3   
  20755e:	cc                   	int3   
  20755f:	cc                   	int3   

0000000000207560 <_ZN4spin4once13Once$LT$T$GT$9call_once17hacbad4e30be1d63fE>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  207560:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
  207567:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  20756c:	48 89 bc 24 a0 00 00 	mov    %rdi,0xa0(%rsp)
  207573:	00 
        loop {
  207574:	c6 84 24 9f 00 00 00 	movb   $0x0,0x9f(%rsp)
  20757b:	00 
  20757c:	c6 84 24 9f 00 00 00 	movb   $0x1,0x9f(%rsp)
  207583:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  207584:	c6 44 24 4e 04       	movb   $0x4,0x4e(%rsp)
  207589:	0f b6 74 24 4e       	movzbl 0x4e(%rsp),%esi
  20758e:	e8 3d 33 00 00       	callq  20a8d0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  207593:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        if status == INCOMPLETE {
  207598:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  20759e:	74 29                	je     2075c9 <_ZN4spin4once13Once$LT$T$GT$9call_once17hacbad4e30be1d63fE+0x69>
            match status {
  2075a0:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  2075a5:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2075aa:	48 83 e8 03          	sub    $0x3,%rax
  2075ae:	0f 87 39 01 00 00    	ja     2076ed <_ZN4spin4once13Once$LT$T$GT$9call_once17hacbad4e30be1d63fE+0x18d>
  2075b4:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  2075b9:	48 8d 0d 3c 91 ff ff 	lea    -0x6ec4(%rip),%rcx        # 2006fc <str.0+0x3c>
  2075c0:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  2075c4:	48 01 c8             	add    %rcx,%rax
  2075c7:	ff e0                	jmpq   *%rax
  2075c9:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                                                 Ordering::SeqCst);
  2075ce:	c6 44 24 4f 04       	movb   $0x4,0x4f(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  2075d3:	31 c0                	xor    %eax,%eax
  2075d5:	89 c6                	mov    %eax,%esi
  2075d7:	ba 01 00 00 00       	mov    $0x1,%edx
  2075dc:	0f b6 4c 24 4f       	movzbl 0x4f(%rsp),%ecx
  2075e1:	e8 ca 31 00 00       	callq  20a7b0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h6b6a92d7904b1f4dE>
  2075e6:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2075eb:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2075f0:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            if status == INCOMPLETE { // We init
  2075f5:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  2075fb:	75 a3                	jne    2075a0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hacbad4e30be1d63fE+0x40>
  2075fd:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  207602:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  207607:	c6 44 24 58 01       	movb   $0x1,0x58(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  20760c:	c6 84 24 9f 00 00 00 	movb   $0x0,0x9f(%rsp)
  207613:	00 
  207614:	48 8d bc 24 80 00 00 	lea    0x80(%rsp),%rdi
  20761b:	00 
  20761c:	e8 9f 46 00 00       	callq  20bcc0 <_ZN4core3ops8function6FnOnce9call_once17hc3c97168e4cb6453E>
  207621:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  207626:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  20762d:	00 
  20762e:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  207633:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  20763a:	00 
  20763b:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
  207640:	48 8b 8c 24 90 00 00 	mov    0x90(%rsp),%rcx
  207647:	00 
  207648:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
  20764d:	48 c7 44 24 60 01 00 	movq   $0x1,0x60(%rsp)
  207654:	00 00 
  207656:	48 83 c0 08          	add    $0x8,%rax
  20765a:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  207661:	00 
  207662:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  207667:	eb 00                	jmp    207669 <_ZN4spin4once13Once$LT$T$GT$9call_once17hacbad4e30be1d63fE+0x109>
  207669:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  20766e:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  207673:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  207678:	48 89 08             	mov    %rcx,(%rax)
  20767b:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
  207680:	48 89 48 08          	mov    %rcx,0x8(%rax)
  207684:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  207689:	48 89 48 10          	mov    %rcx,0x10(%rax)
  20768d:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
  207692:	48 89 48 18          	mov    %rcx,0x18(%rax)
                finish.panicked = false;
  207696:	c6 44 24 58 00       	movb   $0x0,0x58(%rsp)
                status = COMPLETE;
  20769b:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  2076a2:	00 00 
                self.state.store(status, Ordering::SeqCst);
  2076a4:	c6 84 24 9d 00 00 00 	movb   $0x4,0x9d(%rsp)
  2076ab:	04 
  2076ac:	be 02 00 00 00       	mov    $0x2,%esi
  2076b1:	0f b6 94 24 9d 00 00 	movzbl 0x9d(%rsp),%edx
  2076b8:	00 
  2076b9:	e8 52 32 00 00       	callq  20a910 <_ZN4core4sync6atomic11AtomicUsize5store17h5dd1fdb8f532295fE>
  2076be:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                return self.force_get();
  2076c3:	e8 f8 04 00 00       	callq  207bc0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h0bc0d9e39a1abc36E>
  2076c8:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2076cd:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2076d2:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            }
  2076d7:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  2076dc:	e8 9f 46 00 00       	callq  20bd80 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h93a754bf50e05e07E>
    }
  2076e1:	f6 84 24 9f 00 00 00 	testb  $0x1,0x9f(%rsp)
  2076e8:	01 
  2076e9:	75 6c                	jne    207757 <_ZN4spin4once13Once$LT$T$GT$9call_once17hacbad4e30be1d63fE+0x1f7>
  2076eb:	eb 5d                	jmp    20774a <_ZN4spin4once13Once$LT$T$GT$9call_once17hacbad4e30be1d63fE+0x1ea>
                _ => unsafe { unreachable() },
  2076ed:	e8 2e 45 00 00       	callq  20bc20 <_ZN4core4hint21unreachable_unchecked17he3b397bdcee5fea3E>
  2076f2:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  2076f4:	48 8d 3d 98 90 ff ff 	lea    -0x6f68(%rip),%rdi        # 200793 <str.0+0xd3>
  2076fb:	48 8d 15 4e b8 00 00 	lea    0xb84e(%rip),%rdx        # 212f50 <memset+0x1670>
  207702:	be 28 00 00 00       	mov    $0x28,%esi
  207707:	e8 84 77 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20770c:	0f 0b                	ud2    
                    cpu_relax();
  20770e:	e8 3d 32 00 00       	callq  20a950 <_ZN4core4sync6atomic14spin_loop_hint17h92421a221054ae95E>
  207713:	eb 44                	jmp    207759 <_ZN4spin4once13Once$LT$T$GT$9call_once17hacbad4e30be1d63fE+0x1f9>
                PANICKED => panic!("Once has panicked"),
  207715:	48 8d 3d 10 90 ff ff 	lea    -0x6ff0(%rip),%rdi        # 20072c <str.0+0x6c>
  20771c:	48 8d 15 15 b8 00 00 	lea    0xb815(%rip),%rdx        # 212f38 <memset+0x1658>
  207723:	be 11 00 00 00       	mov    $0x11,%esi
  207728:	e8 63 77 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20772d:	0f 0b                	ud2    
  20772f:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                COMPLETE => return self.force_get(),
  207734:	e8 87 04 00 00       	callq  207bc0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h0bc0d9e39a1abc36E>
  207739:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20773e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  207743:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  207748:	eb 97                	jmp    2076e1 <_ZN4spin4once13Once$LT$T$GT$9call_once17hacbad4e30be1d63fE+0x181>
    }
  20774a:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20774f:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
  207756:	c3                   	retq   
  207757:	eb f1                	jmp    20774a <_ZN4spin4once13Once$LT$T$GT$9call_once17hacbad4e30be1d63fE+0x1ea>
  207759:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  20775e:	c6 84 24 9e 00 00 00 	movb   $0x4,0x9e(%rsp)
  207765:	04 
  207766:	0f b6 b4 24 9e 00 00 	movzbl 0x9e(%rsp),%esi
  20776d:	00 
  20776e:	e8 5d 31 00 00       	callq  20a8d0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  207773:	48 89 04 24          	mov    %rax,(%rsp)
  207777:	48 8b 04 24          	mov    (%rsp),%rax
  20777b:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  207780:	e9 1b fe ff ff       	jmpq   2075a0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hacbad4e30be1d63fE+0x40>
  207785:	cc                   	int3   
  207786:	cc                   	int3   
  207787:	cc                   	int3   
  207788:	cc                   	int3   
  207789:	cc                   	int3   
  20778a:	cc                   	int3   
  20778b:	cc                   	int3   
  20778c:	cc                   	int3   
  20778d:	cc                   	int3   
  20778e:	cc                   	int3   
  20778f:	cc                   	int3   

0000000000207790 <_ZN4spin4once13Once$LT$T$GT$9call_once17hf43756d4812a151fE>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  207790:	48 81 ec 28 01 00 00 	sub    $0x128,%rsp
  207797:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  20779c:	48 89 bc 24 10 01 00 	mov    %rdi,0x110(%rsp)
  2077a3:	00 
        loop {
  2077a4:	c6 84 24 0f 01 00 00 	movb   $0x0,0x10f(%rsp)
  2077ab:	00 
  2077ac:	c6 84 24 0f 01 00 00 	movb   $0x1,0x10f(%rsp)
  2077b3:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  2077b4:	c6 44 24 4e 04       	movb   $0x4,0x4e(%rsp)
  2077b9:	0f b6 74 24 4e       	movzbl 0x4e(%rsp),%esi
  2077be:	e8 0d 31 00 00       	callq  20a8d0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  2077c3:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        if status == INCOMPLETE {
  2077c8:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  2077ce:	74 29                	je     2077f9 <_ZN4spin4once13Once$LT$T$GT$9call_once17hf43756d4812a151fE+0x69>
            match status {
  2077d0:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  2077d5:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2077da:	48 83 e8 03          	sub    $0x3,%rax
  2077de:	0f 87 19 01 00 00    	ja     2078fd <_ZN4spin4once13Once$LT$T$GT$9call_once17hf43756d4812a151fE+0x16d>
  2077e4:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  2077e9:	48 8d 0d 1c 8f ff ff 	lea    -0x70e4(%rip),%rcx        # 20070c <str.0+0x4c>
  2077f0:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  2077f4:	48 01 c8             	add    %rcx,%rax
  2077f7:	ff e0                	jmpq   *%rax
  2077f9:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                                                 Ordering::SeqCst);
  2077fe:	c6 44 24 4f 04       	movb   $0x4,0x4f(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  207803:	31 c0                	xor    %eax,%eax
  207805:	89 c6                	mov    %eax,%esi
  207807:	ba 01 00 00 00       	mov    $0x1,%edx
  20780c:	0f b6 4c 24 4f       	movzbl 0x4f(%rsp),%ecx
  207811:	e8 9a 2f 00 00       	callq  20a7b0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h6b6a92d7904b1f4dE>
  207816:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20781b:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  207820:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            if status == INCOMPLETE { // We init
  207825:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  20782b:	75 a3                	jne    2077d0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hf43756d4812a151fE+0x40>
  20782d:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  207832:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  207837:	c6 44 24 58 01       	movb   $0x1,0x58(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  20783c:	c6 84 24 0f 01 00 00 	movb   $0x0,0x10f(%rsp)
  207843:	00 
  207844:	48 8d bc 24 b8 00 00 	lea    0xb8(%rsp),%rdi
  20784b:	00 
  20784c:	e8 9f 44 00 00       	callq  20bcf0 <_ZN4core3ops8function6FnOnce9call_once17hd8afbc9466c583faE>
  207851:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  207856:	48 83 c7 08          	add    $0x8,%rdi
  20785a:	48 8d b4 24 b8 00 00 	lea    0xb8(%rsp),%rsi
  207861:	00 
  207862:	ba 50 00 00 00       	mov    $0x50,%edx
  207867:	e8 54 a0 00 00       	callq  2118c0 <memcpy>
  20786c:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  207871:	48 c7 44 24 60 01 00 	movq   $0x1,0x60(%rsp)
  207878:	00 00 
  20787a:	48 83 c0 08          	add    $0x8,%rax
  20787e:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
  207885:	00 
  207886:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20788b:	eb 00                	jmp    20788d <_ZN4spin4once13Once$LT$T$GT$9call_once17hf43756d4812a151fE+0xfd>
  20788d:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  207892:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
  207897:	ba 58 00 00 00       	mov    $0x58,%edx
  20789c:	e8 1f a0 00 00       	callq  2118c0 <memcpy>
  2078a1:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                finish.panicked = false;
  2078a6:	c6 44 24 58 00       	movb   $0x0,0x58(%rsp)
                status = COMPLETE;
  2078ab:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  2078b2:	00 00 
                self.state.store(status, Ordering::SeqCst);
  2078b4:	c6 84 24 0d 01 00 00 	movb   $0x4,0x10d(%rsp)
  2078bb:	04 
  2078bc:	be 02 00 00 00       	mov    $0x2,%esi
  2078c1:	0f b6 94 24 0d 01 00 	movzbl 0x10d(%rsp),%edx
  2078c8:	00 
  2078c9:	e8 42 30 00 00       	callq  20a910 <_ZN4core4sync6atomic11AtomicUsize5store17h5dd1fdb8f532295fE>
  2078ce:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                return self.force_get();
  2078d3:	e8 48 03 00 00       	callq  207c20 <_ZN4spin4once13Once$LT$T$GT$9force_get17h3fb2850392a2340eE>
  2078d8:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2078dd:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2078e2:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            }
  2078e7:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  2078ec:	e8 8f 44 00 00       	callq  20bd80 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h93a754bf50e05e07E>
    }
  2078f1:	f6 84 24 0f 01 00 00 	testb  $0x1,0x10f(%rsp)
  2078f8:	01 
  2078f9:	75 6c                	jne    207967 <_ZN4spin4once13Once$LT$T$GT$9call_once17hf43756d4812a151fE+0x1d7>
  2078fb:	eb 5d                	jmp    20795a <_ZN4spin4once13Once$LT$T$GT$9call_once17hf43756d4812a151fE+0x1ca>
                _ => unsafe { unreachable() },
  2078fd:	e8 1e 43 00 00       	callq  20bc20 <_ZN4core4hint21unreachable_unchecked17he3b397bdcee5fea3E>
  207902:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  207904:	48 8d 3d 88 8e ff ff 	lea    -0x7178(%rip),%rdi        # 200793 <str.0+0xd3>
  20790b:	48 8d 15 3e b6 00 00 	lea    0xb63e(%rip),%rdx        # 212f50 <memset+0x1670>
  207912:	be 28 00 00 00       	mov    $0x28,%esi
  207917:	e8 74 75 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20791c:	0f 0b                	ud2    
                    cpu_relax();
  20791e:	e8 2d 30 00 00       	callq  20a950 <_ZN4core4sync6atomic14spin_loop_hint17h92421a221054ae95E>
  207923:	eb 44                	jmp    207969 <_ZN4spin4once13Once$LT$T$GT$9call_once17hf43756d4812a151fE+0x1d9>
                PANICKED => panic!("Once has panicked"),
  207925:	48 8d 3d 00 8e ff ff 	lea    -0x7200(%rip),%rdi        # 20072c <str.0+0x6c>
  20792c:	48 8d 15 05 b6 00 00 	lea    0xb605(%rip),%rdx        # 212f38 <memset+0x1658>
  207933:	be 11 00 00 00       	mov    $0x11,%esi
  207938:	e8 53 75 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20793d:	0f 0b                	ud2    
  20793f:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                COMPLETE => return self.force_get(),
  207944:	e8 d7 02 00 00       	callq  207c20 <_ZN4spin4once13Once$LT$T$GT$9force_get17h3fb2850392a2340eE>
  207949:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20794e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  207953:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  207958:	eb 97                	jmp    2078f1 <_ZN4spin4once13Once$LT$T$GT$9call_once17hf43756d4812a151fE+0x161>
    }
  20795a:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20795f:	48 81 c4 28 01 00 00 	add    $0x128,%rsp
  207966:	c3                   	retq   
  207967:	eb f1                	jmp    20795a <_ZN4spin4once13Once$LT$T$GT$9call_once17hf43756d4812a151fE+0x1ca>
  207969:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  20796e:	c6 84 24 0e 01 00 00 	movb   $0x4,0x10e(%rsp)
  207975:	04 
  207976:	0f b6 b4 24 0e 01 00 	movzbl 0x10e(%rsp),%esi
  20797d:	00 
  20797e:	e8 4d 2f 00 00       	callq  20a8d0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  207983:	48 89 04 24          	mov    %rax,(%rsp)
  207987:	48 8b 04 24          	mov    (%rsp),%rax
  20798b:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  207990:	e9 3b fe ff ff       	jmpq   2077d0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hf43756d4812a151fE+0x40>
  207995:	cc                   	int3   
  207996:	cc                   	int3   
  207997:	cc                   	int3   
  207998:	cc                   	int3   
  207999:	cc                   	int3   
  20799a:	cc                   	int3   
  20799b:	cc                   	int3   
  20799c:	cc                   	int3   
  20799d:	cc                   	int3   
  20799e:	cc                   	int3   
  20799f:	cc                   	int3   

00000000002079a0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hfb2697eeb39dd359E>:
    pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
  2079a0:	48 81 ec b8 20 00 00 	sub    $0x20b8,%rsp
  2079a7:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  2079ac:	48 89 bc 24 a0 20 00 	mov    %rdi,0x20a0(%rsp)
  2079b3:	00 
        loop {
  2079b4:	c6 84 24 9f 20 00 00 	movb   $0x0,0x209f(%rsp)
  2079bb:	00 
  2079bc:	c6 84 24 9f 20 00 00 	movb   $0x1,0x209f(%rsp)
  2079c3:	01 
        let mut status = self.state.load(Ordering::SeqCst);
  2079c4:	48 81 c7 20 10 00 00 	add    $0x1020,%rdi
  2079cb:	c6 44 24 4e 04       	movb   $0x4,0x4e(%rsp)
  2079d0:	0f b6 74 24 4e       	movzbl 0x4e(%rsp),%esi
  2079d5:	e8 f6 2e 00 00       	callq  20a8d0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  2079da:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
        if status == INCOMPLETE {
  2079df:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  2079e5:	74 29                	je     207a10 <_ZN4spin4once13Once$LT$T$GT$9call_once17hfb2697eeb39dd359E+0x70>
            match status {
  2079e7:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  2079ec:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2079f1:	48 83 e8 03          	sub    $0x3,%rax
  2079f5:	0f 87 25 01 00 00    	ja     207b20 <_ZN4spin4once13Once$LT$T$GT$9call_once17hfb2697eeb39dd359E+0x180>
  2079fb:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  207a00:	48 8d 0d 15 8d ff ff 	lea    -0x72eb(%rip),%rcx        # 20071c <str.0+0x5c>
  207a07:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  207a0b:	48 01 c8             	add    %rcx,%rax
  207a0e:	ff e0                	jmpq   *%rax
  207a10:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
            status = self.state.compare_and_swap(INCOMPLETE,
  207a15:	48 81 c7 20 10 00 00 	add    $0x1020,%rdi
                                                 Ordering::SeqCst);
  207a1c:	c6 44 24 4f 04       	movb   $0x4,0x4f(%rsp)
            status = self.state.compare_and_swap(INCOMPLETE,
  207a21:	31 c0                	xor    %eax,%eax
  207a23:	89 c6                	mov    %eax,%esi
  207a25:	ba 01 00 00 00       	mov    $0x1,%edx
  207a2a:	0f b6 4c 24 4f       	movzbl 0x4f(%rsp),%ecx
  207a2f:	e8 7c 2d 00 00       	callq  20a7b0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h6b6a92d7904b1f4dE>
  207a34:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  207a39:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  207a3e:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            if status == INCOMPLETE { // We init
  207a43:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
  207a49:	75 9c                	jne    2079e7 <_ZN4spin4once13Once$LT$T$GT$9call_once17hfb2697eeb39dd359E+0x47>
  207a4b:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let mut finish = Finish { state: &self.state, panicked: true };
  207a50:	48 05 20 10 00 00    	add    $0x1020,%rax
  207a56:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  207a5b:	c6 44 24 58 01       	movb   $0x1,0x58(%rsp)
                unsafe { *self.data.get() = Some(builder()) };
  207a60:	c6 84 24 9f 20 00 00 	movb   $0x0,0x209f(%rsp)
  207a67:	00 
  207a68:	48 8d bc 24 80 10 00 	lea    0x1080(%rsp),%rdi
  207a6f:	00 
  207a70:	e8 0b 42 00 00       	callq  20bc80 <_ZN4core3ops8function6FnOnce9call_once17hbfa38db203cdd59fE>
  207a75:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  207a7a:	48 83 c7 10          	add    $0x10,%rdi
  207a7e:	48 8d b4 24 80 10 00 	lea    0x1080(%rsp),%rsi
  207a85:	00 
  207a86:	ba 10 10 00 00       	mov    $0x1010,%edx
  207a8b:	e8 30 9e 00 00       	callq  2118c0 <memcpy>
  207a90:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  207a95:	c6 44 24 60 01       	movb   $0x1,0x60(%rsp)
  207a9a:	48 89 84 24 b0 20 00 	mov    %rax,0x20b0(%rsp)
  207aa1:	00 
  207aa2:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  207aa7:	eb 00                	jmp    207aa9 <_ZN4spin4once13Once$LT$T$GT$9call_once17hfb2697eeb39dd359E+0x109>
  207aa9:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  207aae:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
  207ab3:	ba 20 10 00 00       	mov    $0x1020,%edx
  207ab8:	e8 03 9e 00 00       	callq  2118c0 <memcpy>
  207abd:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                finish.panicked = false;
  207ac2:	c6 44 24 58 00       	movb   $0x0,0x58(%rsp)
                status = COMPLETE;
  207ac7:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  207ace:	00 00 
                self.state.store(status, Ordering::SeqCst);
  207ad0:	48 81 c7 20 10 00 00 	add    $0x1020,%rdi
  207ad7:	c6 84 24 9d 20 00 00 	movb   $0x4,0x209d(%rsp)
  207ade:	04 
  207adf:	be 02 00 00 00       	mov    $0x2,%esi
  207ae4:	0f b6 94 24 9d 20 00 	movzbl 0x209d(%rsp),%edx
  207aeb:	00 
  207aec:	e8 1f 2e 00 00       	callq  20a910 <_ZN4core4sync6atomic11AtomicUsize5store17h5dd1fdb8f532295fE>
  207af1:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                return self.force_get();
  207af6:	e8 e5 01 00 00       	callq  207ce0 <_ZN4spin4once13Once$LT$T$GT$9force_get17hcb1eac27c1f87c5aE>
  207afb:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  207b00:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  207b05:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            }
  207b0a:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  207b0f:	e8 6c 42 00 00       	callq  20bd80 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h93a754bf50e05e07E>
    }
  207b14:	f6 84 24 9f 20 00 00 	testb  $0x1,0x209f(%rsp)
  207b1b:	01 
  207b1c:	75 6c                	jne    207b8a <_ZN4spin4once13Once$LT$T$GT$9call_once17hfb2697eeb39dd359E+0x1ea>
  207b1e:	eb 5d                	jmp    207b7d <_ZN4spin4once13Once$LT$T$GT$9call_once17hfb2697eeb39dd359E+0x1dd>
                _ => unsafe { unreachable() },
  207b20:	e8 fb 40 00 00       	callq  20bc20 <_ZN4core4hint21unreachable_unchecked17he3b397bdcee5fea3E>
  207b25:	0f 0b                	ud2    
                INCOMPLETE => unreachable!(),
  207b27:	48 8d 3d 65 8c ff ff 	lea    -0x739b(%rip),%rdi        # 200793 <str.0+0xd3>
  207b2e:	48 8d 15 1b b4 00 00 	lea    0xb41b(%rip),%rdx        # 212f50 <memset+0x1670>
  207b35:	be 28 00 00 00       	mov    $0x28,%esi
  207b3a:	e8 51 73 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  207b3f:	0f 0b                	ud2    
                    cpu_relax();
  207b41:	e8 0a 2e 00 00       	callq  20a950 <_ZN4core4sync6atomic14spin_loop_hint17h92421a221054ae95E>
  207b46:	eb 44                	jmp    207b8c <_ZN4spin4once13Once$LT$T$GT$9call_once17hfb2697eeb39dd359E+0x1ec>
                PANICKED => panic!("Once has panicked"),
  207b48:	48 8d 3d dd 8b ff ff 	lea    -0x7423(%rip),%rdi        # 20072c <str.0+0x6c>
  207b4f:	48 8d 15 e2 b3 00 00 	lea    0xb3e2(%rip),%rdx        # 212f38 <memset+0x1658>
  207b56:	be 11 00 00 00       	mov    $0x11,%esi
  207b5b:	e8 30 73 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  207b60:	0f 0b                	ud2    
  207b62:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                COMPLETE => return self.force_get(),
  207b67:	e8 74 01 00 00       	callq  207ce0 <_ZN4spin4once13Once$LT$T$GT$9force_get17hcb1eac27c1f87c5aE>
  207b6c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  207b71:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  207b76:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  207b7b:	eb 97                	jmp    207b14 <_ZN4spin4once13Once$LT$T$GT$9call_once17hfb2697eeb39dd359E+0x174>
    }
  207b7d:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  207b82:	48 81 c4 b8 20 00 00 	add    $0x20b8,%rsp
  207b89:	c3                   	retq   
  207b8a:	eb f1                	jmp    207b7d <_ZN4spin4once13Once$LT$T$GT$9call_once17hfb2697eeb39dd359E+0x1dd>
  207b8c:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
                    status = self.state.load(Ordering::SeqCst)
  207b91:	48 81 c7 20 10 00 00 	add    $0x1020,%rdi
  207b98:	c6 84 24 9e 20 00 00 	movb   $0x4,0x209e(%rsp)
  207b9f:	04 
  207ba0:	0f b6 b4 24 9e 20 00 	movzbl 0x209e(%rsp),%esi
  207ba7:	00 
  207ba8:	e8 23 2d 00 00       	callq  20a8d0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  207bad:	48 89 04 24          	mov    %rax,(%rsp)
  207bb1:	48 8b 04 24          	mov    (%rsp),%rax
  207bb5:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  207bba:	e9 28 fe ff ff       	jmpq   2079e7 <_ZN4spin4once13Once$LT$T$GT$9call_once17hfb2697eeb39dd359E+0x47>
  207bbf:	cc                   	int3   

0000000000207bc0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h0bc0d9e39a1abc36E>:
    fn force_get<'a>(&'a self) -> &'a T {
  207bc0:	48 83 ec 28          	sub    $0x28,%rsp
  207bc4:	48 89 f8             	mov    %rdi,%rax
  207bc7:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match unsafe { &*self.data.get() }.as_ref() {
  207bcc:	48 83 c0 08          	add    $0x8,%rax
  207bd0:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  207bd5:	48 89 04 24          	mov    %rax,(%rsp)
  207bd9:	48 8b 3c 24          	mov    (%rsp),%rdi
  207bdd:	e8 fe cc ff ff       	callq  2048e0 <_ZN4core6option15Option$LT$T$GT$6as_ref17h85b752adf3cf1e1eE>
  207be2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  207be7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  207bec:	48 85 c0             	test   %rax,%rax
  207bef:	0f 95 c0             	setne  %al
  207bf2:	0f b6 c0             	movzbl %al,%eax
  207bf5:	74 06                	je     207bfd <_ZN4spin4once13Once$LT$T$GT$9force_get17h0bc0d9e39a1abc36E+0x3d>
  207bf7:	eb 00                	jmp    207bf9 <_ZN4spin4once13Once$LT$T$GT$9force_get17h0bc0d9e39a1abc36E+0x39>
  207bf9:	eb 09                	jmp    207c04 <_ZN4spin4once13Once$LT$T$GT$9force_get17h0bc0d9e39a1abc36E+0x44>
  207bfb:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  207bfd:	e8 1e 40 00 00       	callq  20bc20 <_ZN4core4hint21unreachable_unchecked17he3b397bdcee5fea3E>
  207c02:	0f 0b                	ud2    
            Some(p) => p,
  207c04:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  207c09:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  207c0e:	48 83 c4 28          	add    $0x28,%rsp
  207c12:	c3                   	retq   
  207c13:	cc                   	int3   
  207c14:	cc                   	int3   
  207c15:	cc                   	int3   
  207c16:	cc                   	int3   
  207c17:	cc                   	int3   
  207c18:	cc                   	int3   
  207c19:	cc                   	int3   
  207c1a:	cc                   	int3   
  207c1b:	cc                   	int3   
  207c1c:	cc                   	int3   
  207c1d:	cc                   	int3   
  207c1e:	cc                   	int3   
  207c1f:	cc                   	int3   

0000000000207c20 <_ZN4spin4once13Once$LT$T$GT$9force_get17h3fb2850392a2340eE>:
    fn force_get<'a>(&'a self) -> &'a T {
  207c20:	48 83 ec 28          	sub    $0x28,%rsp
  207c24:	48 89 f8             	mov    %rdi,%rax
  207c27:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match unsafe { &*self.data.get() }.as_ref() {
  207c2c:	48 83 c0 08          	add    $0x8,%rax
  207c30:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  207c35:	48 89 04 24          	mov    %rax,(%rsp)
  207c39:	48 8b 3c 24          	mov    (%rsp),%rdi
  207c3d:	e8 ee cc ff ff       	callq  204930 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb32e5710d5dee042E>
  207c42:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  207c47:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  207c4c:	48 85 c0             	test   %rax,%rax
  207c4f:	0f 95 c0             	setne  %al
  207c52:	0f b6 c0             	movzbl %al,%eax
  207c55:	74 06                	je     207c5d <_ZN4spin4once13Once$LT$T$GT$9force_get17h3fb2850392a2340eE+0x3d>
  207c57:	eb 00                	jmp    207c59 <_ZN4spin4once13Once$LT$T$GT$9force_get17h3fb2850392a2340eE+0x39>
  207c59:	eb 09                	jmp    207c64 <_ZN4spin4once13Once$LT$T$GT$9force_get17h3fb2850392a2340eE+0x44>
  207c5b:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  207c5d:	e8 be 3f 00 00       	callq  20bc20 <_ZN4core4hint21unreachable_unchecked17he3b397bdcee5fea3E>
  207c62:	0f 0b                	ud2    
            Some(p) => p,
  207c64:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  207c69:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  207c6e:	48 83 c4 28          	add    $0x28,%rsp
  207c72:	c3                   	retq   
  207c73:	cc                   	int3   
  207c74:	cc                   	int3   
  207c75:	cc                   	int3   
  207c76:	cc                   	int3   
  207c77:	cc                   	int3   
  207c78:	cc                   	int3   
  207c79:	cc                   	int3   
  207c7a:	cc                   	int3   
  207c7b:	cc                   	int3   
  207c7c:	cc                   	int3   
  207c7d:	cc                   	int3   
  207c7e:	cc                   	int3   
  207c7f:	cc                   	int3   

0000000000207c80 <_ZN4spin4once13Once$LT$T$GT$9force_get17h80bad03012130c6bE>:
    fn force_get<'a>(&'a self) -> &'a T {
  207c80:	48 83 ec 28          	sub    $0x28,%rsp
  207c84:	48 89 f8             	mov    %rdi,%rax
  207c87:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match unsafe { &*self.data.get() }.as_ref() {
  207c8c:	48 83 c0 08          	add    $0x8,%rax
  207c90:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  207c95:	48 89 04 24          	mov    %rax,(%rsp)
  207c99:	48 8b 3c 24          	mov    (%rsp),%rdi
  207c9d:	e8 9e cb ff ff       	callq  204840 <_ZN4core6option15Option$LT$T$GT$6as_ref17h5d0bc5b60f792ccdE>
  207ca2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  207ca7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  207cac:	48 85 c0             	test   %rax,%rax
  207caf:	0f 95 c0             	setne  %al
  207cb2:	0f b6 c0             	movzbl %al,%eax
  207cb5:	74 06                	je     207cbd <_ZN4spin4once13Once$LT$T$GT$9force_get17h80bad03012130c6bE+0x3d>
  207cb7:	eb 00                	jmp    207cb9 <_ZN4spin4once13Once$LT$T$GT$9force_get17h80bad03012130c6bE+0x39>
  207cb9:	eb 09                	jmp    207cc4 <_ZN4spin4once13Once$LT$T$GT$9force_get17h80bad03012130c6bE+0x44>
  207cbb:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  207cbd:	e8 5e 3f 00 00       	callq  20bc20 <_ZN4core4hint21unreachable_unchecked17he3b397bdcee5fea3E>
  207cc2:	0f 0b                	ud2    
            Some(p) => p,
  207cc4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  207cc9:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  207cce:	48 83 c4 28          	add    $0x28,%rsp
  207cd2:	c3                   	retq   
  207cd3:	cc                   	int3   
  207cd4:	cc                   	int3   
  207cd5:	cc                   	int3   
  207cd6:	cc                   	int3   
  207cd7:	cc                   	int3   
  207cd8:	cc                   	int3   
  207cd9:	cc                   	int3   
  207cda:	cc                   	int3   
  207cdb:	cc                   	int3   
  207cdc:	cc                   	int3   
  207cdd:	cc                   	int3   
  207cde:	cc                   	int3   
  207cdf:	cc                   	int3   

0000000000207ce0 <_ZN4spin4once13Once$LT$T$GT$9force_get17hcb1eac27c1f87c5aE>:
    fn force_get<'a>(&'a self) -> &'a T {
  207ce0:	48 83 ec 28          	sub    $0x28,%rsp
  207ce4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  207ce9:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  207cee:	48 89 3c 24          	mov    %rdi,(%rsp)
  207cf2:	48 8b 3c 24          	mov    (%rsp),%rdi
        match unsafe { &*self.data.get() }.as_ref() {
  207cf6:	e8 95 cb ff ff       	callq  204890 <_ZN4core6option15Option$LT$T$GT$6as_ref17h5d51e08c380e0dfcE>
  207cfb:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  207d00:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  207d05:	48 85 c0             	test   %rax,%rax
  207d08:	0f 95 c0             	setne  %al
  207d0b:	0f b6 c0             	movzbl %al,%eax
  207d0e:	74 06                	je     207d16 <_ZN4spin4once13Once$LT$T$GT$9force_get17hcb1eac27c1f87c5aE+0x36>
  207d10:	eb 00                	jmp    207d12 <_ZN4spin4once13Once$LT$T$GT$9force_get17hcb1eac27c1f87c5aE+0x32>
  207d12:	eb 09                	jmp    207d1d <_ZN4spin4once13Once$LT$T$GT$9force_get17hcb1eac27c1f87c5aE+0x3d>
  207d14:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  207d16:	e8 05 3f 00 00       	callq  20bc20 <_ZN4core4hint21unreachable_unchecked17he3b397bdcee5fea3E>
  207d1b:	0f 0b                	ud2    
            Some(p) => p,
  207d1d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  207d22:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  207d27:	48 83 c4 28          	add    $0x28,%rsp
  207d2b:	c3                   	retq   
  207d2c:	cc                   	int3   
  207d2d:	cc                   	int3   
  207d2e:	cc                   	int3   
  207d2f:	cc                   	int3   

0000000000207d30 <_ZN4spin4once13Once$LT$T$GT$9force_get17hfb11ec1bc47b8f8eE>:
    fn force_get<'a>(&'a self) -> &'a T {
  207d30:	48 83 ec 28          	sub    $0x28,%rsp
  207d34:	48 89 f8             	mov    %rdi,%rax
  207d37:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        match unsafe { &*self.data.get() }.as_ref() {
  207d3c:	48 83 c0 08          	add    $0x8,%rax
  207d40:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  207d45:	48 89 04 24          	mov    %rax,(%rsp)
  207d49:	48 8b 3c 24          	mov    (%rsp),%rdi
  207d4d:	e8 7e cc ff ff       	callq  2049d0 <_ZN4core6option15Option$LT$T$GT$6as_ref17he23472d61c0ffa4bE>
  207d52:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  207d57:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  207d5c:	48 85 c0             	test   %rax,%rax
  207d5f:	0f 95 c0             	setne  %al
  207d62:	0f b6 c0             	movzbl %al,%eax
  207d65:	74 06                	je     207d6d <_ZN4spin4once13Once$LT$T$GT$9force_get17hfb11ec1bc47b8f8eE+0x3d>
  207d67:	eb 00                	jmp    207d69 <_ZN4spin4once13Once$LT$T$GT$9force_get17hfb11ec1bc47b8f8eE+0x39>
  207d69:	eb 09                	jmp    207d74 <_ZN4spin4once13Once$LT$T$GT$9force_get17hfb11ec1bc47b8f8eE+0x44>
  207d6b:	0f 0b                	ud2    
            None    => unsafe { unreachable() },
  207d6d:	e8 ae 3e 00 00       	callq  20bc20 <_ZN4core4hint21unreachable_unchecked17he3b397bdcee5fea3E>
  207d72:	0f 0b                	ud2    
            Some(p) => p,
  207d74:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  207d79:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    }
  207d7e:	48 83 c4 28          	add    $0x28,%rsp
  207d82:	c3                   	retq   
  207d83:	cc                   	int3   
  207d84:	cc                   	int3   
  207d85:	cc                   	int3   
  207d86:	cc                   	int3   
  207d87:	cc                   	int3   
  207d88:	cc                   	int3   
  207d89:	cc                   	int3   
  207d8a:	cc                   	int3   
  207d8b:	cc                   	int3   
  207d8c:	cc                   	int3   
  207d8d:	cc                   	int3   
  207d8e:	cc                   	int3   
  207d8f:	cc                   	int3   

0000000000207d90 <_ZN10bootloader9boot_info17Optional$LT$T$GT$11into_option17h2ff5b3c95de4d9fdE>:
    pub fn into_option(self) -> Option<T> {
  207d90:	48 83 ec 28          	sub    $0x28,%rsp
  207d94:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  207d98:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        self.into()
  207d9d:	e8 de 00 00 00       	callq  207e80 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hae46ea32c13c45beE>
  207da2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  207da7:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  207dac:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  207db1:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  207db6:	48 83 c4 28          	add    $0x28,%rsp
  207dba:	c3                   	retq   
  207dbb:	cc                   	int3   
  207dbc:	cc                   	int3   
  207dbd:	cc                   	int3   
  207dbe:	cc                   	int3   
  207dbf:	cc                   	int3   

0000000000207dc0 <_ZN10bootloader9boot_info17Optional$LT$T$GT$6as_ref17h5bc539a7aa59d212E>:
    pub const fn as_ref(&self) -> Option<&T> {
  207dc0:	48 83 ec 20          	sub    $0x20,%rsp
  207dc4:	48 89 3c 24          	mov    %rdi,(%rsp)
  207dc8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        match self {
  207dcd:	8b 07                	mov    (%rdi),%eax
  207dcf:	48 85 c0             	test   %rax,%rax
  207dd2:	74 06                	je     207dda <_ZN10bootloader9boot_info17Optional$LT$T$GT$6as_ref17h5bc539a7aa59d212E+0x1a>
  207dd4:	eb 00                	jmp    207dd6 <_ZN10bootloader9boot_info17Optional$LT$T$GT$6as_ref17h5bc539a7aa59d212E+0x16>
  207dd6:	eb 16                	jmp    207dee <_ZN10bootloader9boot_info17Optional$LT$T$GT$6as_ref17h5bc539a7aa59d212E+0x2e>
  207dd8:	0f 0b                	ud2    
  207dda:	48 8b 04 24          	mov    (%rsp),%rax
            Self::Some(x) => Some(x),
  207dde:	48 83 c0 08          	add    $0x8,%rax
  207de2:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  207de7:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  207dec:	eb 09                	jmp    207df7 <_ZN10bootloader9boot_info17Optional$LT$T$GT$6as_ref17h5bc539a7aa59d212E+0x37>
            Self::None => None,
  207dee:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  207df5:	00 00 
    }
  207df7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  207dfc:	48 83 c4 20          	add    $0x20,%rsp
  207e00:	c3                   	retq   
  207e01:	cc                   	int3   
  207e02:	cc                   	int3   
  207e03:	cc                   	int3   
  207e04:	cc                   	int3   
  207e05:	cc                   	int3   
  207e06:	cc                   	int3   
  207e07:	cc                   	int3   
  207e08:	cc                   	int3   
  207e09:	cc                   	int3   
  207e0a:	cc                   	int3   
  207e0b:	cc                   	int3   
  207e0c:	cc                   	int3   
  207e0d:	cc                   	int3   
  207e0e:	cc                   	int3   
  207e0f:	cc                   	int3   

0000000000207e10 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17h356ef27f5c1e3d27E>:
    ///     println!("We got back the value: {}!", val_back);
    /// }
    /// ```
    #[stable(feature = "ptr_as_ref", since = "1.9.0")]
    #[inline]
    pub unsafe fn as_ref<'a>(self) -> Option<&'a T> {
  207e10:	48 83 ec 28          	sub    $0x28,%rsp
  207e14:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  207e19:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
        // SAFETY: the caller must guarantee that `self` is valid
        // for a reference if it isn't null.
        if self.is_null() { None } else { unsafe { Some(&*self) } }
  207e1e:	e8 2d 00 00 00       	callq  207e50 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h06f36695f88a226dE>
  207e23:	88 44 24 17          	mov    %al,0x17(%rsp)
  207e27:	8a 44 24 17          	mov    0x17(%rsp),%al
  207e2b:	a8 01                	test   $0x1,%al
  207e2d:	75 0e                	jne    207e3d <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17h356ef27f5c1e3d27E+0x2d>
  207e2f:	eb 00                	jmp    207e31 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17h356ef27f5c1e3d27E+0x21>
  207e31:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  207e36:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  207e3b:	eb 09                	jmp    207e46 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17h356ef27f5c1e3d27E+0x36>
  207e3d:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
  207e44:	00 00 
    }
  207e46:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  207e4b:	48 83 c4 28          	add    $0x28,%rsp
  207e4f:	c3                   	retq   

0000000000207e50 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h06f36695f88a226dE>:
    pub const fn is_null(self) -> bool {
  207e50:	48 83 ec 18          	sub    $0x18,%rsp
  207e54:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  207e59:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  207e5e:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        (self as *const u8).guaranteed_eq(null())
  207e63:	31 c0                	xor    %eax,%eax
  207e65:	89 c6                	mov    %eax,%esi
  207e67:	e8 d4 58 00 00       	callq  20d740 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13guaranteed_eq17h34ebb992cc7e055fE>
  207e6c:	88 44 24 07          	mov    %al,0x7(%rsp)
  207e70:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  207e74:	24 01                	and    $0x1,%al
  207e76:	0f b6 c0             	movzbl %al,%eax
  207e79:	48 83 c4 18          	add    $0x18,%rsp
  207e7d:	c3                   	retq   
  207e7e:	cc                   	int3   
  207e7f:	cc                   	int3   

0000000000207e80 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hae46ea32c13c45beE>:
#[stable(feature = "rust1", since = "1.0.0")]
impl<T, U> Into<U> for T
where
    U: From<T>,
{
    fn into(self) -> U {
  207e80:	48 83 ec 28          	sub    $0x28,%rsp
  207e84:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  207e88:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        U::from(self)
  207e8d:	e8 5e c9 ff ff       	callq  2047f0 <_ZN10bootloader9boot_info127_$LT$impl$u20$core..convert..From$LT$bootloader..boot_info..Optional$LT$T$GT$$GT$$u20$for$u20$core..option..Option$LT$T$GT$$GT$4from17hc071a28b35f3c4a2E>
  207e92:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  207e97:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  207e9c:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  207ea1:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  207ea6:	48 83 c4 28          	add    $0x28,%rsp
  207eaa:	c3                   	retq   
  207eab:	cc                   	int3   
  207eac:	cc                   	int3   
  207ead:	cc                   	int3   
  207eae:	cc                   	int3   
  207eaf:	cc                   	int3   

0000000000207eb0 <_ZN4core9panicking13assert_failed17hf745d0fc64896bf3E>:

/// Internal function for `assert_eq!` and `assert_ne!` macros
#[cold]
#[track_caller]
#[doc(hidden)]
pub fn assert_failed<T, U>(
  207eb0:	48 83 ec 58          	sub    $0x58,%rsp
  207eb4:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  207eb9:	48 89 d1             	mov    %rdx,%rcx
  207ebc:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  207ec1:	40 88 f8             	mov    %dil,%al
  207ec4:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  207ec9:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  207ece:	88 44 24 57          	mov    %al,0x57(%rsp)
) -> !
where
    T: fmt::Debug + ?Sized,
    U: fmt::Debug + ?Sized,
{
    assert_failed_inner(kind, &left, &right, args)
  207ed2:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
  207ed6:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  207edb:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
  207edf:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  207ee4:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  207ee8:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  207eed:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  207ef1:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  207ef6:	48 8b 0a             	mov    (%rdx),%rcx
  207ef9:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  207efd:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  207f02:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  207f07:	48 89 e1             	mov    %rsp,%rcx
  207f0a:	4c 89 01             	mov    %r8,(%rcx)
  207f0d:	0f b6 f8             	movzbl %al,%edi
  207f10:	4c 8d 05 51 b0 00 00 	lea    0xb051(%rip),%r8        # 212f68 <memset+0x1688>
  207f17:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  207f1c:	48 8d 4c 24 18       	lea    0x18(%rsp),%rcx
  207f21:	4c 8d 4c 24 20       	lea    0x20(%rsp),%r9
  207f26:	4c 89 c2             	mov    %r8,%rdx
  207f29:	e8 72 70 00 00       	callq  20efa0 <_ZN4core9panicking19assert_failed_inner17h6cefd3f7ae7f1a39E>
  207f2e:	0f 0b                	ud2    

0000000000207f30 <_ZN4core9panicking13panic_display17h436238fbdc089216E>:
pub fn panic_display<T: fmt::Display>(x: &T) -> ! {
  207f30:	48 83 ec 78          	sub    $0x78,%rsp
  207f34:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  207f39:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
    panic_fmt(format_args!("{}", *x));
  207f3e:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
  207f43:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  207f48:	48 89 7c 24 70       	mov    %rdi,0x70(%rsp)
  207f4d:	48 8b 35 d4 bb 00 00 	mov    0xbbd4(%rip),%rsi        # 213b28 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xa0>
  207f54:	e8 e7 55 00 00       	callq  20d540 <_ZN4core3fmt10ArgumentV13new17hd157b7d17257c7eaE>
  207f59:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  207f5e:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  207f63:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  207f68:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  207f6d:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  207f72:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  207f77:	48 8d 4c 24 50       	lea    0x50(%rsp),%rcx
  207f7c:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  207f81:	48 8d 35 00 b0 00 00 	lea    0xb000(%rip),%rsi        # 212f88 <memset+0x16a8>
  207f88:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  207f8e:	4c 89 c2             	mov    %r8,%rdx
  207f91:	e8 7a c7 ff ff       	callq  204710 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  207f96:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  207f9b:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  207fa0:	e8 bb 6f 00 00       	callq  20ef60 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  207fa5:	0f 0b                	ud2    
  207fa7:	cc                   	int3   
  207fa8:	cc                   	int3   
  207fa9:	cc                   	int3   
  207faa:	cc                   	int3   
  207fab:	cc                   	int3   
  207fac:	cc                   	int3   
  207fad:	cc                   	int3   
  207fae:	cc                   	int3   
  207faf:	cc                   	int3   

0000000000207fb0 <_ZN104_$LT$core..iter..adapters..copied..Copied$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h043b2749de415b60E>:
    I: Iterator<Item = &'a T>,
    T: Copy,
{
    type Item = T;

    fn next(&mut self) -> Option<T> {
  207fb0:	48 83 ec 18          	sub    $0x18,%rsp
  207fb4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.it.next().copied()
  207fb9:	e8 02 2a 00 00       	callq  20a9c0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd89ffd2eae3f03a3E>
  207fbe:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  207fc3:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  207fc8:	e8 73 cb ff ff       	callq  204b40 <_ZN4core6option19Option$LT$$RF$T$GT$6copied17h5feef6fcd2d2c583E>
  207fcd:	88 44 24 06          	mov    %al,0x6(%rsp)
  207fd1:	88 54 24 07          	mov    %dl,0x7(%rsp)
  207fd5:	8a 54 24 07          	mov    0x7(%rsp),%dl
  207fd9:	8a 44 24 06          	mov    0x6(%rsp),%al
    }
  207fdd:	24 01                	and    $0x1,%al
  207fdf:	48 83 c4 18          	add    $0x18,%rsp
  207fe3:	c3                   	retq   
  207fe4:	cc                   	int3   
  207fe5:	cc                   	int3   
  207fe6:	cc                   	int3   
  207fe7:	cc                   	int3   
  207fe8:	cc                   	int3   
  207fe9:	cc                   	int3   
  207fea:	cc                   	int3   
  207feb:	cc                   	int3   
  207fec:	cc                   	int3   
  207fed:	cc                   	int3   
  207fee:	cc                   	int3   
  207fef:	cc                   	int3   

0000000000207ff0 <_ZN4core5slice5index77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hb66ea3ee7d7e4e38E>:
impl<T, I> ops::IndexMut<I> for [T]
where
    I: SliceIndex<[T]>,
{
    #[inline]
    fn index_mut(&mut self, index: I) -> &mut I::Output {
  207ff0:	48 83 ec 38          	sub    $0x38,%rsp
  207ff4:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  207ff9:	48 89 f2             	mov    %rsi,%rdx
  207ffc:	48 89 fe             	mov    %rdi,%rsi
  207fff:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  208004:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  208009:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  20800e:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
        index.index_mut(self)
  208013:	e8 78 12 00 00       	callq  209290 <_ZN108_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h5113fb0e44857482E>
  208018:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20801d:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  208022:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  208027:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    }
  20802c:	48 83 c4 38          	add    $0x38,%rsp
  208030:	c3                   	retq   
  208031:	cc                   	int3   
  208032:	cc                   	int3   
  208033:	cc                   	int3   
  208034:	cc                   	int3   
  208035:	cc                   	int3   
  208036:	cc                   	int3   
  208037:	cc                   	int3   
  208038:	cc                   	int3   
  208039:	cc                   	int3   
  20803a:	cc                   	int3   
  20803b:	cc                   	int3   
  20803c:	cc                   	int3   
  20803d:	cc                   	int3   
  20803e:	cc                   	int3   
  20803f:	cc                   	int3   

0000000000208040 <_ZN4core5slice5index77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc83c78073ebc3b89E>:
    fn index_mut(&mut self, index: I) -> &mut I::Output {
  208040:	48 83 ec 28          	sub    $0x28,%rsp
  208044:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  208049:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        index.index_mut(self)
  20804e:	e8 dd 13 00 00       	callq  209430 <_ZN97_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h5ccb660a8b622ab1E>
  208053:	48 89 04 24          	mov    %rax,(%rsp)
  208057:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  20805c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  208061:	48 8b 04 24          	mov    (%rsp),%rax
    }
  208065:	48 83 c4 28          	add    $0x28,%rsp
  208069:	c3                   	retq   
  20806a:	cc                   	int3   
  20806b:	cc                   	int3   
  20806c:	cc                   	int3   
  20806d:	cc                   	int3   
  20806e:	cc                   	int3   
  20806f:	cc                   	int3   

0000000000208070 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE>:

            #[inline]
            fn set_bits<T: RangeBounds<usize>>(&mut self, range: T, value: Self) -> &mut Self {
  208070:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
  208077:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
  20807c:	66 89 c8             	mov    %cx,%ax
  20807f:	66 89 44 24 6e       	mov    %ax,0x6e(%rsp)
  208084:	48 89 b4 24 80 00 00 	mov    %rsi,0x80(%rsp)
  20808b:	00 
  20808c:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
  208093:	00 
  208094:	48 89 bc 24 90 00 00 	mov    %rdi,0x90(%rsp)
  20809b:	00 
  20809c:	66 89 84 24 9e 00 00 	mov    %ax,0x9e(%rsp)
  2080a3:	00 
                let range = to_regular_range(&range, Self::BIT_LENGTH);
  2080a4:	48 8d bc 24 80 00 00 	lea    0x80(%rsp),%rdi
  2080ab:	00 
  2080ac:	be 10 00 00 00       	mov    $0x10,%esi
  2080b1:	e8 0a 0b 00 00       	callq  208bc0 <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE>
  2080b6:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  2080bb:	48 89 54 24 78       	mov    %rdx,0x78(%rsp)
  2080c0:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  2080c7:	00 
  2080c8:	48 89 94 24 a8 00 00 	mov    %rdx,0xa8(%rsp)
  2080cf:	00 
  2080d0:	48 8b 44 24 70       	mov    0x70(%rsp),%rax

                assert!(range.start < Self::BIT_LENGTH);
  2080d5:	48 83 f8 10          	cmp    $0x10,%rax
  2080d9:	0f 92 c0             	setb   %al
  2080dc:	34 ff                	xor    $0xff,%al
  2080de:	a8 01                	test   $0x1,%al
  2080e0:	75 14                	jne    2080f6 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x86>
  2080e2:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
                assert!(range.end <= Self::BIT_LENGTH);
  2080e7:	48 83 f8 10          	cmp    $0x10,%rax
  2080eb:	0f 96 c0             	setbe  %al
  2080ee:	34 ff                	xor    $0xff,%al
  2080f0:	a8 01                	test   $0x1,%al
  2080f2:	75 34                	jne    208128 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0xb8>
  2080f4:	eb 1a                	jmp    208110 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0xa0>
                assert!(range.start < Self::BIT_LENGTH);
  2080f6:	48 8d 3d be 86 ff ff 	lea    -0x7942(%rip),%rdi        # 2007bb <str.0+0xfb>
  2080fd:	48 8d 15 94 ae 00 00 	lea    0xae94(%rip),%rdx        # 212f98 <memset+0x16b8>
  208104:	be 30 00 00 00       	mov    $0x30,%esi
  208109:	e8 82 6d 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20810e:	0f 0b                	ud2    
  208110:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  208115:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
                assert!(range.start < range.end);
  20811a:	48 39 c8             	cmp    %rcx,%rax
  20811d:	0f 92 c0             	setb   %al
  208120:	34 ff                	xor    $0xff,%al
  208122:	a8 01                	test   $0x1,%al
  208124:	75 37                	jne    20815d <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0xed>
  208126:	eb 1a                	jmp    208142 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0xd2>
                assert!(range.end <= Self::BIT_LENGTH);
  208128:	48 8d 3d 17 87 ff ff 	lea    -0x78e9(%rip),%rdi        # 200846 <str.0+0x186>
  20812f:	48 8d 15 62 ae 00 00 	lea    0xae62(%rip),%rdx        # 212f98 <memset+0x16b8>
  208136:	be 2f 00 00 00       	mov    $0x2f,%esi
  20813b:	e8 50 6d 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208140:	0f 0b                	ud2    
  208142:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  208147:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  20814c:	48 29 c8             	sub    %rcx,%rax
  20814f:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  208154:	0f 92 c0             	setb   %al
  208157:	a8 01                	test   $0x1,%al
  208159:	75 37                	jne    208192 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x122>
  20815b:	eb 1a                	jmp    208177 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x107>
                assert!(range.start < range.end);
  20815d:	48 8d 3d 11 87 ff ff 	lea    -0x78ef(%rip),%rdi        # 200875 <str.0+0x1b5>
  208164:	48 8d 15 2d ae 00 00 	lea    0xae2d(%rip),%rdx        # 212f98 <memset+0x16b8>
  20816b:	be 29 00 00 00       	mov    $0x29,%esi
  208170:	e8 1b 6d 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208175:	0f 0b                	ud2    
  208177:	48 8b 4c 24 58       	mov    0x58(%rsp),%rcx
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  20817c:	b8 10 00 00 00       	mov    $0x10,%eax
  208181:	48 29 c8             	sub    %rcx,%rax
  208184:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  208189:	0f 92 c0             	setb   %al
  20818c:	a8 01                	test   $0x1,%al
  20818e:	75 46                	jne    2081d6 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x166>
  208190:	eb 1a                	jmp    2081ac <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x13c>
  208192:	48 8d 3d 07 87 ff ff 	lea    -0x78f9(%rip),%rdi        # 2008a0 <str.0>
  208199:	48 8d 15 f8 ad 00 00 	lea    0xadf8(%rip),%rdx        # 212f98 <memset+0x16b8>
  2081a0:	be 21 00 00 00       	mov    $0x21,%esi
  2081a5:	e8 e6 6c 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2081aa:	0f 0b                	ud2    
  2081ac:	66 8b 54 24 6e       	mov    0x6e(%rsp),%dx
  2081b1:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
  2081b6:	48 89 c8             	mov    %rcx,%rax
  2081b9:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  2081bd:	48 83 f8 00          	cmp    $0x0,%rax
  2081c1:	0f 95 c0             	setne  %al
  2081c4:	66 83 e1 0f          	and    $0xf,%cx
  2081c8:	66 d3 e2             	shl    %cl,%dx
  2081cb:	66 89 54 24 4e       	mov    %dx,0x4e(%rsp)
  2081d0:	a8 01                	test   $0x1,%al
  2081d2:	75 37                	jne    20820b <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x19b>
  2081d4:	eb 1a                	jmp    2081f0 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x180>
  2081d6:	48 8d 3d c3 86 ff ff 	lea    -0x793d(%rip),%rdi        # 2008a0 <str.0>
  2081dd:	48 8d 15 b4 ad 00 00 	lea    0xadb4(%rip),%rdx        # 212f98 <memset+0x16b8>
  2081e4:	be 21 00 00 00       	mov    $0x21,%esi
  2081e9:	e8 a2 6c 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2081ee:	0f 0b                	ud2    
  2081f0:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  2081f5:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
                        (Self::BIT_LENGTH - (range.end - range.start)) == value,
  2081fa:	48 29 c8             	sub    %rcx,%rax
  2081fd:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  208202:	0f 92 c0             	setb   %al
  208205:	a8 01                	test   $0x1,%al
  208207:	75 37                	jne    208240 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x1d0>
  208209:	eb 1a                	jmp    208225 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x1b5>
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  20820b:	48 8d 3d be 86 ff ff 	lea    -0x7942(%rip),%rdi        # 2008d0 <str.1>
  208212:	48 8d 15 7f ad 00 00 	lea    0xad7f(%rip),%rdx        # 212f98 <memset+0x16b8>
  208219:	be 23 00 00 00       	mov    $0x23,%esi
  20821e:	e8 6d 6c 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208223:	0f 0b                	ud2    
  208225:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
                        (Self::BIT_LENGTH - (range.end - range.start)) == value,
  20822a:	b8 10 00 00 00       	mov    $0x10,%eax
  20822f:	48 29 c8             	sub    %rcx,%rax
  208232:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  208237:	0f 92 c0             	setb   %al
  20823a:	a8 01                	test   $0x1,%al
  20823c:	75 46                	jne    208284 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x214>
  20823e:	eb 1a                	jmp    20825a <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x1ea>
  208240:	48 8d 3d 59 86 ff ff 	lea    -0x79a7(%rip),%rdi        # 2008a0 <str.0>
  208247:	48 8d 15 4a ad 00 00 	lea    0xad4a(%rip),%rdx        # 212f98 <memset+0x16b8>
  20824e:	be 21 00 00 00       	mov    $0x21,%esi
  208253:	e8 38 6c 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208258:	0f 0b                	ud2    
  20825a:	66 8b 54 24 4e       	mov    0x4e(%rsp),%dx
  20825f:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  208264:	48 89 c8             	mov    %rcx,%rax
  208267:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  20826b:	48 83 f8 00          	cmp    $0x0,%rax
  20826f:	0f 95 c0             	setne  %al
  208272:	66 83 e1 0f          	and    $0xf,%cx
  208276:	66 d3 ea             	shr    %cl,%dx
  208279:	66 89 54 24 36       	mov    %dx,0x36(%rsp)
  20827e:	a8 01                	test   $0x1,%al
  208280:	75 34                	jne    2082b6 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x246>
  208282:	eb 1a                	jmp    20829e <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x22e>
                        (Self::BIT_LENGTH - (range.end - range.start)) == value,
  208284:	48 8d 3d 15 86 ff ff 	lea    -0x79eb(%rip),%rdi        # 2008a0 <str.0>
  20828b:	48 8d 15 06 ad 00 00 	lea    0xad06(%rip),%rdx        # 212f98 <memset+0x16b8>
  208292:	be 21 00 00 00       	mov    $0x21,%esi
  208297:	e8 f4 6b 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20829c:	0f 0b                	ud2    
  20829e:	66 8b 44 24 36       	mov    0x36(%rsp),%ax
  2082a3:	66 8b 4c 24 6e       	mov    0x6e(%rsp),%cx
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  2082a8:	66 39 c8             	cmp    %cx,%ax
  2082ab:	0f 94 c0             	sete   %al
  2082ae:	34 ff                	xor    $0xff,%al
  2082b0:	a8 01                	test   $0x1,%al
  2082b2:	75 37                	jne    2082eb <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x27b>
  2082b4:	eb 1a                	jmp    2082d0 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x260>
  2082b6:	48 8d 3d 43 86 ff ff 	lea    -0x79bd(%rip),%rdi        # 200900 <str.2>
  2082bd:	48 8d 15 d4 ac 00 00 	lea    0xacd4(%rip),%rdx        # 212f98 <memset+0x16b8>
  2082c4:	be 24 00 00 00       	mov    $0x24,%esi
  2082c9:	e8 c2 6b 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2082ce:	0f 0b                	ud2    
  2082d0:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
                        "value does not fit into bit range");

                let bitmask: Self = !(!0 << (Self::BIT_LENGTH - range.end) >>
  2082d5:	b8 10 00 00 00       	mov    $0x10,%eax
  2082da:	48 29 c8             	sub    %rcx,%rax
  2082dd:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2082e2:	0f 92 c0             	setb   %al
  2082e5:	a8 01                	test   $0x1,%al
  2082e7:	75 45                	jne    20832e <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x2be>
  2082e9:	eb 1a                	jmp    208305 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x295>
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  2082eb:	48 8d 3d 32 86 ff ff 	lea    -0x79ce(%rip),%rdi        # 200924 <str.2+0x24>
  2082f2:	48 8d 15 9f ac 00 00 	lea    0xac9f(%rip),%rdx        # 212f98 <memset+0x16b8>
  2082f9:	be 21 00 00 00       	mov    $0x21,%esi
  2082fe:	e8 8d 6b 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208303:	0f 0b                	ud2    
  208305:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
                let bitmask: Self = !(!0 << (Self::BIT_LENGTH - range.end) >>
  20830a:	48 89 c8             	mov    %rcx,%rax
  20830d:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  208311:	48 83 f8 00          	cmp    $0x0,%rax
  208315:	0f 95 c0             	setne  %al
  208318:	66 83 e1 0f          	and    $0xf,%cx
  20831c:	66 ba ff ff          	mov    $0xffff,%dx
  208320:	66 d3 e2             	shl    %cl,%dx
  208323:	66 89 54 24 26       	mov    %dx,0x26(%rsp)
  208328:	a8 01                	test   $0x1,%al
  20832a:	75 37                	jne    208363 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x2f3>
  20832c:	eb 1a                	jmp    208348 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x2d8>
  20832e:	48 8d 3d 6b 85 ff ff 	lea    -0x7a95(%rip),%rdi        # 2008a0 <str.0>
  208335:	48 8d 15 5c ac 00 00 	lea    0xac5c(%rip),%rdx        # 212f98 <memset+0x16b8>
  20833c:	be 21 00 00 00       	mov    $0x21,%esi
  208341:	e8 4a 6b 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208346:	0f 0b                	ud2    
  208348:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
                                    (Self::BIT_LENGTH - range.end) >>
  20834d:	b8 10 00 00 00       	mov    $0x10,%eax
  208352:	48 29 c8             	sub    %rcx,%rax
  208355:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20835a:	0f 92 c0             	setb   %al
  20835d:	a8 01                	test   $0x1,%al
  20835f:	75 46                	jne    2083a7 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x337>
  208361:	eb 1a                	jmp    20837d <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x30d>
                let bitmask: Self = !(!0 << (Self::BIT_LENGTH - range.end) >>
  208363:	48 8d 3d 66 85 ff ff 	lea    -0x7a9a(%rip),%rdi        # 2008d0 <str.1>
  20836a:	48 8d 15 27 ac 00 00 	lea    0xac27(%rip),%rdx        # 212f98 <memset+0x16b8>
  208371:	be 23 00 00 00       	mov    $0x23,%esi
  208376:	e8 15 6b 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20837b:	0f 0b                	ud2    
  20837d:	66 8b 54 24 26       	mov    0x26(%rsp),%dx
  208382:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  208387:	48 89 c8             	mov    %rcx,%rax
  20838a:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  20838e:	48 83 f8 00          	cmp    $0x0,%rax
  208392:	0f 95 c0             	setne  %al
  208395:	66 83 e1 0f          	and    $0xf,%cx
  208399:	66 d3 ea             	shr    %cl,%dx
  20839c:	66 89 54 24 16       	mov    %dx,0x16(%rsp)
  2083a1:	a8 01                	test   $0x1,%al
  2083a3:	75 46                	jne    2083eb <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x37b>
  2083a5:	eb 1a                	jmp    2083c1 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x351>
                                    (Self::BIT_LENGTH - range.end) >>
  2083a7:	48 8d 3d f2 84 ff ff 	lea    -0x7b0e(%rip),%rdi        # 2008a0 <str.0>
  2083ae:	48 8d 15 e3 ab 00 00 	lea    0xabe3(%rip),%rdx        # 212f98 <memset+0x16b8>
  2083b5:	be 21 00 00 00       	mov    $0x21,%esi
  2083ba:	e8 d1 6a 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2083bf:	0f 0b                	ud2    
  2083c1:	66 8b 54 24 16       	mov    0x16(%rsp),%dx
  2083c6:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
                let bitmask: Self = !(!0 << (Self::BIT_LENGTH - range.end) >>
  2083cb:	48 89 c8             	mov    %rcx,%rax
  2083ce:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  2083d2:	48 83 f8 00          	cmp    $0x0,%rax
  2083d6:	0f 95 c0             	setne  %al
  2083d9:	66 83 e1 0f          	and    $0xf,%cx
  2083dd:	66 d3 ea             	shr    %cl,%dx
  2083e0:	66 89 54 24 14       	mov    %dx,0x14(%rsp)
  2083e5:	a8 01                	test   $0x1,%al
  2083e7:	75 46                	jne    20842f <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x3bf>
  2083e9:	eb 1a                	jmp    208405 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x395>
  2083eb:	48 8d 3d 0e 85 ff ff 	lea    -0x7af2(%rip),%rdi        # 200900 <str.2>
  2083f2:	48 8d 15 9f ab 00 00 	lea    0xab9f(%rip),%rdx        # 212f98 <memset+0x16b8>
  2083f9:	be 24 00 00 00       	mov    $0x24,%esi
  2083fe:	e8 8d 6a 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208403:	0f 0b                	ud2    
  208405:	66 8b 54 24 14       	mov    0x14(%rsp),%dx
  20840a:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  20840f:	48 89 c8             	mov    %rcx,%rax
  208412:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  208416:	48 83 f8 00          	cmp    $0x0,%rax
  20841a:	0f 95 c0             	setne  %al
  20841d:	66 83 e1 0f          	and    $0xf,%cx
  208421:	66 d3 e2             	shl    %cl,%dx
  208424:	66 89 54 24 12       	mov    %dx,0x12(%rsp)
  208429:	a8 01                	test   $0x1,%al
  20842b:	75 64                	jne    208491 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x421>
  20842d:	eb 1a                	jmp    208449 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x3d9>
  20842f:	48 8d 3d ca 84 ff ff 	lea    -0x7b36(%rip),%rdi        # 200900 <str.2>
  208436:	48 8d 15 5b ab 00 00 	lea    0xab5b(%rip),%rdx        # 212f98 <memset+0x16b8>
  20843d:	be 24 00 00 00       	mov    $0x24,%esi
  208442:	e8 49 6a 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208447:	0f 0b                	ud2    
  208449:	66 8b 54 24 6e       	mov    0x6e(%rsp),%dx
  20844e:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  208453:	48 8b 74 24 60       	mov    0x60(%rsp),%rsi
  208458:	66 8b 44 24 12       	mov    0x12(%rsp),%ax
  20845d:	66 83 f0 ff          	xor    $0xffff,%ax
  208461:	66 89 84 24 b6 00 00 	mov    %ax,0xb6(%rsp)
  208468:	00 
                                    range.start << range.start);

                // set bits
                *self = (*self & bitmask) | (value << range.start);
  208469:	66 23 06             	and    (%rsi),%ax
  20846c:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
  208471:	48 89 c8             	mov    %rcx,%rax
  208474:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  208478:	48 83 f8 00          	cmp    $0x0,%rax
  20847c:	0f 95 c0             	setne  %al
  20847f:	66 83 e1 0f          	and    $0xf,%cx
  208483:	66 d3 e2             	shl    %cl,%dx
  208486:	66 89 54 24 10       	mov    %dx,0x10(%rsp)
  20848b:	a8 01                	test   $0x1,%al
  20848d:	75 33                	jne    2084c2 <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x452>
  20848f:	eb 1a                	jmp    2084ab <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x43b>
                let bitmask: Self = !(!0 << (Self::BIT_LENGTH - range.end) >>
  208491:	48 8d 3d 38 84 ff ff 	lea    -0x7bc8(%rip),%rdi        # 2008d0 <str.1>
  208498:	48 8d 15 f9 aa 00 00 	lea    0xaaf9(%rip),%rdx        # 212f98 <memset+0x16b8>
  20849f:	be 23 00 00 00       	mov    $0x23,%esi
  2084a4:	e8 e7 69 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2084a9:	0f 0b                	ud2    
  2084ab:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  2084b0:	66 8b 54 24 10       	mov    0x10(%rsp),%dx
  2084b5:	66 8b 4c 24 0e       	mov    0xe(%rsp),%cx
                *self = (*self & bitmask) | (value << range.start);
  2084ba:	66 09 d1             	or     %dx,%cx
  2084bd:	66 89 08             	mov    %cx,(%rax)

                self
            }
  2084c0:	eb 1a                	jmp    2084dc <_ZN43_$LT$u16$u20$as$u20$bit_field..BitField$GT$8set_bits17hc9f5c111dd67f6ecE+0x46c>
                *self = (*self & bitmask) | (value << range.start);
  2084c2:	48 8d 3d 07 84 ff ff 	lea    -0x7bf9(%rip),%rdi        # 2008d0 <str.1>
  2084c9:	48 8d 15 c8 aa 00 00 	lea    0xaac8(%rip),%rdx        # 212f98 <memset+0x16b8>
  2084d0:	be 23 00 00 00       	mov    $0x23,%esi
  2084d5:	e8 b6 69 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2084da:	0f 0b                	ud2    
  2084dc:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
            }
  2084e1:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
  2084e8:	c3                   	retq   
  2084e9:	cc                   	int3   
  2084ea:	cc                   	int3   
  2084eb:	cc                   	int3   
  2084ec:	cc                   	int3   
  2084ed:	cc                   	int3   
  2084ee:	cc                   	int3   
  2084ef:	cc                   	int3   

00000000002084f0 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h1f3955de0bf3912cE>:
            fn get_bits<T: RangeBounds<usize>>(&self, range: T) -> Self {
  2084f0:	48 83 ec 78          	sub    $0x78,%rsp
  2084f4:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  2084f9:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
  2084fe:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  208503:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
                let range = to_regular_range(&range, Self::BIT_LENGTH);
  208508:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  20850d:	be 40 00 00 00       	mov    $0x40,%esi
  208512:	e8 a9 06 00 00       	callq  208bc0 <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE>
  208517:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20851c:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  208521:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  208526:	48 89 54 24 68       	mov    %rdx,0x68(%rsp)
  20852b:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
                assert!(range.start < Self::BIT_LENGTH);
  208530:	48 83 f8 40          	cmp    $0x40,%rax
  208534:	0f 92 c0             	setb   %al
  208537:	34 ff                	xor    $0xff,%al
  208539:	a8 01                	test   $0x1,%al
  20853b:	75 14                	jne    208551 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h1f3955de0bf3912cE+0x61>
  20853d:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
                assert!(range.end <= Self::BIT_LENGTH);
  208542:	48 83 f8 40          	cmp    $0x40,%rax
  208546:	0f 96 c0             	setbe  %al
  208549:	34 ff                	xor    $0xff,%al
  20854b:	a8 01                	test   $0x1,%al
  20854d:	75 34                	jne    208583 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h1f3955de0bf3912cE+0x93>
  20854f:	eb 1a                	jmp    20856b <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h1f3955de0bf3912cE+0x7b>
                assert!(range.start < Self::BIT_LENGTH);
  208551:	48 8d 3d 63 82 ff ff 	lea    -0x7d9d(%rip),%rdi        # 2007bb <str.0+0xfb>
  208558:	48 8d 15 39 aa 00 00 	lea    0xaa39(%rip),%rdx        # 212f98 <memset+0x16b8>
  20855f:	be 30 00 00 00       	mov    $0x30,%esi
  208564:	e8 27 69 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208569:	0f 0b                	ud2    
  20856b:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  208570:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
                assert!(range.start < range.end);
  208575:	48 39 c8             	cmp    %rcx,%rax
  208578:	0f 92 c0             	setb   %al
  20857b:	34 ff                	xor    $0xff,%al
  20857d:	a8 01                	test   $0x1,%al
  20857f:	75 44                	jne    2085c5 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h1f3955de0bf3912cE+0xd5>
  208581:	eb 1a                	jmp    20859d <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h1f3955de0bf3912cE+0xad>
                assert!(range.end <= Self::BIT_LENGTH);
  208583:	48 8d 3d bc 82 ff ff 	lea    -0x7d44(%rip),%rdi        # 200846 <str.0+0x186>
  20858a:	48 8d 15 07 aa 00 00 	lea    0xaa07(%rip),%rdx        # 212f98 <memset+0x16b8>
  208591:	be 2f 00 00 00       	mov    $0x2f,%esi
  208596:	e8 f5 68 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20859b:	0f 0b                	ud2    
  20859d:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  2085a2:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                let bits = *self << (Self::BIT_LENGTH - range.end) >> (Self::BIT_LENGTH - range.end);
  2085a7:	48 8b 00             	mov    (%rax),%rax
  2085aa:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2085af:	b8 40 00 00 00       	mov    $0x40,%eax
  2085b4:	48 29 c8             	sub    %rcx,%rax
  2085b7:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2085bc:	0f 92 c0             	setb   %al
  2085bf:	a8 01                	test   $0x1,%al
  2085c1:	75 46                	jne    208609 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h1f3955de0bf3912cE+0x119>
  2085c3:	eb 1a                	jmp    2085df <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h1f3955de0bf3912cE+0xef>
                assert!(range.start < range.end);
  2085c5:	48 8d 3d a9 82 ff ff 	lea    -0x7d57(%rip),%rdi        # 200875 <str.0+0x1b5>
  2085cc:	48 8d 15 c5 a9 00 00 	lea    0xa9c5(%rip),%rdx        # 212f98 <memset+0x16b8>
  2085d3:	be 29 00 00 00       	mov    $0x29,%esi
  2085d8:	e8 b3 68 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2085dd:	0f 0b                	ud2    
  2085df:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  2085e4:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
                let bits = *self << (Self::BIT_LENGTH - range.end) >> (Self::BIT_LENGTH - range.end);
  2085e9:	48 89 c8             	mov    %rcx,%rax
  2085ec:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  2085f0:	48 83 f8 00          	cmp    $0x0,%rax
  2085f4:	0f 95 c0             	setne  %al
  2085f7:	48 83 e1 3f          	and    $0x3f,%rcx
  2085fb:	48 d3 e2             	shl    %cl,%rdx
  2085fe:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  208603:	a8 01                	test   $0x1,%al
  208605:	75 37                	jne    20863e <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h1f3955de0bf3912cE+0x14e>
  208607:	eb 1a                	jmp    208623 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h1f3955de0bf3912cE+0x133>
  208609:	48 8d 3d 90 82 ff ff 	lea    -0x7d70(%rip),%rdi        # 2008a0 <str.0>
  208610:	48 8d 15 81 a9 00 00 	lea    0xa981(%rip),%rdx        # 212f98 <memset+0x16b8>
  208617:	be 21 00 00 00       	mov    $0x21,%esi
  20861c:	e8 6f 68 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208621:	0f 0b                	ud2    
  208623:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  208628:	b8 40 00 00 00       	mov    $0x40,%eax
  20862d:	48 29 c8             	sub    %rcx,%rax
  208630:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  208635:	0f 92 c0             	setb   %al
  208638:	a8 01                	test   $0x1,%al
  20863a:	75 46                	jne    208682 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h1f3955de0bf3912cE+0x192>
  20863c:	eb 1a                	jmp    208658 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h1f3955de0bf3912cE+0x168>
  20863e:	48 8d 3d 8b 82 ff ff 	lea    -0x7d75(%rip),%rdi        # 2008d0 <str.1>
  208645:	48 8d 15 4c a9 00 00 	lea    0xa94c(%rip),%rdx        # 212f98 <memset+0x16b8>
  20864c:	be 23 00 00 00       	mov    $0x23,%esi
  208651:	e8 3a 68 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208656:	0f 0b                	ud2    
  208658:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  20865d:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  208662:	48 89 c8             	mov    %rcx,%rax
  208665:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  208669:	48 83 f8 00          	cmp    $0x0,%rax
  20866d:	0f 95 c0             	setne  %al
  208670:	48 83 e1 3f          	and    $0x3f,%rcx
  208674:	48 d3 ea             	shr    %cl,%rdx
  208677:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  20867c:	a8 01                	test   $0x1,%al
  20867e:	75 4a                	jne    2086ca <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h1f3955de0bf3912cE+0x1da>
  208680:	eb 1a                	jmp    20869c <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h1f3955de0bf3912cE+0x1ac>
  208682:	48 8d 3d 17 82 ff ff 	lea    -0x7de9(%rip),%rdi        # 2008a0 <str.0>
  208689:	48 8d 15 08 a9 00 00 	lea    0xa908(%rip),%rdx        # 212f98 <memset+0x16b8>
  208690:	be 21 00 00 00       	mov    $0x21,%esi
  208695:	e8 f6 67 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20869a:	0f 0b                	ud2    
  20869c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2086a1:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  2086a6:	48 89 54 24 70       	mov    %rdx,0x70(%rsp)
                bits >> range.start
  2086ab:	48 89 c8             	mov    %rcx,%rax
  2086ae:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  2086b2:	48 83 f8 00          	cmp    $0x0,%rax
  2086b6:	0f 95 c0             	setne  %al
  2086b9:	48 83 e1 3f          	and    $0x3f,%rcx
  2086bd:	48 d3 ea             	shr    %cl,%rdx
  2086c0:	48 89 14 24          	mov    %rdx,(%rsp)
  2086c4:	a8 01                	test   $0x1,%al
  2086c6:	75 1e                	jne    2086e6 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h1f3955de0bf3912cE+0x1f6>
  2086c8:	eb 1a                	jmp    2086e4 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h1f3955de0bf3912cE+0x1f4>
                let bits = *self << (Self::BIT_LENGTH - range.end) >> (Self::BIT_LENGTH - range.end);
  2086ca:	48 8d 3d 2f 82 ff ff 	lea    -0x7dd1(%rip),%rdi        # 200900 <str.2>
  2086d1:	48 8d 15 c0 a8 00 00 	lea    0xa8c0(%rip),%rdx        # 212f98 <memset+0x16b8>
  2086d8:	be 24 00 00 00       	mov    $0x24,%esi
  2086dd:	e8 ae 67 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2086e2:	0f 0b                	ud2    
            }
  2086e4:	eb 1a                	jmp    208700 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8get_bits17h1f3955de0bf3912cE+0x210>
                bits >> range.start
  2086e6:	48 8d 3d 13 82 ff ff 	lea    -0x7ded(%rip),%rdi        # 200900 <str.2>
  2086ed:	48 8d 15 a4 a8 00 00 	lea    0xa8a4(%rip),%rdx        # 212f98 <memset+0x16b8>
  2086f4:	be 24 00 00 00       	mov    $0x24,%esi
  2086f9:	e8 92 67 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2086fe:	0f 0b                	ud2    
  208700:	48 8b 04 24          	mov    (%rsp),%rax
            }
  208704:	48 83 c4 78          	add    $0x78,%rsp
  208708:	c3                   	retq   
  208709:	cc                   	int3   
  20870a:	cc                   	int3   
  20870b:	cc                   	int3   
  20870c:	cc                   	int3   
  20870d:	cc                   	int3   
  20870e:	cc                   	int3   
  20870f:	cc                   	int3   

0000000000208710 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE>:
            fn set_bits<T: RangeBounds<usize>>(&mut self, range: T, value: Self) -> &mut Self {
  208710:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
  208717:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
  20871c:	48 89 7c 24 78       	mov    %rdi,0x78(%rsp)
  208721:	48 89 b4 24 90 00 00 	mov    %rsi,0x90(%rsp)
  208728:	00 
  208729:	48 89 94 24 98 00 00 	mov    %rdx,0x98(%rsp)
  208730:	00 
  208731:	48 89 bc 24 a0 00 00 	mov    %rdi,0xa0(%rsp)
  208738:	00 
  208739:	48 89 8c 24 a8 00 00 	mov    %rcx,0xa8(%rsp)
  208740:	00 
                let range = to_regular_range(&range, Self::BIT_LENGTH);
  208741:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  208748:	00 
  208749:	be 40 00 00 00       	mov    $0x40,%esi
  20874e:	e8 6d 04 00 00       	callq  208bc0 <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE>
  208753:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  20875a:	00 
  20875b:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
  208762:	00 
  208763:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  20876a:	00 
  20876b:	48 89 94 24 b8 00 00 	mov    %rdx,0xb8(%rsp)
  208772:	00 
  208773:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  20877a:	00 
                assert!(range.start < Self::BIT_LENGTH);
  20877b:	48 83 f8 40          	cmp    $0x40,%rax
  20877f:	0f 92 c0             	setb   %al
  208782:	34 ff                	xor    $0xff,%al
  208784:	a8 01                	test   $0x1,%al
  208786:	75 17                	jne    20879f <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x8f>
  208788:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  20878f:	00 
                assert!(range.end <= Self::BIT_LENGTH);
  208790:	48 83 f8 40          	cmp    $0x40,%rax
  208794:	0f 96 c0             	setbe  %al
  208797:	34 ff                	xor    $0xff,%al
  208799:	a8 01                	test   $0x1,%al
  20879b:	75 3a                	jne    2087d7 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0xc7>
  20879d:	eb 1a                	jmp    2087b9 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0xa9>
                assert!(range.start < Self::BIT_LENGTH);
  20879f:	48 8d 3d 15 80 ff ff 	lea    -0x7feb(%rip),%rdi        # 2007bb <str.0+0xfb>
  2087a6:	48 8d 15 eb a7 00 00 	lea    0xa7eb(%rip),%rdx        # 212f98 <memset+0x16b8>
  2087ad:	be 30 00 00 00       	mov    $0x30,%esi
  2087b2:	e8 d9 66 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2087b7:	0f 0b                	ud2    
  2087b9:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  2087c0:	00 
  2087c1:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  2087c8:	00 
                assert!(range.start < range.end);
  2087c9:	48 39 c8             	cmp    %rcx,%rax
  2087cc:	0f 92 c0             	setb   %al
  2087cf:	34 ff                	xor    $0xff,%al
  2087d1:	a8 01                	test   $0x1,%al
  2087d3:	75 3d                	jne    208812 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x102>
  2087d5:	eb 1a                	jmp    2087f1 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0xe1>
                assert!(range.end <= Self::BIT_LENGTH);
  2087d7:	48 8d 3d 68 80 ff ff 	lea    -0x7f98(%rip),%rdi        # 200846 <str.0+0x186>
  2087de:	48 8d 15 b3 a7 00 00 	lea    0xa7b3(%rip),%rdx        # 212f98 <memset+0x16b8>
  2087e5:	be 2f 00 00 00       	mov    $0x2f,%esi
  2087ea:	e8 a1 66 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2087ef:	0f 0b                	ud2    
  2087f1:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  2087f8:	00 
  2087f9:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  208800:	00 
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  208801:	48 29 c8             	sub    %rcx,%rax
  208804:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  208809:	0f 92 c0             	setb   %al
  20880c:	a8 01                	test   $0x1,%al
  20880e:	75 37                	jne    208847 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x137>
  208810:	eb 1a                	jmp    20882c <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x11c>
                assert!(range.start < range.end);
  208812:	48 8d 3d 5c 80 ff ff 	lea    -0x7fa4(%rip),%rdi        # 200875 <str.0+0x1b5>
  208819:	48 8d 15 78 a7 00 00 	lea    0xa778(%rip),%rdx        # 212f98 <memset+0x16b8>
  208820:	be 29 00 00 00       	mov    $0x29,%esi
  208825:	e8 66 66 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20882a:	0f 0b                	ud2    
  20882c:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  208831:	b8 40 00 00 00       	mov    $0x40,%eax
  208836:	48 29 c8             	sub    %rcx,%rax
  208839:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  20883e:	0f 92 c0             	setb   %al
  208841:	a8 01                	test   $0x1,%al
  208843:	75 46                	jne    20888b <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x17b>
  208845:	eb 1a                	jmp    208861 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x151>
  208847:	48 8d 3d 52 80 ff ff 	lea    -0x7fae(%rip),%rdi        # 2008a0 <str.0>
  20884e:	48 8d 15 43 a7 00 00 	lea    0xa743(%rip),%rdx        # 212f98 <memset+0x16b8>
  208855:	be 21 00 00 00       	mov    $0x21,%esi
  20885a:	e8 31 66 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20885f:	0f 0b                	ud2    
  208861:	48 8b 54 24 70       	mov    0x70(%rsp),%rdx
  208866:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  20886b:	48 89 c8             	mov    %rcx,%rax
  20886e:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  208872:	48 83 f8 00          	cmp    $0x0,%rax
  208876:	0f 95 c0             	setne  %al
  208879:	48 83 e1 3f          	and    $0x3f,%rcx
  20887d:	48 d3 e2             	shl    %cl,%rdx
  208880:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  208885:	a8 01                	test   $0x1,%al
  208887:	75 3d                	jne    2088c6 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x1b6>
  208889:	eb 1a                	jmp    2088a5 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x195>
  20888b:	48 8d 3d 0e 80 ff ff 	lea    -0x7ff2(%rip),%rdi        # 2008a0 <str.0>
  208892:	48 8d 15 ff a6 00 00 	lea    0xa6ff(%rip),%rdx        # 212f98 <memset+0x16b8>
  208899:	be 21 00 00 00       	mov    $0x21,%esi
  20889e:	e8 ed 65 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2088a3:	0f 0b                	ud2    
  2088a5:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  2088ac:	00 
  2088ad:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  2088b4:	00 
                        (Self::BIT_LENGTH - (range.end - range.start)) == value,
  2088b5:	48 29 c8             	sub    %rcx,%rax
  2088b8:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  2088bd:	0f 92 c0             	setb   %al
  2088c0:	a8 01                	test   $0x1,%al
  2088c2:	75 37                	jne    2088fb <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x1eb>
  2088c4:	eb 1a                	jmp    2088e0 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x1d0>
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  2088c6:	48 8d 3d 03 80 ff ff 	lea    -0x7ffd(%rip),%rdi        # 2008d0 <str.1>
  2088cd:	48 8d 15 c4 a6 00 00 	lea    0xa6c4(%rip),%rdx        # 212f98 <memset+0x16b8>
  2088d4:	be 23 00 00 00       	mov    $0x23,%esi
  2088d9:	e8 b2 65 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2088de:	0f 0b                	ud2    
  2088e0:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
                        (Self::BIT_LENGTH - (range.end - range.start)) == value,
  2088e5:	b8 40 00 00 00       	mov    $0x40,%eax
  2088ea:	48 29 c8             	sub    %rcx,%rax
  2088ed:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  2088f2:	0f 92 c0             	setb   %al
  2088f5:	a8 01                	test   $0x1,%al
  2088f7:	75 46                	jne    20893f <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x22f>
  2088f9:	eb 1a                	jmp    208915 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x205>
  2088fb:	48 8d 3d 9e 7f ff ff 	lea    -0x8062(%rip),%rdi        # 2008a0 <str.0>
  208902:	48 8d 15 8f a6 00 00 	lea    0xa68f(%rip),%rdx        # 212f98 <memset+0x16b8>
  208909:	be 21 00 00 00       	mov    $0x21,%esi
  20890e:	e8 7d 65 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208913:	0f 0b                	ud2    
  208915:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  20891a:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  20891f:	48 89 c8             	mov    %rcx,%rax
  208922:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  208926:	48 83 f8 00          	cmp    $0x0,%rax
  20892a:	0f 95 c0             	setne  %al
  20892d:	48 83 e1 3f          	and    $0x3f,%rcx
  208931:	48 d3 ea             	shr    %cl,%rdx
  208934:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  208939:	a8 01                	test   $0x1,%al
  20893b:	75 34                	jne    208971 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x261>
  20893d:	eb 1a                	jmp    208959 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x249>
                        (Self::BIT_LENGTH - (range.end - range.start)) == value,
  20893f:	48 8d 3d 5a 7f ff ff 	lea    -0x80a6(%rip),%rdi        # 2008a0 <str.0>
  208946:	48 8d 15 4b a6 00 00 	lea    0xa64b(%rip),%rdx        # 212f98 <memset+0x16b8>
  20894d:	be 21 00 00 00       	mov    $0x21,%esi
  208952:	e8 39 65 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208957:	0f 0b                	ud2    
  208959:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20895e:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  208963:	48 39 c8             	cmp    %rcx,%rax
  208966:	0f 94 c0             	sete   %al
  208969:	34 ff                	xor    $0xff,%al
  20896b:	a8 01                	test   $0x1,%al
  20896d:	75 3a                	jne    2089a9 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x299>
  20896f:	eb 1a                	jmp    20898b <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x27b>
  208971:	48 8d 3d 88 7f ff ff 	lea    -0x8078(%rip),%rdi        # 200900 <str.2>
  208978:	48 8d 15 19 a6 00 00 	lea    0xa619(%rip),%rdx        # 212f98 <memset+0x16b8>
  20897f:	be 24 00 00 00       	mov    $0x24,%esi
  208984:	e8 07 65 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208989:	0f 0b                	ud2    
  20898b:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  208992:	00 
                let bitmask: Self = !(!0 << (Self::BIT_LENGTH - range.end) >>
  208993:	b8 40 00 00 00       	mov    $0x40,%eax
  208998:	48 29 c8             	sub    %rcx,%rax
  20899b:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2089a0:	0f 92 c0             	setb   %al
  2089a3:	a8 01                	test   $0x1,%al
  2089a5:	75 48                	jne    2089ef <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x2df>
  2089a7:	eb 1a                	jmp    2089c3 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x2b3>
                assert!(value << (Self::BIT_LENGTH - (range.end - range.start)) >>
  2089a9:	48 8d 3d 74 7f ff ff 	lea    -0x808c(%rip),%rdi        # 200924 <str.2+0x24>
  2089b0:	48 8d 15 e1 a5 00 00 	lea    0xa5e1(%rip),%rdx        # 212f98 <memset+0x16b8>
  2089b7:	be 21 00 00 00       	mov    $0x21,%esi
  2089bc:	e8 cf 64 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  2089c1:	0f 0b                	ud2    
  2089c3:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
                let bitmask: Self = !(!0 << (Self::BIT_LENGTH - range.end) >>
  2089c8:	48 89 c8             	mov    %rcx,%rax
  2089cb:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  2089cf:	48 83 f8 00          	cmp    $0x0,%rax
  2089d3:	0f 95 c0             	setne  %al
  2089d6:	48 83 e1 3f          	and    $0x3f,%rcx
  2089da:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  2089e1:	48 d3 e2             	shl    %cl,%rdx
  2089e4:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  2089e9:	a8 01                	test   $0x1,%al
  2089eb:	75 3a                	jne    208a27 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x317>
  2089ed:	eb 1a                	jmp    208a09 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x2f9>
  2089ef:	48 8d 3d aa 7e ff ff 	lea    -0x8156(%rip),%rdi        # 2008a0 <str.0>
  2089f6:	48 8d 15 9b a5 00 00 	lea    0xa59b(%rip),%rdx        # 212f98 <memset+0x16b8>
  2089fd:	be 21 00 00 00       	mov    $0x21,%esi
  208a02:	e8 89 64 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208a07:	0f 0b                	ud2    
  208a09:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  208a10:	00 
                                    (Self::BIT_LENGTH - range.end) >>
  208a11:	b8 40 00 00 00       	mov    $0x40,%eax
  208a16:	48 29 c8             	sub    %rcx,%rax
  208a19:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  208a1e:	0f 92 c0             	setb   %al
  208a21:	a8 01                	test   $0x1,%al
  208a23:	75 46                	jne    208a6b <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x35b>
  208a25:	eb 1a                	jmp    208a41 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x331>
                let bitmask: Self = !(!0 << (Self::BIT_LENGTH - range.end) >>
  208a27:	48 8d 3d a2 7e ff ff 	lea    -0x815e(%rip),%rdi        # 2008d0 <str.1>
  208a2e:	48 8d 15 63 a5 00 00 	lea    0xa563(%rip),%rdx        # 212f98 <memset+0x16b8>
  208a35:	be 23 00 00 00       	mov    $0x23,%esi
  208a3a:	e8 51 64 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208a3f:	0f 0b                	ud2    
  208a41:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  208a46:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  208a4b:	48 89 c8             	mov    %rcx,%rax
  208a4e:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  208a52:	48 83 f8 00          	cmp    $0x0,%rax
  208a56:	0f 95 c0             	setne  %al
  208a59:	48 83 e1 3f          	and    $0x3f,%rcx
  208a5d:	48 d3 ea             	shr    %cl,%rdx
  208a60:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  208a65:	a8 01                	test   $0x1,%al
  208a67:	75 49                	jne    208ab2 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x3a2>
  208a69:	eb 1a                	jmp    208a85 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x375>
                                    (Self::BIT_LENGTH - range.end) >>
  208a6b:	48 8d 3d 2e 7e ff ff 	lea    -0x81d2(%rip),%rdi        # 2008a0 <str.0>
  208a72:	48 8d 15 1f a5 00 00 	lea    0xa51f(%rip),%rdx        # 212f98 <memset+0x16b8>
  208a79:	be 21 00 00 00       	mov    $0x21,%esi
  208a7e:	e8 0d 64 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208a83:	0f 0b                	ud2    
  208a85:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  208a8a:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  208a91:	00 
                let bitmask: Self = !(!0 << (Self::BIT_LENGTH - range.end) >>
  208a92:	48 89 c8             	mov    %rcx,%rax
  208a95:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  208a99:	48 83 f8 00          	cmp    $0x0,%rax
  208a9d:	0f 95 c0             	setne  %al
  208aa0:	48 83 e1 3f          	and    $0x3f,%rcx
  208aa4:	48 d3 ea             	shr    %cl,%rdx
  208aa7:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  208aac:	a8 01                	test   $0x1,%al
  208aae:	75 49                	jne    208af9 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x3e9>
  208ab0:	eb 1a                	jmp    208acc <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x3bc>
  208ab2:	48 8d 3d 47 7e ff ff 	lea    -0x81b9(%rip),%rdi        # 200900 <str.2>
  208ab9:	48 8d 15 d8 a4 00 00 	lea    0xa4d8(%rip),%rdx        # 212f98 <memset+0x16b8>
  208ac0:	be 24 00 00 00       	mov    $0x24,%esi
  208ac5:	e8 c6 63 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208aca:	0f 0b                	ud2    
  208acc:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  208ad1:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  208ad8:	00 
  208ad9:	48 89 c8             	mov    %rcx,%rax
  208adc:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  208ae0:	48 83 f8 00          	cmp    $0x0,%rax
  208ae4:	0f 95 c0             	setne  %al
  208ae7:	48 83 e1 3f          	and    $0x3f,%rcx
  208aeb:	48 d3 e2             	shl    %cl,%rdx
  208aee:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  208af3:	a8 01                	test   $0x1,%al
  208af5:	75 66                	jne    208b5d <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x44d>
  208af7:	eb 1a                	jmp    208b13 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x403>
  208af9:	48 8d 3d 00 7e ff ff 	lea    -0x8200(%rip),%rdi        # 200900 <str.2>
  208b00:	48 8d 15 91 a4 00 00 	lea    0xa491(%rip),%rdx        # 212f98 <memset+0x16b8>
  208b07:	be 24 00 00 00       	mov    $0x24,%esi
  208b0c:	e8 7f 63 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208b11:	0f 0b                	ud2    
  208b13:	48 8b 54 24 70       	mov    0x70(%rsp),%rdx
  208b18:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  208b1f:	00 
  208b20:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
  208b25:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  208b2a:	48 83 f0 ff          	xor    $0xffffffffffffffff,%rax
  208b2e:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  208b35:	00 
                *self = (*self & bitmask) | (value << range.start);
  208b36:	48 23 06             	and    (%rsi),%rax
  208b39:	48 89 04 24          	mov    %rax,(%rsp)
  208b3d:	48 89 c8             	mov    %rcx,%rax
  208b40:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  208b44:	48 83 f8 00          	cmp    $0x0,%rax
  208b48:	0f 95 c0             	setne  %al
  208b4b:	48 83 e1 3f          	and    $0x3f,%rcx
  208b4f:	48 d3 e2             	shl    %cl,%rdx
  208b52:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  208b57:	a8 01                	test   $0x1,%al
  208b59:	75 32                	jne    208b8d <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x47d>
  208b5b:	eb 1a                	jmp    208b77 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x467>
                let bitmask: Self = !(!0 << (Self::BIT_LENGTH - range.end) >>
  208b5d:	48 8d 3d 6c 7d ff ff 	lea    -0x8294(%rip),%rdi        # 2008d0 <str.1>
  208b64:	48 8d 15 2d a4 00 00 	lea    0xa42d(%rip),%rdx        # 212f98 <memset+0x16b8>
  208b6b:	be 23 00 00 00       	mov    $0x23,%esi
  208b70:	e8 1b 63 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208b75:	0f 0b                	ud2    
  208b77:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  208b7c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  208b81:	48 8b 0c 24          	mov    (%rsp),%rcx
                *self = (*self & bitmask) | (value << range.start);
  208b85:	48 09 d1             	or     %rdx,%rcx
  208b88:	48 89 08             	mov    %rcx,(%rax)
            }
  208b8b:	eb 1a                	jmp    208ba7 <_ZN43_$LT$u64$u20$as$u20$bit_field..BitField$GT$8set_bits17h7c6c0ba821b4456cE+0x497>
                *self = (*self & bitmask) | (value << range.start);
  208b8d:	48 8d 3d 3c 7d ff ff 	lea    -0x82c4(%rip),%rdi        # 2008d0 <str.1>
  208b94:	48 8d 15 fd a3 00 00 	lea    0xa3fd(%rip),%rdx        # 212f98 <memset+0x16b8>
  208b9b:	be 23 00 00 00       	mov    $0x23,%esi
  208ba0:	e8 eb 62 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208ba5:	0f 0b                	ud2    
  208ba7:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
            }
  208bac:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
  208bb3:	c3                   	retq   
  208bb4:	cc                   	int3   
  208bb5:	cc                   	int3   
  208bb6:	cc                   	int3   
  208bb7:	cc                   	int3   
  208bb8:	cc                   	int3   
  208bb9:	cc                   	int3   
  208bba:	cc                   	int3   
  208bbb:	cc                   	int3   
  208bbc:	cc                   	int3   
  208bbd:	cc                   	int3   
  208bbe:	cc                   	int3   
  208bbf:	cc                   	int3   

0000000000208bc0 <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE>:
            );
        }
    }
}

fn to_regular_range<T: RangeBounds<usize>>(generic_rage: &T, bit_length: usize) -> Range<usize> {
  208bc0:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  208bc7:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  208bcc:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  208bd1:	48 89 7c 24 78       	mov    %rdi,0x78(%rsp)
  208bd6:	48 89 b4 24 80 00 00 	mov    %rsi,0x80(%rsp)
  208bdd:	00 
    let start = match generic_rage.start_bound() {
  208bde:	e8 ed 07 00 00       	callq  2093d0 <_ZN91_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..ops..range..RangeBounds$LT$T$GT$$GT$11start_bound17h20cb731e70ea6ee0E>
  208be3:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  208be8:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  208bed:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  208bf2:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  208bf7:	48 85 c0             	test   %rax,%rax
  208bfa:	74 13                	je     208c0f <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE+0x4f>
  208bfc:	eb 00                	jmp    208bfe <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE+0x3e>
  208bfe:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  208c03:	48 83 e8 01          	sub    $0x1,%rax
  208c07:	74 1d                	je     208c26 <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE+0x66>
  208c09:	eb 00                	jmp    208c0b <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE+0x4b>
  208c0b:	eb 3b                	jmp    208c48 <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE+0x88>
  208c0d:	0f 0b                	ud2    
        Bound::Excluded(&value) => value + 1,
        Bound::Included(&value) => value,
  208c0f:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  208c14:	48 8b 00             	mov    (%rax),%rax
  208c17:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  208c1e:	00 
  208c1f:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  208c24:	eb 2b                	jmp    208c51 <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE+0x91>
        Bound::Excluded(&value) => value + 1,
  208c26:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  208c2b:	48 8b 00             	mov    (%rax),%rax
  208c2e:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  208c35:	00 
  208c36:	48 83 c0 01          	add    $0x1,%rax
  208c3a:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  208c3f:	0f 92 c0             	setb   %al
  208c42:	a8 01                	test   $0x1,%al
  208c44:	75 2d                	jne    208c73 <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE+0xb3>
  208c46:	eb 1f                	jmp    208c67 <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE+0xa7>
        Bound::Unbounded => 0,
  208c48:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  208c4f:	00 00 
  208c51:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
    };
    let end = match generic_rage.end_bound() {
  208c56:	e8 a5 07 00 00       	callq  209400 <_ZN91_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..ops..range..RangeBounds$LT$T$GT$$GT$9end_bound17h47dca5317176713dE>
  208c5b:	48 89 54 24 70       	mov    %rdx,0x70(%rsp)
  208c60:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  208c65:	eb 26                	jmp    208c8d <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE+0xcd>
  208c67:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
        Bound::Excluded(&value) => value + 1,
  208c6c:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  208c71:	eb de                	jmp    208c51 <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE+0x91>
  208c73:	48 8d 3d d6 7c ff ff 	lea    -0x832a(%rip),%rdi        # 200950 <str.3>
  208c7a:	48 8d 15 2f a3 00 00 	lea    0xa32f(%rip),%rdx        # 212fb0 <memset+0x16d0>
  208c81:	be 1c 00 00 00       	mov    $0x1c,%esi
  208c86:	e8 05 62 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208c8b:	0f 0b                	ud2    
    let end = match generic_rage.end_bound() {
  208c8d:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  208c92:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  208c97:	48 85 c0             	test   %rax,%rax
  208c9a:	74 13                	je     208caf <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE+0xef>
  208c9c:	eb 00                	jmp    208c9e <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE+0xde>
  208c9e:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  208ca3:	48 83 e8 01          	sub    $0x1,%rax
  208ca7:	74 28                	je     208cd1 <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE+0x111>
  208ca9:	eb 00                	jmp    208cab <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE+0xeb>
  208cab:	eb 3b                	jmp    208ce8 <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE+0x128>
  208cad:	0f 0b                	ud2    
        Bound::Excluded(&value) => value,
        Bound::Included(&value) => value + 1,
  208caf:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  208cb4:	48 8b 00             	mov    (%rax),%rax
  208cb7:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  208cbe:	00 
  208cbf:	48 83 c0 01          	add    $0x1,%rax
  208cc3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  208cc8:	0f 92 c0             	setb   %al
  208ccb:	a8 01                	test   $0x1,%al
  208ccd:	75 55                	jne    208d24 <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE+0x164>
  208ccf:	eb 47                	jmp    208d18 <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE+0x158>
        Bound::Excluded(&value) => value,
  208cd1:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  208cd6:	48 8b 00             	mov    (%rax),%rax
  208cd9:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  208ce0:	00 
  208ce1:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  208ce6:	eb 0a                	jmp    208cf2 <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE+0x132>
  208ce8:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
        Bound::Unbounded => bit_length,
  208ced:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
    };

    start..end
  208cf2:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
  208cf7:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  208cfc:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  208d01:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
}
  208d06:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  208d0b:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  208d10:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  208d17:	c3                   	retq   
  208d18:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
        Bound::Included(&value) => value + 1,
  208d1d:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  208d22:	eb ce                	jmp    208cf2 <_ZN9bit_field16to_regular_range17hb537d1c53667a8cfE+0x132>
  208d24:	48 8d 3d 25 7c ff ff 	lea    -0x83db(%rip),%rdi        # 200950 <str.3>
  208d2b:	48 8d 15 96 a2 00 00 	lea    0xa296(%rip),%rdx        # 212fc8 <memset+0x16e8>
  208d32:	be 1c 00 00 00       	mov    $0x1c,%esi
  208d37:	e8 54 61 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  208d3c:	0f 0b                	ud2    
  208d3e:	cc                   	int3   
  208d3f:	cc                   	int3   

0000000000208d40 <_ZN61_$LT$r3_kernel..logging..KernelLogger$u20$as$u20$log..Log$GT$7enabled17hffaa0d0f99793618E>:
        }
    );
}

impl log::Log for KernelLogger {
    fn enabled(&self, _meta: &Metadata) -> bool {
  208d40:	48 83 ec 10          	sub    $0x10,%rsp
  208d44:	48 89 3c 24          	mov    %rdi,(%rsp)
  208d48:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
        // TOOD: Add level based filtering
        true
    }
  208d4d:	b0 01                	mov    $0x1,%al
  208d4f:	24 01                	and    $0x1,%al
  208d51:	0f b6 c0             	movzbl %al,%eax
  208d54:	48 83 c4 10          	add    $0x10,%rsp
  208d58:	c3                   	retq   
  208d59:	cc                   	int3   
  208d5a:	cc                   	int3   
  208d5b:	cc                   	int3   
  208d5c:	cc                   	int3   
  208d5d:	cc                   	int3   
  208d5e:	cc                   	int3   
  208d5f:	cc                   	int3   

0000000000208d60 <_ZN61_$LT$r3_kernel..logging..KernelLogger$u20$as$u20$log..Log$GT$3log17hcf887e24457215f6E>:

    fn log(&self, record: &Record) {
  208d60:	48 81 ec 68 01 00 00 	sub    $0x168,%rsp
  208d67:	48 89 b4 24 80 00 00 	mov    %rsi,0x80(%rsp)
  208d6e:	00 
  208d6f:	48 89 bc 24 38 01 00 	mov    %rdi,0x138(%rsp)
  208d76:	00 
  208d77:	48 89 b4 24 40 01 00 	mov    %rsi,0x140(%rsp)
  208d7e:	00 
        // TODO: Add level wise filtering and support multiple channels
        print_uart!(
  208d7f:	48 8d 3d 79 7d ff ff 	lea    -0x8287(%rip),%rdi        # 200aff <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E>
  208d86:	e8 d5 10 00 00       	callq  209e60 <_ZN81_$LT$r3_kernel..drivers..uart..UART_DRIVER$u20$as$u20$core..ops..deref..Deref$GT$5deref17hf02e002ef2b5b6e1E>
  208d8b:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  208d92:	00 
  208d93:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  208d9a:	00 
  208d9b:	e8 70 bd ff ff       	callq  204b10 <_ZN4core6option15Option$LT$T$GT$7is_some17hf8aefa45402bfb24E>
  208da0:	88 44 24 7f          	mov    %al,0x7f(%rsp)
  208da4:	8a 44 24 7f          	mov    0x7f(%rsp),%al
  208da8:	a8 01                	test   $0x1,%al
  208daa:	75 0a                	jne    208db6 <_ZN61_$LT$r3_kernel..logging..KernelLogger$u20$as$u20$log..Log$GT$3log17hcf887e24457215f6E+0x56>
  208dac:	eb 00                	jmp    208dae <_ZN61_$LT$r3_kernel..logging..KernelLogger$u20$as$u20$log..Log$GT$3log17hcf887e24457215f6E+0x4e>
            "{:20} {:5} {}",
            record.target(),
            record.level(),
            record.args()
        );
    }
  208dae:	48 81 c4 68 01 00 00 	add    $0x168,%rsp
  208db5:	c3                   	retq   
        print_uart!(
  208db6:	48 8d 3d 42 7d ff ff 	lea    -0x82be(%rip),%rdi        # 200aff <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E>
  208dbd:	e8 9e 10 00 00       	callq  209e60 <_ZN81_$LT$r3_kernel..drivers..uart..UART_DRIVER$u20$as$u20$core..ops..deref..Deref$GT$5deref17hf02e002ef2b5b6e1E>
  208dc2:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  208dc7:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  208dcc:	e8 af bb ff ff       	callq  204980 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb788dc157266f297E>
  208dd1:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  208dd6:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  208ddb:	48 8d 35 fe a1 00 00 	lea    0xa1fe(%rip),%rsi        # 212fe0 <memset+0x1700>
  208de2:	e8 89 bc ff ff       	callq  204a70 <_ZN4core6option15Option$LT$T$GT$6unwrap17hbbf896873896ed21E>
  208de7:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  208dec:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
  208df3:	00 
  208df4:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  208df9:	e8 52 dd ff ff       	callq  206b50 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17hec36eaefd6fec6a2E>
  208dfe:	48 89 94 24 98 00 00 	mov    %rdx,0x98(%rsp)
  208e05:	00 
  208e06:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  208e0d:	00 
  208e0e:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  208e15:	00 
  208e16:	e8 b5 dd ff ff       	callq  206bd0 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h54ef8133560726b4E>
  208e1b:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  208e20:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
  208e27:	00 
            record.target(),
  208e28:	e8 c3 bd ff ff       	callq  204bf0 <_ZN3log6Record6target17h7f5fb57e8f9ebb4eE>
  208e2d:	48 89 94 24 20 01 00 	mov    %rdx,0x120(%rsp)
  208e34:	00 
  208e35:	48 89 84 24 18 01 00 	mov    %rax,0x118(%rsp)
  208e3c:	00 
  208e3d:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
  208e44:	00 
            record.level(),
  208e45:	e8 86 bd ff ff       	callq  204bd0 <_ZN3log6Record5level17h9ec9075ad9e549b9E>
  208e4a:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
  208e51:	00 
  208e52:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
  208e59:	00 
            record.args()
  208e5a:	e8 61 bd ff ff       	callq  204bc0 <_ZN3log6Record4args17h00da0becc25b6d80E>
  208e5f:	48 89 84 24 30 01 00 	mov    %rax,0x130(%rsp)
  208e66:	00 
        print_uart!(
  208e67:	48 8d 84 24 18 01 00 	lea    0x118(%rsp),%rax
  208e6e:	00 
  208e6f:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  208e76:	00 
  208e77:	48 8d 84 24 28 01 00 	lea    0x128(%rsp),%rax
  208e7e:	00 
  208e7f:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  208e86:	00 
  208e87:	48 8d 84 24 30 01 00 	lea    0x130(%rsp),%rax
  208e8e:	00 
  208e8f:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  208e96:	00 
  208e97:	48 8b bc 24 00 01 00 	mov    0x100(%rsp),%rdi
  208e9e:	00 
  208e9f:	48 89 bc 24 50 01 00 	mov    %rdi,0x150(%rsp)
  208ea6:	00 
  208ea7:	48 8b 84 24 08 01 00 	mov    0x108(%rsp),%rax
  208eae:	00 
  208eaf:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  208eb4:	48 89 84 24 58 01 00 	mov    %rax,0x158(%rsp)
  208ebb:	00 
  208ebc:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
  208ec3:	00 
  208ec4:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  208ec9:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
  208ed0:	00 
  208ed1:	48 8b 35 50 ac 00 00 	mov    0xac50(%rip),%rsi        # 213b28 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xa0>
  208ed8:	e8 63 46 00 00       	callq  20d540 <_ZN4core3fmt10ArgumentV13new17hd157b7d17257c7eaE>
  208edd:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  208ee2:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  208ee7:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  208eec:	48 8b 35 3d ac 00 00 	mov    0xac3d(%rip),%rsi        # 213b30 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xa8>
  208ef3:	e8 08 1e 00 00       	callq  20ad00 <_ZN4core3fmt10ArgumentV13new17hbc228f159b345650E>
  208ef8:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  208efd:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  208f02:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  208f07:	48 8d 35 e2 1b 00 00 	lea    0x1be2(%rip),%rsi        # 20aaf0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h31b8a77bb6ae052eE>
  208f0e:	e8 8d 1d 00 00       	callq  20aca0 <_ZN4core3fmt10ArgumentV13new17h6660be7cf414b0ecE>
  208f13:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  208f18:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  208f1d:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  208f22:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  208f27:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  208f2c:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  208f31:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
  208f36:	4c 8b 44 24 48       	mov    0x48(%rsp),%r8
  208f3b:	4c 89 84 24 d0 00 00 	mov    %r8,0xd0(%rsp)
  208f42:	00 
  208f43:	48 89 bc 24 d8 00 00 	mov    %rdi,0xd8(%rsp)
  208f4a:	00 
  208f4b:	48 89 b4 24 e0 00 00 	mov    %rsi,0xe0(%rsp)
  208f52:	00 
  208f53:	48 89 94 24 e8 00 00 	mov    %rdx,0xe8(%rsp)
  208f5a:	00 
  208f5b:	48 89 8c 24 f0 00 00 	mov    %rcx,0xf0(%rsp)
  208f62:	00 
  208f63:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  208f6a:	00 
  208f6b:	48 8d 84 24 d0 00 00 	lea    0xd0(%rsp),%rax
  208f72:	00 
  208f73:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  208f78:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  208f7d:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  208f84:	00 
  208f85:	48 8d 35 6c a0 00 00 	lea    0xa06c(%rip),%rsi        # 212ff8 <memset+0x1718>
  208f8c:	ba 04 00 00 00       	mov    $0x4,%edx
  208f91:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  208f97:	4c 8d 0d e2 79 ff ff 	lea    -0x861e(%rip),%r9        # 200980 <str.3+0x30>
  208f9e:	48 c7 04 24 03 00 00 	movq   $0x3,(%rsp)
  208fa5:	00 
  208fa6:	e8 05 b7 ff ff       	callq  2046b0 <_ZN4core3fmt9Arguments16new_v1_formatted17hbeddea28af1cc014E>
  208fab:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
  208fb0:	48 8d b4 24 a0 00 00 	lea    0xa0(%rsp),%rsi
  208fb7:	00 
  208fb8:	e8 93 dc ff ff       	callq  206c50 <_ZN4core3fmt5Write9write_fmt17ha4961bdedbae3b7aE>
  208fbd:	88 44 24 0f          	mov    %al,0xf(%rsp)
  208fc1:	8a 44 24 0f          	mov    0xf(%rsp),%al
  208fc5:	0f b6 f8             	movzbl %al,%edi
  208fc8:	83 e7 01             	and    $0x1,%edi
  208fcb:	48 8d 35 0e a0 00 00 	lea    0xa00e(%rip),%rsi        # 212fe0 <memset+0x1700>
  208fd2:	e8 a9 14 00 00       	callq  20a480 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h8b100da12d68ca68E>
  208fd7:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  208fde:	00 
  208fdf:	e8 dc 2d 00 00       	callq  20bdc0 <_ZN4core3ptr82drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..drivers..uart..UART$GT$$GT$17h26685a7b93c5d71bE>
  208fe4:	e9 c5 fd ff ff       	jmpq   208dae <_ZN61_$LT$r3_kernel..logging..KernelLogger$u20$as$u20$log..Log$GT$3log17hcf887e24457215f6E+0x4e>
  208fe9:	cc                   	int3   
  208fea:	cc                   	int3   
  208feb:	cc                   	int3   
  208fec:	cc                   	int3   
  208fed:	cc                   	int3   
  208fee:	cc                   	int3   
  208fef:	cc                   	int3   

0000000000208ff0 <_ZN61_$LT$r3_kernel..logging..KernelLogger$u20$as$u20$log..Log$GT$5flush17he7f1c735fab399deE>:

    fn flush(&self) {
  208ff0:	50                   	push   %rax
  208ff1:	48 89 3c 24          	mov    %rdi,(%rsp)
        // TODO: Will be used in future for dmesg
    }
  208ff5:	58                   	pop    %rax
  208ff6:	c3                   	retq   
  208ff7:	cc                   	int3   
  208ff8:	cc                   	int3   
  208ff9:	cc                   	int3   
  208ffa:	cc                   	int3   
  208ffb:	cc                   	int3   
  208ffc:	cc                   	int3   
  208ffd:	cc                   	int3   
  208ffe:	cc                   	int3   
  208fff:	cc                   	int3   

0000000000209000 <_ZN9r3_kernel7logging4init17h8bae91a50c531e46E>:
}

static KERNEL_LOGGER: KernelLogger = KernelLogger;

pub fn init() {
  209000:	50                   	push   %rax
    // unuse the result
    let _ = log::set_logger(&KERNEL_LOGGER);
  209001:	48 8d 3d 20 7a ff ff 	lea    -0x85e0(%rip),%rdi        # 200a28 <_ZN9r3_kernel7logging13KERNEL_LOGGER17h6e20b121c23bb05dE>
  209008:	48 8d 35 41 a0 00 00 	lea    0xa041(%rip),%rsi        # 213050 <memset+0x1770>
  20900f:	e8 1c 35 00 00       	callq  20c530 <_ZN3log10set_logger17ha1c2327ac82037ebE>
    log::set_max_level(LevelFilter::Debug);
  209014:	48 c7 04 24 04 00 00 	movq   $0x4,(%rsp)
  20901b:	00 
  20901c:	48 8b 3c 24          	mov    (%rsp),%rdi
  209020:	e8 6b bb ff ff       	callq  204b90 <_ZN3log13set_max_level17hde76aa4dc95feb85E>
}
  209025:	58                   	pop    %rax
  209026:	c3                   	retq   
  209027:	cc                   	int3   
  209028:	cc                   	int3   
  209029:	cc                   	int3   
  20902a:	cc                   	int3   
  20902b:	cc                   	int3   
  20902c:	cc                   	int3   
  20902d:	cc                   	int3   
  20902e:	cc                   	int3   
  20902f:	cc                   	int3   

0000000000209030 <rust_begin_unwind>:

#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
  209030:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  209037:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
    // write the panic info and loop infinitely:
    log::error!("{}", info);
  20903c:	48 c7 44 24 20 01 00 	movq   $0x1,0x20(%rsp)
  209043:	00 00 
  209045:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  20904a:	48 8d 35 e7 72 ff ff 	lea    -0x8d19(%rip),%rsi        # 200338 <str.0+0x38>
  209051:	e8 ea bb ff ff       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  209056:	88 44 24 17          	mov    %al,0x17(%rsp)
  20905a:	8a 44 24 17          	mov    0x17(%rsp),%al
  20905e:	a8 01                	test   $0x1,%al
  209060:	75 09                	jne    20906b <rust_begin_unwind+0x3b>
  209062:	eb 00                	jmp    209064 <rust_begin_unwind+0x34>
  209064:	c6 44 24 2f 00       	movb   $0x0,0x2f(%rsp)
  209069:	eb 4e                	jmp    2090b9 <rust_begin_unwind+0x89>
  20906b:	c6 84 24 8f 00 00 00 	movb   $0x0,0x8f(%rsp)
  209072:	00 
  209073:	48 8b 3d 6e aa 00 00 	mov    0xaa6e(%rip),%rdi        # 213ae8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  20907a:	0f b6 b4 24 8f 00 00 	movzbl 0x8f(%rsp),%esi
  209081:	00 
  209082:	e8 49 18 00 00       	callq  20a8d0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  209087:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  20908e:	00 
  20908f:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  209096:	00 
  209097:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20909c:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  2090a1:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
  2090a6:	e8 95 bb ff ff       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  2090ab:	88 44 24 16          	mov    %al,0x16(%rsp)
  2090af:	8a 44 24 16          	mov    0x16(%rsp),%al
  2090b3:	24 01                	and    $0x1,%al
  2090b5:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  2090b9:	f6 44 24 2f 01       	testb  $0x1,0x2f(%rsp)
  2090be:	75 02                	jne    2090c2 <rust_begin_unwind+0x92>
    loop {}
  2090c0:	eb fe                	jmp    2090c0 <rust_begin_unwind+0x90>
    log::error!("{}", info);
  2090c2:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  2090c7:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  2090cc:	48 8b 7c 24 78       	mov    0x78(%rsp),%rdi
  2090d1:	48 89 bc 24 80 00 00 	mov    %rdi,0x80(%rsp)
  2090d8:	00 
  2090d9:	48 8d 35 e0 19 00 00 	lea    0x19e0(%rip),%rsi        # 20aac0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h7e2a421563bf9ca4E>
  2090e0:	e8 fb 1a 00 00       	callq  20abe0 <_ZN4core3fmt10ArgumentV13new17h3a05cfc231554408E>
  2090e5:	48 89 04 24          	mov    %rax,(%rsp)
  2090e9:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  2090ee:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2090f3:	48 8b 0c 24          	mov    (%rsp),%rcx
  2090f7:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  2090fc:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  209101:	48 8d 4c 24 68       	lea    0x68(%rsp),%rcx
  209106:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  20910b:	48 8d 35 76 9f 00 00 	lea    0x9f76(%rip),%rsi        # 213088 <memset+0x17a8>
  209112:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  209118:	4c 89 c2             	mov    %r8,%rdx
  20911b:	e8 f0 b5 ff ff       	callq  204710 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  209120:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  209125:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  20912a:	48 8d 15 67 9f 00 00 	lea    0x9f67(%rip),%rdx        # 213098 <memset+0x17b8>
  209131:	e8 fa 35 00 00       	callq  20c730 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  209136:	eb 88                	jmp    2090c0 <rust_begin_unwind+0x90>
  209138:	cc                   	int3   
  209139:	cc                   	int3   
  20913a:	cc                   	int3   
  20913b:	cc                   	int3   
  20913c:	cc                   	int3   
  20913d:	cc                   	int3   
  20913e:	cc                   	int3   
  20913f:	cc                   	int3   

0000000000209140 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h6957ef6876b66198E>:
        // so the call to `add` is safe.
        unsafe { ptr::slice_from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start) }
    }

    #[inline]
    unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut [T] {
  209140:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  209147:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  20914c:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  209151:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  209156:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20915b:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  209160:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  209165:	48 89 54 24 78       	mov    %rdx,0x78(%rsp)
  20916a:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  209171:	00 
  209172:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  209177:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  20917c:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  209181:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  209186:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  20918b:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  209190:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
        T: Sized,
    {
        // SAFETY: the caller must uphold the safety contract for `offset`.
        // The obtained pointer is valid for writes since the caller must
        // guarantee that it points to the same allocated object as `self`.
        unsafe { intrinsics::offset(self, count) as *mut T }
  209195:	48 01 c8             	add    %rcx,%rax
  209198:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  20919d:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  2091a2:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2091a7:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  2091ac:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2091b1:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
        // SAFETY: see comments for `get_unchecked` above.
        unsafe {
            ptr::slice_from_raw_parts_mut(slice.as_mut_ptr().add(self.start), self.end - self.start)
  2091b6:	48 29 c6             	sub    %rax,%rsi
  2091b9:	e8 62 47 00 00       	callq  20d920 <_ZN4core3ptr24slice_from_raw_parts_mut17h0feb238084e3de0dE>
  2091be:	48 89 04 24          	mov    %rax,(%rsp)
  2091c2:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  2091c7:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2091cc:	48 8b 04 24          	mov    (%rsp),%rax
        }
    }
  2091d0:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  2091d7:	c3                   	retq   
  2091d8:	cc                   	int3   
  2091d9:	cc                   	int3   
  2091da:	cc                   	int3   
  2091db:	cc                   	int3   
  2091dc:	cc                   	int3   
  2091dd:	cc                   	int3   
  2091de:	cc                   	int3   
  2091df:	cc                   	int3   

00000000002091e0 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17he5178de3c8d2a4b4E>:
        // SAFETY: `self` is checked to be valid and in bounds above.
        unsafe { &*self.get_unchecked(slice) }
    }

    #[inline]
    fn index_mut(self, slice: &mut [T]) -> &mut [T] {
  2091e0:	48 83 ec 58          	sub    $0x58,%rsp
  2091e4:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
  2091e9:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  2091ee:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  2091f3:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  2091f8:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  2091fd:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  209202:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  209207:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  20920c:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
        if self.start > self.end {
  209211:	48 39 f7             	cmp    %rsi,%rdi
  209214:	77 11                	ja     209227 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17he5178de3c8d2a4b4E+0x47>
  209216:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  20921b:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
            slice_index_order_fail(self.start, self.end);
        } else if self.end > slice.len() {
  209220:	48 39 c8             	cmp    %rcx,%rax
  209223:	77 3c                	ja     209261 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17he5178de3c8d2a4b4E+0x81>
  209225:	eb 16                	jmp    20923d <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17he5178de3c8d2a4b4E+0x5d>
  209227:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  20922c:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  209231:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
            slice_index_order_fail(self.start, self.end);
  209236:	e8 55 60 00 00       	callq  20f290 <_ZN4core5slice5index22slice_index_order_fail17h868ee97645e1c235E>
  20923b:	0f 0b                	ud2    
  20923d:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  209242:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  209247:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  20924c:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
            slice_end_index_len_fail(self.end, slice.len());
        }
        // SAFETY: `self` is checked to be valid and in bounds above.
        unsafe { &mut *self.get_unchecked_mut(slice) }
  209251:	e8 ea fe ff ff       	callq  209140 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h6957ef6876b66198E>
  209256:	48 89 04 24          	mov    %rax,(%rsp)
  20925a:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  20925f:	eb 16                	jmp    209277 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17he5178de3c8d2a4b4E+0x97>
  209261:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  209266:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  20926b:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
            slice_end_index_len_fail(self.end, slice.len());
  209270:	e8 9b 5f 00 00       	callq  20f210 <_ZN4core5slice5index24slice_end_index_len_fail17hd3ce060961fc7915E>
  209275:	0f 0b                	ud2    
  209277:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  20927c:	48 8b 04 24          	mov    (%rsp),%rax
    }
  209280:	48 83 c4 58          	add    $0x58,%rsp
  209284:	c3                   	retq   
  209285:	cc                   	int3   
  209286:	cc                   	int3   
  209287:	cc                   	int3   
  209288:	cc                   	int3   
  209289:	cc                   	int3   
  20928a:	cc                   	int3   
  20928b:	cc                   	int3   
  20928c:	cc                   	int3   
  20928d:	cc                   	int3   
  20928e:	cc                   	int3   
  20928f:	cc                   	int3   

0000000000209290 <_ZN108_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h5113fb0e44857482E>:
    fn index(self, slice: &[T]) -> &[T] {
        (0..self.end).index(slice)
    }

    #[inline]
    fn index_mut(self, slice: &mut [T]) -> &mut [T] {
  209290:	48 83 ec 38          	sub    $0x38,%rsp
  209294:	49 89 c8             	mov    %rcx,%r8
  209297:	48 89 d1             	mov    %rdx,%rcx
  20929a:	48 89 f2             	mov    %rsi,%rdx
  20929d:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  2092a2:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  2092a7:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
        (0..self.end).index_mut(slice)
  2092ac:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  2092b3:	00 00 
  2092b5:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2092ba:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  2092bf:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  2092c4:	e8 17 ff ff ff       	callq  2091e0 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17he5178de3c8d2a4b4E>
  2092c9:	48 89 04 24          	mov    %rax,(%rsp)
  2092cd:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  2092d2:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2092d7:	48 8b 04 24          	mov    (%rsp),%rax
    }
  2092db:	48 83 c4 38          	add    $0x38,%rsp
  2092df:	c3                   	retq   

00000000002092e0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hde79bfc4fb025d57E>:
#[stable(feature = "rust1", since = "1.0.0")]
impl<A: Step> Iterator for ops::Range<A> {
    type Item = A;

    #[inline]
    fn next(&mut self) -> Option<A> {
  2092e0:	48 83 ec 18          	sub    $0x18,%rsp
  2092e4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.spec_next()
  2092e9:	e8 42 00 00 00       	callq  209330 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17hfc35a46a6ce5feecE>
  2092ee:	48 89 04 24          	mov    %rax,(%rsp)
  2092f2:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  2092f7:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2092fc:	48 8b 04 24          	mov    (%rsp),%rax
    }
  209300:	48 83 c4 18          	add    $0x18,%rsp
  209304:	c3                   	retq   
  209305:	cc                   	int3   
  209306:	cc                   	int3   
  209307:	cc                   	int3   
  209308:	cc                   	int3   
  209309:	cc                   	int3   
  20930a:	cc                   	int3   
  20930b:	cc                   	int3   
  20930c:	cc                   	int3   
  20930d:	cc                   	int3   
  20930e:	cc                   	int3   
  20930f:	cc                   	int3   

0000000000209310 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17haabf9c3393bbf5bcE>:
impl<I: Iterator> IntoIterator for I {
    type Item = I::Item;
    type IntoIter = I;

    #[inline]
    fn into_iter(self) -> I {
  209310:	48 83 ec 10          	sub    $0x10,%rsp
  209314:	48 89 f2             	mov    %rsi,%rdx
  209317:	48 89 f8             	mov    %rdi,%rax
  20931a:	48 89 04 24          	mov    %rax,(%rsp)
  20931e:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
        self
    }
  209323:	48 83 c4 10          	add    $0x10,%rsp
  209327:	c3                   	retq   
  209328:	cc                   	int3   
  209329:	cc                   	int3   
  20932a:	cc                   	int3   
  20932b:	cc                   	int3   
  20932c:	cc                   	int3   
  20932d:	cc                   	int3   
  20932e:	cc                   	int3   
  20932f:	cc                   	int3   

0000000000209330 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17hfc35a46a6ce5feecE>:
    fn spec_next(&mut self) -> Option<T> {
  209330:	48 83 ec 48          	sub    $0x48,%rsp
  209334:	48 89 fe             	mov    %rdi,%rsi
  209337:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  20933c:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
        if self.start < self.end {
  209341:	48 89 f7             	mov    %rsi,%rdi
  209344:	48 83 c6 08          	add    $0x8,%rsi
  209348:	e8 23 2b 00 00       	callq  20be70 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17hfaed2971c47496d3E>
  20934d:	88 44 24 27          	mov    %al,0x27(%rsp)
  209351:	8a 44 24 27          	mov    0x27(%rsp),%al
  209355:	a8 01                	test   $0x1,%al
  209357:	75 0d                	jne    209366 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17hfc35a46a6ce5feecE+0x36>
  209359:	eb 00                	jmp    20935b <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17hfc35a46a6ce5feecE+0x2b>
            None
  20935b:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  209362:	00 00 
        if self.start < self.end {
  209364:	eb 4d                	jmp    2093b3 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17hfc35a46a6ce5feecE+0x83>
  209366:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
            let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
  20936b:	e8 70 b4 ff ff       	callq  2047e0 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$usize$GT$5clone17hb2fa8fb2c422790fE>
  209370:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  209375:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  20937a:	be 01 00 00 00       	mov    $0x1,%esi
  20937f:	e8 9c 2b 00 00       	callq  20bf20 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h80a022844752abc3E>
  209384:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  209389:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20938e:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  209393:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
            Some(mem::replace(&mut self.start, n))
  209398:	e8 63 d3 ff ff       	callq  206700 <_ZN4core3mem7replace17h73afdf1293179534E>
  20939d:	48 89 04 24          	mov    %rax,(%rsp)
  2093a1:	48 8b 04 24          	mov    (%rsp),%rax
  2093a5:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  2093aa:	48 c7 44 24 28 01 00 	movq   $0x1,0x28(%rsp)
  2093b1:	00 00 
    }
  2093b3:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  2093b8:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  2093bd:	48 83 c4 48          	add    $0x48,%rsp
  2093c1:	c3                   	retq   
  2093c2:	cc                   	int3   
  2093c3:	cc                   	int3   
  2093c4:	cc                   	int3   
  2093c5:	cc                   	int3   
  2093c6:	cc                   	int3   
  2093c7:	cc                   	int3   
  2093c8:	cc                   	int3   
  2093c9:	cc                   	int3   
  2093ca:	cc                   	int3   
  2093cb:	cc                   	int3   
  2093cc:	cc                   	int3   
  2093cd:	cc                   	int3   
  2093ce:	cc                   	int3   
  2093cf:	cc                   	int3   

00000000002093d0 <_ZN91_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..ops..range..RangeBounds$LT$T$GT$$GT$11start_bound17h20cb731e70ea6ee0E>:
    }
}

#[stable(feature = "collections_range", since = "1.28.0")]
impl<T> RangeBounds<T> for Range<T> {
    fn start_bound(&self) -> Bound<&T> {
  2093d0:	48 83 ec 18          	sub    $0x18,%rsp
  2093d4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        Included(&self.start)
  2093d9:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  2093de:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
  2093e5:	00 
    }
  2093e6:	48 8b 04 24          	mov    (%rsp),%rax
  2093ea:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2093ef:	48 83 c4 18          	add    $0x18,%rsp
  2093f3:	c3                   	retq   
  2093f4:	cc                   	int3   
  2093f5:	cc                   	int3   
  2093f6:	cc                   	int3   
  2093f7:	cc                   	int3   
  2093f8:	cc                   	int3   
  2093f9:	cc                   	int3   
  2093fa:	cc                   	int3   
  2093fb:	cc                   	int3   
  2093fc:	cc                   	int3   
  2093fd:	cc                   	int3   
  2093fe:	cc                   	int3   
  2093ff:	cc                   	int3   

0000000000209400 <_ZN91_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..ops..range..RangeBounds$LT$T$GT$$GT$9end_bound17h47dca5317176713dE>:
    fn end_bound(&self) -> Bound<&T> {
  209400:	48 83 ec 18          	sub    $0x18,%rsp
  209404:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        Excluded(&self.end)
  209409:	48 83 c7 08          	add    $0x8,%rdi
  20940d:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  209412:	48 c7 04 24 01 00 00 	movq   $0x1,(%rsp)
  209419:	00 
    }
  20941a:	48 8b 04 24          	mov    (%rsp),%rax
  20941e:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  209423:	48 83 c4 18          	add    $0x18,%rsp
  209427:	c3                   	retq   
  209428:	cc                   	int3   
  209429:	cc                   	int3   
  20942a:	cc                   	int3   
  20942b:	cc                   	int3   
  20942c:	cc                   	int3   
  20942d:	cc                   	int3   
  20942e:	cc                   	int3   
  20942f:	cc                   	int3   

0000000000209430 <_ZN97_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h5ccb660a8b622ab1E>:
    fn index(self, slice: &[T]) -> &[T] {
        slice
    }

    #[inline]
    fn index_mut(self, slice: &mut [T]) -> &mut [T] {
  209430:	48 83 ec 18          	sub    $0x18,%rsp
  209434:	48 89 f2             	mov    %rsi,%rdx
  209437:	48 89 f8             	mov    %rdi,%rax
  20943a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20943f:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
        slice
    }
  209444:	48 83 c4 18          	add    $0x18,%rsp
  209448:	c3                   	retq   
  209449:	cc                   	int3   
  20944a:	cc                   	int3   
  20944b:	cc                   	int3   
  20944c:	cc                   	int3   
  20944d:	cc                   	int3   
  20944e:	cc                   	int3   
  20944f:	cc                   	int3   

0000000000209450 <_ZN4core4char7methods15encode_utf8_raw17h2164891e7362f189E>:
/// Panics if the buffer is not large enough.
/// A buffer of length four is large enough to encode any `char`.
#[unstable(feature = "char_internals", reason = "exposed only for libstd", issue = "none")]
#[doc(hidden)]
#[inline]
pub fn encode_utf8_raw(code: u32, dst: &mut [u8]) -> &mut [u8] {
  209450:	48 81 ec a8 01 00 00 	sub    $0x1a8,%rsp
  209457:	48 89 54 24 70       	mov    %rdx,0x70(%rsp)
  20945c:	48 89 74 24 78       	mov    %rsi,0x78(%rsp)
  209461:	89 bc 24 84 00 00 00 	mov    %edi,0x84(%rsp)
  209468:	48 89 b4 24 30 01 00 	mov    %rsi,0x130(%rsp)
  20946f:	00 
  209470:	48 89 94 24 38 01 00 	mov    %rdx,0x138(%rsp)
  209477:	00 
    let len = len_utf8(code);
  209478:	8b bc 24 84 00 00 00 	mov    0x84(%rsp),%edi
  20947f:	e8 4c 04 00 00       	callq  2098d0 <_ZN4core4char7methods8len_utf817hc1b852a0617788b8E>
  209484:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  20948b:	00 
  20948c:	48 8b 74 24 70       	mov    0x70(%rsp),%rsi
  209491:	48 8b 7c 24 78       	mov    0x78(%rsp),%rdi
    match (len, &mut dst[..]) {
  209496:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  20949d:	00 
  20949e:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  2094a3:	48 8d 15 26 9c 00 00 	lea    0x9c26(%rip),%rdx        # 2130d0 <memset+0x17f0>
  2094aa:	e8 91 eb ff ff       	callq  208040 <_ZN4core5slice5index77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc83c78073ebc3b89E>
  2094af:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  2094b4:	48 89 54 24 68       	mov    %rdx,0x68(%rsp)
  2094b9:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  2094be:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  2094c3:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  2094c8:	48 89 94 24 90 00 00 	mov    %rdx,0x90(%rsp)
  2094cf:	00 
  2094d0:	48 89 8c 24 98 00 00 	mov    %rcx,0x98(%rsp)
  2094d7:	00 
  2094d8:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  2094df:	00 
  2094e0:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  2094e7:	00 
  2094e8:	48 83 c0 ff          	add    $0xffffffffffffffff,%rax
  2094ec:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  2094f1:	48 83 e8 03          	sub    $0x3,%rax
  2094f5:	77 15                	ja     20950c <_ZN4core4char7methods15encode_utf8_raw17h2164891e7362f189E+0xbc>
  2094f7:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  2094fc:	48 8d 0d 39 75 ff ff 	lea    -0x8ac7(%rip),%rcx        # 200a3c <_ZN9r3_kernel7logging13KERNEL_LOGGER17h6e20b121c23bb05dE+0x14>
  209503:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  209507:	48 01 c8             	add    %rcx,%rax
  20950a:	ff e0                	jmpq   *%rax
  20950c:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
        }
        _ => panic!(
            "encode_utf8: need {} bytes to encode U+{:X}, but the buffer has {}",
            len,
            code,
            dst.len(),
  209511:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
  209518:	00 
        _ => panic!(
  209519:	48 8d 84 24 88 00 00 	lea    0x88(%rsp),%rax
  209520:	00 
  209521:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  209528:	00 
  209529:	48 8d 84 24 84 00 00 	lea    0x84(%rsp),%rax
  209530:	00 
  209531:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  209538:	00 
  209539:	48 8d 84 24 20 01 00 	lea    0x120(%rsp),%rax
  209540:	00 
  209541:	48 89 84 24 18 01 00 	mov    %rax,0x118(%rsp)
  209548:	00 
  209549:	48 8b bc 24 08 01 00 	mov    0x108(%rsp),%rdi
  209550:	00 
  209551:	48 89 bc 24 90 01 00 	mov    %rdi,0x190(%rsp)
  209558:	00 
  209559:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
  209560:	00 
  209561:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  209566:	48 89 84 24 98 01 00 	mov    %rax,0x198(%rsp)
  20956d:	00 
  20956e:	48 8b 84 24 18 01 00 	mov    0x118(%rsp),%rax
  209575:	00 
  209576:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20957b:	48 89 84 24 a0 01 00 	mov    %rax,0x1a0(%rsp)
  209582:	00 
  209583:	48 8b 35 8e a5 00 00 	mov    0xa58e(%rip),%rsi        # 213b18 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x90>
  20958a:	e8 31 18 00 00       	callq  20adc0 <_ZN4core3fmt10ArgumentV13new17hdc56630c0a43f264E>
  20958f:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  209594:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  209599:	e9 21 02 00 00       	jmpq   2097bf <_ZN4core4char7methods15encode_utf8_raw17h2164891e7362f189E+0x36f>
        (1, [a, ..]) => {
  20959e:	48 83 bc 24 a0 00 00 	cmpq   $0x1,0xa0(%rsp)
  2095a5:	00 01 
  2095a7:	0f 83 e2 01 00 00    	jae    20978f <_ZN4core4char7methods15encode_utf8_raw17h2164891e7362f189E+0x33f>
  2095ad:	e9 5a ff ff ff       	jmpq   20950c <_ZN4core4char7methods15encode_utf8_raw17h2164891e7362f189E+0xbc>
        (2, [a, b, ..]) => {
  2095b2:	48 83 bc 24 a0 00 00 	cmpq   $0x2,0xa0(%rsp)
  2095b9:	00 02 
  2095bb:	0f 83 80 01 00 00    	jae    209741 <_ZN4core4char7methods15encode_utf8_raw17h2164891e7362f189E+0x2f1>
  2095c1:	e9 46 ff ff ff       	jmpq   20950c <_ZN4core4char7methods15encode_utf8_raw17h2164891e7362f189E+0xbc>
        (3, [a, b, c, ..]) => {
  2095c6:	48 83 bc 24 a0 00 00 	cmpq   $0x3,0xa0(%rsp)
  2095cd:	00 03 
  2095cf:	0f 83 f2 00 00 00    	jae    2096c7 <_ZN4core4char7methods15encode_utf8_raw17h2164891e7362f189E+0x277>
  2095d5:	e9 32 ff ff ff       	jmpq   20950c <_ZN4core4char7methods15encode_utf8_raw17h2164891e7362f189E+0xbc>
        (4, [a, b, c, d, ..]) => {
  2095da:	48 83 bc 24 a0 00 00 	cmpq   $0x4,0xa0(%rsp)
  2095e1:	00 04 
  2095e3:	0f 82 23 ff ff ff    	jb     20950c <_ZN4core4char7methods15encode_utf8_raw17h2164891e7362f189E+0xbc>
  2095e9:	48 8b b4 24 98 00 00 	mov    0x98(%rsp),%rsi
  2095f0:	00 
  2095f1:	48 89 b4 24 40 01 00 	mov    %rsi,0x140(%rsp)
  2095f8:	00 
  2095f9:	48 8b 94 24 98 00 00 	mov    0x98(%rsp),%rdx
  209600:	00 
  209601:	48 89 d0             	mov    %rdx,%rax
  209604:	48 83 c0 01          	add    $0x1,%rax
  209608:	48 89 84 24 48 01 00 	mov    %rax,0x148(%rsp)
  20960f:	00 
  209610:	48 8b 8c 24 98 00 00 	mov    0x98(%rsp),%rcx
  209617:	00 
  209618:	48 89 c8             	mov    %rcx,%rax
  20961b:	48 83 c0 02          	add    $0x2,%rax
  20961f:	48 89 84 24 50 01 00 	mov    %rax,0x150(%rsp)
  209626:	00 
  209627:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  20962e:	00 
  20962f:	48 89 c7             	mov    %rax,%rdi
  209632:	48 83 c7 03          	add    $0x3,%rdi
  209636:	48 89 bc 24 58 01 00 	mov    %rdi,0x158(%rsp)
  20963d:	00 
            *a = (code >> 18 & 0x07) as u8 | TAG_FOUR_B;
  20963e:	8b bc 24 84 00 00 00 	mov    0x84(%rsp),%edi
  209645:	c1 ef 12             	shr    $0x12,%edi
  209648:	83 e7 07             	and    $0x7,%edi
  20964b:	40 80 cf f0          	or     $0xf0,%dil
  20964f:	40 88 3e             	mov    %dil,(%rsi)
            *b = (code >> 12 & 0x3F) as u8 | TAG_CONT;
  209652:	8b b4 24 84 00 00 00 	mov    0x84(%rsp),%esi
  209659:	c1 ee 0c             	shr    $0xc,%esi
  20965c:	83 e6 3f             	and    $0x3f,%esi
  20965f:	40 80 ce 80          	or     $0x80,%sil
  209663:	40 88 72 01          	mov    %sil,0x1(%rdx)
            *c = (code >> 6 & 0x3F) as u8 | TAG_CONT;
  209667:	8b 94 24 84 00 00 00 	mov    0x84(%rsp),%edx
  20966e:	c1 ea 06             	shr    $0x6,%edx
  209671:	83 e2 3f             	and    $0x3f,%edx
  209674:	80 ca 80             	or     $0x80,%dl
  209677:	88 51 02             	mov    %dl,0x2(%rcx)
            *d = (code & 0x3F) as u8 | TAG_CONT;
  20967a:	8b 8c 24 84 00 00 00 	mov    0x84(%rsp),%ecx
  209681:	83 e1 3f             	and    $0x3f,%ecx
  209684:	80 c9 80             	or     $0x80,%cl
  209687:	88 48 03             	mov    %cl,0x3(%rax)
  20968a:	48 8b 74 24 70       	mov    0x70(%rsp),%rsi
  20968f:	48 8b 7c 24 78       	mov    0x78(%rsp),%rdi
        ),
    };
    &mut dst[..len]
  209694:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  20969b:	00 
  20969c:	48 89 84 24 28 01 00 	mov    %rax,0x128(%rsp)
  2096a3:	00 
  2096a4:	48 8b 94 24 28 01 00 	mov    0x128(%rsp),%rdx
  2096ab:	00 
  2096ac:	48 8d 0d 35 9a 00 00 	lea    0x9a35(%rip),%rcx        # 2130e8 <memset+0x1808>
  2096b3:	e8 38 e9 ff ff       	callq  207ff0 <_ZN4core5slice5index77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hb66ea3ee7d7e4e38E>
  2096b8:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  2096bd:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  2096c2:	e9 e6 00 00 00       	jmpq   2097ad <_ZN4core4char7methods15encode_utf8_raw17h2164891e7362f189E+0x35d>
        (3, [a, b, c, ..]) => {
  2096c7:	48 8b 94 24 98 00 00 	mov    0x98(%rsp),%rdx
  2096ce:	00 
  2096cf:	48 89 94 24 60 01 00 	mov    %rdx,0x160(%rsp)
  2096d6:	00 
  2096d7:	48 8b 8c 24 98 00 00 	mov    0x98(%rsp),%rcx
  2096de:	00 
  2096df:	48 89 c8             	mov    %rcx,%rax
  2096e2:	48 83 c0 01          	add    $0x1,%rax
  2096e6:	48 89 84 24 68 01 00 	mov    %rax,0x168(%rsp)
  2096ed:	00 
  2096ee:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  2096f5:	00 
  2096f6:	48 89 c6             	mov    %rax,%rsi
  2096f9:	48 83 c6 02          	add    $0x2,%rsi
  2096fd:	48 89 b4 24 70 01 00 	mov    %rsi,0x170(%rsp)
  209704:	00 
            *a = (code >> 12 & 0x0F) as u8 | TAG_THREE_B;
  209705:	8b b4 24 84 00 00 00 	mov    0x84(%rsp),%esi
  20970c:	c1 ee 0c             	shr    $0xc,%esi
  20970f:	83 e6 0f             	and    $0xf,%esi
  209712:	40 80 ce e0          	or     $0xe0,%sil
  209716:	40 88 32             	mov    %sil,(%rdx)
            *b = (code >> 6 & 0x3F) as u8 | TAG_CONT;
  209719:	8b 94 24 84 00 00 00 	mov    0x84(%rsp),%edx
  209720:	c1 ea 06             	shr    $0x6,%edx
  209723:	83 e2 3f             	and    $0x3f,%edx
  209726:	80 ca 80             	or     $0x80,%dl
  209729:	88 51 01             	mov    %dl,0x1(%rcx)
            *c = (code & 0x3F) as u8 | TAG_CONT;
  20972c:	8b 8c 24 84 00 00 00 	mov    0x84(%rsp),%ecx
  209733:	83 e1 3f             	and    $0x3f,%ecx
  209736:	80 c9 80             	or     $0x80,%cl
  209739:	88 48 02             	mov    %cl,0x2(%rax)
        }
  20973c:	e9 49 ff ff ff       	jmpq   20968a <_ZN4core4char7methods15encode_utf8_raw17h2164891e7362f189E+0x23a>
        (2, [a, b, ..]) => {
  209741:	48 8b 8c 24 98 00 00 	mov    0x98(%rsp),%rcx
  209748:	00 
  209749:	48 89 8c 24 78 01 00 	mov    %rcx,0x178(%rsp)
  209750:	00 
  209751:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  209758:	00 
  209759:	48 89 c2             	mov    %rax,%rdx
  20975c:	48 83 c2 01          	add    $0x1,%rdx
  209760:	48 89 94 24 80 01 00 	mov    %rdx,0x180(%rsp)
  209767:	00 
            *a = (code >> 6 & 0x1F) as u8 | TAG_TWO_B;
  209768:	8b 94 24 84 00 00 00 	mov    0x84(%rsp),%edx
  20976f:	c1 ea 06             	shr    $0x6,%edx
  209772:	83 e2 1f             	and    $0x1f,%edx
  209775:	80 ca c0             	or     $0xc0,%dl
  209778:	88 11                	mov    %dl,(%rcx)
            *b = (code & 0x3F) as u8 | TAG_CONT;
  20977a:	8b 8c 24 84 00 00 00 	mov    0x84(%rsp),%ecx
  209781:	83 e1 3f             	and    $0x3f,%ecx
  209784:	80 c9 80             	or     $0x80,%cl
  209787:	88 48 01             	mov    %cl,0x1(%rax)
        }
  20978a:	e9 fb fe ff ff       	jmpq   20968a <_ZN4core4char7methods15encode_utf8_raw17h2164891e7362f189E+0x23a>
        (1, [a, ..]) => {
  20978f:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  209796:	00 
  209797:	48 89 84 24 88 01 00 	mov    %rax,0x188(%rsp)
  20979e:	00 
            *a = code as u8;
  20979f:	8b 8c 24 84 00 00 00 	mov    0x84(%rsp),%ecx
  2097a6:	88 08                	mov    %cl,(%rax)
        }
  2097a8:	e9 dd fe ff ff       	jmpq   20968a <_ZN4core4char7methods15encode_utf8_raw17h2164891e7362f189E+0x23a>
  2097ad:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  2097b2:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
}
  2097b7:	48 81 c4 a8 01 00 00 	add    $0x1a8,%rsp
  2097be:	c3                   	retq   
  2097bf:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
        _ => panic!(
  2097c4:	48 8b 35 6d a3 00 00 	mov    0xa36d(%rip),%rsi        # 213b38 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xb0>
  2097cb:	e8 50 16 00 00       	callq  20ae20 <_ZN4core3fmt10ArgumentV13new17heaaa3a467d979ad9E>
  2097d0:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  2097d5:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  2097da:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  2097df:	48 8b 35 32 a3 00 00 	mov    0xa332(%rip),%rsi        # 213b18 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x90>
  2097e6:	e8 d5 15 00 00       	callq  20adc0 <_ZN4core3fmt10ArgumentV13new17hdc56630c0a43f264E>
  2097eb:	48 89 04 24          	mov    %rax,(%rsp)
  2097ef:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  2097f4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2097f9:	48 8b 0c 24          	mov    (%rsp),%rcx
  2097fd:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  209802:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  209807:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  20980c:	4c 8b 44 24 40       	mov    0x40(%rsp),%r8
  209811:	4c 89 84 24 d8 00 00 	mov    %r8,0xd8(%rsp)
  209818:	00 
  209819:	48 89 bc 24 e0 00 00 	mov    %rdi,0xe0(%rsp)
  209820:	00 
  209821:	48 89 b4 24 e8 00 00 	mov    %rsi,0xe8(%rsp)
  209828:	00 
  209829:	48 89 94 24 f0 00 00 	mov    %rdx,0xf0(%rsp)
  209830:	00 
  209831:	48 89 8c 24 f8 00 00 	mov    %rcx,0xf8(%rsp)
  209838:	00 
  209839:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  209840:	00 
  209841:	48 8d 8c 24 d8 00 00 	lea    0xd8(%rsp),%rcx
  209848:	00 
  209849:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  209850:	00 
  209851:	48 8d 35 a8 98 00 00 	lea    0x98a8(%rip),%rsi        # 213100 <memset+0x1820>
  209858:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  20985e:	4c 89 c2             	mov    %r8,%rdx
  209861:	e8 aa ae ff ff       	callq  204710 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  209866:	48 8d 35 c3 98 00 00 	lea    0x98c3(%rip),%rsi        # 213130 <memset+0x1850>
  20986d:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  209874:	00 
  209875:	e8 e6 56 00 00       	callq  20ef60 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  20987a:	0f 0b                	ud2    
  20987c:	cc                   	int3   
  20987d:	cc                   	int3   
  20987e:	cc                   	int3   
  20987f:	cc                   	int3   

0000000000209880 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$11encode_utf817ha8814ecebb05de4fE>:
    pub fn encode_utf8(self, dst: &mut [u8]) -> &mut str {
  209880:	48 83 ec 38          	sub    $0x38,%rsp
  209884:	89 7c 24 24          	mov    %edi,0x24(%rsp)
  209888:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  20988d:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
        unsafe { from_utf8_unchecked_mut(encode_utf8_raw(self as u32, dst)) }
  209892:	e8 b9 fb ff ff       	callq  209450 <_ZN4core4char7methods15encode_utf8_raw17h2164891e7362f189E>
  209897:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20989c:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  2098a1:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  2098a6:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  2098ab:	e8 00 1a 00 00       	callq  20b2b0 <_ZN4core3str8converts23from_utf8_unchecked_mut17h954742d39eb3e2cbE>
  2098b0:	48 89 04 24          	mov    %rax,(%rsp)
  2098b4:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  2098b9:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  2098be:	48 8b 04 24          	mov    (%rsp),%rax
    }
  2098c2:	48 83 c4 38          	add    $0x38,%rsp
  2098c6:	c3                   	retq   
  2098c7:	cc                   	int3   
  2098c8:	cc                   	int3   
  2098c9:	cc                   	int3   
  2098ca:	cc                   	int3   
  2098cb:	cc                   	int3   
  2098cc:	cc                   	int3   
  2098cd:	cc                   	int3   
  2098ce:	cc                   	int3   
  2098cf:	cc                   	int3   

00000000002098d0 <_ZN4core4char7methods8len_utf817hc1b852a0617788b8E>:
const fn len_utf8(code: u32) -> usize {
  2098d0:	48 83 ec 18          	sub    $0x18,%rsp
  2098d4:	89 7c 24 04          	mov    %edi,0x4(%rsp)
  2098d8:	89 7c 24 14          	mov    %edi,0x14(%rsp)
    if code < MAX_ONE_B {
  2098dc:	81 ff 80 00 00 00    	cmp    $0x80,%edi
  2098e2:	72 0d                	jb     2098f1 <_ZN4core4char7methods8len_utf817hc1b852a0617788b8E+0x21>
  2098e4:	8b 44 24 04          	mov    0x4(%rsp),%eax
    } else if code < MAX_TWO_B {
  2098e8:	3d 00 08 00 00       	cmp    $0x800,%eax
  2098ed:	72 22                	jb     209911 <_ZN4core4char7methods8len_utf817hc1b852a0617788b8E+0x41>
  2098ef:	eb 13                	jmp    209904 <_ZN4core4char7methods8len_utf817hc1b852a0617788b8E+0x34>
        1
  2098f1:	48 c7 44 24 08 01 00 	movq   $0x1,0x8(%rsp)
  2098f8:	00 00 
}
  2098fa:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  2098ff:	48 83 c4 18          	add    $0x18,%rsp
  209903:	c3                   	retq   
  209904:	8b 44 24 04          	mov    0x4(%rsp),%eax
    } else if code < MAX_THREE_B {
  209908:	3d 00 00 01 00       	cmp    $0x10000,%eax
  20990d:	72 18                	jb     209927 <_ZN4core4char7methods8len_utf817hc1b852a0617788b8E+0x57>
  20990f:	eb 0b                	jmp    20991c <_ZN4core4char7methods8len_utf817hc1b852a0617788b8E+0x4c>
        2
  209911:	48 c7 44 24 08 02 00 	movq   $0x2,0x8(%rsp)
  209918:	00 00 
    if code < MAX_ONE_B {
  20991a:	eb de                	jmp    2098fa <_ZN4core4char7methods8len_utf817hc1b852a0617788b8E+0x2a>
        4
  20991c:	48 c7 44 24 08 04 00 	movq   $0x4,0x8(%rsp)
  209923:	00 00 
    } else if code < MAX_THREE_B {
  209925:	eb 09                	jmp    209930 <_ZN4core4char7methods8len_utf817hc1b852a0617788b8E+0x60>
        3
  209927:	48 c7 44 24 08 03 00 	movq   $0x3,0x8(%rsp)
  20992e:	00 00 
    } else if code < MAX_TWO_B {
  209930:	eb e8                	jmp    20991a <_ZN4core4char7methods8len_utf817hc1b852a0617788b8E+0x4a>
  209932:	cc                   	int3   
  209933:	cc                   	int3   
  209934:	cc                   	int3   
  209935:	cc                   	int3   
  209936:	cc                   	int3   
  209937:	cc                   	int3   
  209938:	cc                   	int3   
  209939:	cc                   	int3   
  20993a:	cc                   	int3   
  20993b:	cc                   	int3   
  20993c:	cc                   	int3   
  20993d:	cc                   	int3   
  20993e:	cc                   	int3   
  20993f:	cc                   	int3   

0000000000209940 <_ZN9r3_kernel7drivers4uart4UART15chip_works_fine17h6bd14843d71e28dcE>:
}

impl UART {
    // set UART in loopback mode and check if same data written is read
    // as it is, if not, the chip is faulty.
    fn chip_works_fine(port_4: &Port, port_0: &Port) -> bool {
  209940:	48 83 ec 38          	sub    $0x38,%rsp
  209944:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  209949:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20994e:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  209953:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        port_4.write_u8(X86_COM_PORT_LOOPBACK_MODE);
  209958:	be 1b 00 00 00       	mov    $0x1b,%esi
  20995d:	e8 0e 0a 00 00       	callq  20a370 <_ZN9r3_kernel3cpu2io4Port8write_u817h39db09cf4fc6e7abE>
  209962:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        // write some dummy byte
        port_0.write_u8(0xaf);
  209967:	be af 00 00 00       	mov    $0xaf,%esi
  20996c:	e8 ff 09 00 00       	callq  20a370 <_ZN9r3_kernel3cpu2io4Port8write_u817h39db09cf4fc6e7abE>
  209971:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
        // try reading the same byte:
        match port_0.read_u8() {
  209976:	e8 d5 09 00 00       	callq  20a350 <_ZN9r3_kernel3cpu2io4Port7read_u817h2a2791b5b9859075E>
  20997b:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20997f:	8a 44 24 0f          	mov    0xf(%rsp),%al
  209983:	3c af                	cmp    $0xaf,%al
  209985:	75 11                	jne    209998 <_ZN9r3_kernel7drivers4uart4UART15chip_works_fine17h6bd14843d71e28dcE+0x58>
  209987:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
            0xaf => {
                // set chip in normal mode
                port_4.write_u8(0x0f);
  20998c:	be 0f 00 00 00       	mov    $0xf,%esi
  209991:	e8 da 09 00 00       	callq  20a370 <_ZN9r3_kernel3cpu2io4Port8write_u817h39db09cf4fc6e7abE>
  209996:	eb 13                	jmp    2099ab <_ZN9r3_kernel7drivers4uart4UART15chip_works_fine17h6bd14843d71e28dcE+0x6b>
                return true;
            }
            _ => return false,
  209998:	c6 44 24 27 00       	movb   $0x0,0x27(%rsp)
        }
    }
  20999d:	8a 44 24 27          	mov    0x27(%rsp),%al
  2099a1:	24 01                	and    $0x1,%al
  2099a3:	0f b6 c0             	movzbl %al,%eax
  2099a6:	48 83 c4 38          	add    $0x38,%rsp
  2099aa:	c3                   	retq   
                return true;
  2099ab:	c6 44 24 27 01       	movb   $0x1,0x27(%rsp)
  2099b0:	eb eb                	jmp    20999d <_ZN9r3_kernel7drivers4uart4UART15chip_works_fine17h6bd14843d71e28dcE+0x5d>
  2099b2:	cc                   	int3   
  2099b3:	cc                   	int3   
  2099b4:	cc                   	int3   
  2099b5:	cc                   	int3   
  2099b6:	cc                   	int3   
  2099b7:	cc                   	int3   
  2099b8:	cc                   	int3   
  2099b9:	cc                   	int3   
  2099ba:	cc                   	int3   
  2099bb:	cc                   	int3   
  2099bc:	cc                   	int3   
  2099bd:	cc                   	int3   
  2099be:	cc                   	int3   
  2099bf:	cc                   	int3   

00000000002099c0 <_ZN9r3_kernel7drivers4uart4UART3new17h6be220cb0837bcc2E>:

    pub fn new() -> Option<Self> {
  2099c0:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  2099c7:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  2099cc:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  2099d1:	bf f8 03 00 00       	mov    $0x3f8,%edi
  2099d6:	31 f6                	xor    %esi,%esi
        // configuration
        let port_0 = Port::new(X86_COM_PORT, false);
  2099d8:	e8 43 09 00 00       	callq  20a320 <_ZN9r3_kernel3cpu2io4Port3new17hae4eb34b8ce188bdE>
  2099dd:	88 54 24 30          	mov    %dl,0x30(%rsp)
  2099e1:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  2099e6:	bf f9 03 00 00       	mov    $0x3f9,%edi
  2099eb:	31 f6                	xor    %esi,%esi
        let port_1 = Port::new(X86_COM_PORT + 1, false);
  2099ed:	e8 2e 09 00 00       	callq  20a320 <_ZN9r3_kernel3cpu2io4Port3new17hae4eb34b8ce188bdE>
  2099f2:	88 54 24 40          	mov    %dl,0x40(%rsp)
  2099f6:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  2099fb:	bf fa 03 00 00       	mov    $0x3fa,%edi
  209a00:	31 f6                	xor    %esi,%esi
        let port_2 = Port::new(X86_COM_PORT + 2, false);
  209a02:	e8 19 09 00 00       	callq  20a320 <_ZN9r3_kernel3cpu2io4Port3new17hae4eb34b8ce188bdE>
  209a07:	88 54 24 50          	mov    %dl,0x50(%rsp)
  209a0b:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  209a10:	bf fb 03 00 00       	mov    $0x3fb,%edi
  209a15:	31 f6                	xor    %esi,%esi
        let port_3 = Port::new(X86_COM_PORT + 3, false);
  209a17:	e8 04 09 00 00       	callq  20a320 <_ZN9r3_kernel3cpu2io4Port3new17hae4eb34b8ce188bdE>
  209a1c:	88 54 24 60          	mov    %dl,0x60(%rsp)
  209a20:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  209a25:	bf fc 03 00 00       	mov    $0x3fc,%edi
  209a2a:	31 f6                	xor    %esi,%esi
        let port_4 = Port::new(X86_COM_PORT + 4, false);
  209a2c:	e8 ef 08 00 00       	callq  20a320 <_ZN9r3_kernel3cpu2io4Port3new17hae4eb34b8ce188bdE>
  209a31:	88 54 24 70          	mov    %dl,0x70(%rsp)
  209a35:	48 89 44 24 68       	mov    %rax,0x68(%rsp)

        // read only port.
        let port_5 = Port::new(X86_COM_PORT + 5, true);
  209a3a:	bf fd 03 00 00       	mov    $0x3fd,%edi
  209a3f:	be 01 00 00 00       	mov    $0x1,%esi
  209a44:	e8 d7 08 00 00       	callq  20a320 <_ZN9r3_kernel3cpu2io4Port3new17hae4eb34b8ce188bdE>
  209a49:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  209a4e:	88 54 24 17          	mov    %dl,0x17(%rsp)
  209a52:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  209a59:	00 
  209a5a:	80 e2 01             	and    $0x1,%dl
  209a5d:	88 94 24 a0 00 00 00 	mov    %dl,0xa0(%rsp)

        port_1.write_u8(0x00);
  209a64:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  209a69:	31 f6                	xor    %esi,%esi
  209a6b:	e8 00 09 00 00       	callq  20a370 <_ZN9r3_kernel3cpu2io4Port8write_u817h39db09cf4fc6e7abE>
        port_3.write_u8(0x80);
  209a70:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  209a75:	be 80 00 00 00       	mov    $0x80,%esi
  209a7a:	e8 f1 08 00 00       	callq  20a370 <_ZN9r3_kernel3cpu2io4Port8write_u817h39db09cf4fc6e7abE>
        port_0.write_u8(0x03);
  209a7f:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  209a84:	be 03 00 00 00       	mov    $0x3,%esi
  209a89:	e8 e2 08 00 00       	callq  20a370 <_ZN9r3_kernel3cpu2io4Port8write_u817h39db09cf4fc6e7abE>
        port_1.write_u8(0x00);
  209a8e:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  209a93:	31 f6                	xor    %esi,%esi
  209a95:	e8 d6 08 00 00       	callq  20a370 <_ZN9r3_kernel3cpu2io4Port8write_u817h39db09cf4fc6e7abE>
        port_3.write_u8(0x03);
  209a9a:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  209a9f:	be 03 00 00 00       	mov    $0x3,%esi
  209aa4:	e8 c7 08 00 00       	callq  20a370 <_ZN9r3_kernel3cpu2io4Port8write_u817h39db09cf4fc6e7abE>
        port_2.write_u8(0xC7);
  209aa9:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  209aae:	be c7 00 00 00       	mov    $0xc7,%esi
  209ab3:	e8 b8 08 00 00       	callq  20a370 <_ZN9r3_kernel3cpu2io4Port8write_u817h39db09cf4fc6e7abE>
        port_4.write_u8(0x0B);
  209ab8:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  209abd:	be 0b 00 00 00       	mov    $0xb,%esi
  209ac2:	e8 a9 08 00 00       	callq  20a370 <_ZN9r3_kernel3cpu2io4Port8write_u817h39db09cf4fc6e7abE>

        // check for faulty chip:
        if !UART::chip_works_fine(&port_4, &port_0) {
  209ac7:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  209acc:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  209ad1:	e8 6a fe ff ff       	callq  209940 <_ZN9r3_kernel7drivers4uart4UART15chip_works_fine17h6bd14843d71e28dcE>
  209ad6:	88 44 24 07          	mov    %al,0x7(%rsp)
  209ada:	8a 44 24 07          	mov    0x7(%rsp),%al
  209ade:	34 ff                	xor    $0xff,%al
  209ae0:	a8 01                	test   $0x1,%al
  209ae2:	75 69                	jne    209b4d <_ZN9r3_kernel7drivers4uart4UART3new17h6be220cb0837bcc2E+0x18d>
  209ae4:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  209ae9:	8a 4c 24 17          	mov    0x17(%rsp),%cl
  209aed:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
            return None;
        }

        // return the UART instance:
        Some(UART {
            port_0: port_0,
  209af2:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  209af7:	40 8a 74 24 30       	mov    0x30(%rsp),%sil
        Some(UART {
  209afc:	48 89 7c 24 78       	mov    %rdi,0x78(%rsp)
  209b01:	40 80 e6 01          	and    $0x1,%sil
  209b05:	40 88 b4 24 80 00 00 	mov    %sil,0x80(%rsp)
  209b0c:	00 
  209b0d:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
  209b14:	00 
  209b15:	80 e1 01             	and    $0x1,%cl
  209b18:	88 8c 24 90 00 00 00 	mov    %cl,0x90(%rsp)
  209b1f:	48 8b 4c 24 78       	mov    0x78(%rsp),%rcx
  209b24:	48 89 08             	mov    %rcx,(%rax)
  209b27:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  209b2e:	00 
  209b2f:	48 89 48 08          	mov    %rcx,0x8(%rax)
  209b33:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  209b3a:	00 
  209b3b:	48 89 48 10          	mov    %rcx,0x10(%rax)
  209b3f:	48 8b 8c 24 90 00 00 	mov    0x90(%rsp),%rcx
  209b46:	00 
  209b47:	48 89 48 18          	mov    %rcx,0x18(%rax)
            port_5: port_5,
        })
    }
  209b4b:	eb 09                	jmp    209b56 <_ZN9r3_kernel7drivers4uart4UART3new17h6be220cb0837bcc2E+0x196>
  209b4d:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
            return None;
  209b52:	c6 40 08 02          	movb   $0x2,0x8(%rax)
  209b56:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
    }
  209b5b:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  209b62:	c3                   	retq   
  209b63:	cc                   	int3   
  209b64:	cc                   	int3   
  209b65:	cc                   	int3   
  209b66:	cc                   	int3   
  209b67:	cc                   	int3   
  209b68:	cc                   	int3   
  209b69:	cc                   	int3   
  209b6a:	cc                   	int3   
  209b6b:	cc                   	int3   
  209b6c:	cc                   	int3   
  209b6d:	cc                   	int3   
  209b6e:	cc                   	int3   
  209b6f:	cc                   	int3   

0000000000209b70 <_ZN9r3_kernel7drivers4uart4UART13transit_empty17he49736ed003b01d9E>:

    #[inline]
    pub fn transit_empty(&self) -> bool {
  209b70:	48 83 ec 18          	sub    $0x18,%rsp
  209b74:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.port_5.read_u8() & X86_COM_PORT_EMPTY_FLAG != 0
  209b79:	48 83 c7 10          	add    $0x10,%rdi
  209b7d:	e8 ce 07 00 00       	callq  20a350 <_ZN9r3_kernel3cpu2io4Port7read_u817h2a2791b5b9859075E>
  209b82:	88 44 24 0f          	mov    %al,0xf(%rsp)
  209b86:	8a 44 24 0f          	mov    0xf(%rsp),%al
  209b8a:	24 20                	and    $0x20,%al
  209b8c:	3c 00                	cmp    $0x0,%al
  209b8e:	0f 95 c0             	setne  %al
    }
  209b91:	24 01                	and    $0x1,%al
  209b93:	0f b6 c0             	movzbl %al,%eax
  209b96:	48 83 c4 18          	add    $0x18,%rsp
  209b9a:	c3                   	retq   
  209b9b:	cc                   	int3   
  209b9c:	cc                   	int3   
  209b9d:	cc                   	int3   
  209b9e:	cc                   	int3   
  209b9f:	cc                   	int3   

0000000000209ba0 <_ZN9r3_kernel7drivers4uart4UART8write_u817ha951d6bb54df7437E>:
    pub fn read_u8(&self) -> u8 {
        while !self.transit_received() {}
        self.port_0.read_u8()
    }

    pub fn write_u8(&self, value: u8) {
  209ba0:	48 83 ec 28          	sub    $0x28,%rsp
  209ba4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  209ba9:	40 88 f0             	mov    %sil,%al
  209bac:	88 44 24 17          	mov    %al,0x17(%rsp)
  209bb0:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  209bb5:	88 44 24 27          	mov    %al,0x27(%rsp)
  209bb9:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        while !self.transit_empty() {}
  209bbe:	e8 ad ff ff ff       	callq  209b70 <_ZN9r3_kernel7drivers4uart4UART13transit_empty17he49736ed003b01d9E>
  209bc3:	88 44 24 07          	mov    %al,0x7(%rsp)
  209bc7:	8a 44 24 07          	mov    0x7(%rsp),%al
  209bcb:	34 ff                	xor    $0xff,%al
  209bcd:	a8 01                	test   $0x1,%al
  209bcf:	75 e8                	jne    209bb9 <_ZN9r3_kernel7drivers4uart4UART8write_u817ha951d6bb54df7437E+0x19>
  209bd1:	8a 44 24 17          	mov    0x17(%rsp),%al
  209bd5:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        self.port_0.write_u8(value);
  209bda:	0f b6 f0             	movzbl %al,%esi
  209bdd:	e8 8e 07 00 00       	callq  20a370 <_ZN9r3_kernel3cpu2io4Port8write_u817h39db09cf4fc6e7abE>
    }
  209be2:	48 83 c4 28          	add    $0x28,%rsp
  209be6:	c3                   	retq   
  209be7:	cc                   	int3   
  209be8:	cc                   	int3   
  209be9:	cc                   	int3   
  209bea:	cc                   	int3   
  209beb:	cc                   	int3   
  209bec:	cc                   	int3   
  209bed:	cc                   	int3   
  209bee:	cc                   	int3   
  209bef:	cc                   	int3   

0000000000209bf0 <_ZN9r3_kernel7drivers4uart4UART16is_writable_char17hd875fbb45edfcdbdE>:
            buffer[index] = self.read_u8();
        }
    }

    #[inline]
    fn is_writable_char(&self, char: &u8) -> bool {
  209bf0:	48 83 ec 20          	sub    $0x20,%rsp
  209bf4:	48 89 34 24          	mov    %rsi,(%rsp)
  209bf8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  209bfd:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        return *char >= 0x20 && *char <= 0x7e;
  209c02:	80 3e 20             	cmpb   $0x20,(%rsi)
  209c05:	73 07                	jae    209c0e <_ZN9r3_kernel7drivers4uart4UART16is_writable_char17hd875fbb45edfcdbdE+0x1e>
  209c07:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
  209c0c:	eb 10                	jmp    209c1e <_ZN9r3_kernel7drivers4uart4UART16is_writable_char17hd875fbb45edfcdbdE+0x2e>
  209c0e:	48 8b 04 24          	mov    (%rsp),%rax
  209c12:	80 38 7e             	cmpb   $0x7e,(%rax)
  209c15:	0f 96 c0             	setbe  %al
  209c18:	24 01                	and    $0x1,%al
  209c1a:	88 44 24 0f          	mov    %al,0xf(%rsp)
    }
  209c1e:	8a 44 24 0f          	mov    0xf(%rsp),%al
  209c22:	24 01                	and    $0x1,%al
  209c24:	0f b6 c0             	movzbl %al,%eax
  209c27:	48 83 c4 20          	add    $0x20,%rsp
  209c2b:	c3                   	retq   
  209c2c:	cc                   	int3   
  209c2d:	cc                   	int3   
  209c2e:	cc                   	int3   
  209c2f:	cc                   	int3   

0000000000209c30 <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17h844ad1b69d5ca833E>:

    pub fn write_safe_string(&self, string: &str) {
  209c30:	48 83 ec 78          	sub    $0x78,%rsp
  209c34:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  209c39:	48 89 f0             	mov    %rsi,%rax
  209c3c:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  209c41:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  209c46:	48 89 f8             	mov    %rdi,%rax
  209c49:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  209c4e:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  209c53:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  209c58:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
  209c5d:	48 89 74 24 68       	mov    %rsi,0x68(%rsp)
        for char in string.bytes() {
  209c62:	e8 29 22 00 00       	callq  20be90 <_ZN4core3str21_$LT$impl$u20$str$GT$5bytes17h69793d84f9f7b42cE>
  209c67:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  209c6c:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  209c71:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  209c76:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  209c7b:	e8 b0 30 00 00       	callq  20cd30 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17heacc4301b8f7343dE>
  209c80:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  209c85:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  209c8a:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  209c8f:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  209c94:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
  209c99:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  209c9e:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  209ca3:	e8 98 12 00 00       	callq  20af40 <_ZN81_$LT$core..str..iter..Bytes$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hcd34291bd89f867dE>
  209ca8:	88 54 24 51          	mov    %dl,0x51(%rsp)
  209cac:	88 44 24 50          	mov    %al,0x50(%rsp)
  209cb0:	0f b6 44 24 50       	movzbl 0x50(%rsp),%eax
  209cb5:	a8 01                	test   $0x1,%al
  209cb7:	74 06                	je     209cbf <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17h844ad1b69d5ca833E+0x8f>
  209cb9:	eb 00                	jmp    209cbb <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17h844ad1b69d5ca833E+0x8b>
  209cbb:	eb 07                	jmp    209cc4 <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17h844ad1b69d5ca833E+0x94>
  209cbd:	0f 0b                	ud2    
            } else {
                // invalid char byte
                self.write_u8(COM_INVALID_CHAR_BYTE);
            }
        }
    }
  209cbf:	48 83 c4 78          	add    $0x78,%rsp
  209cc3:	c3                   	retq   
        for char in string.bytes() {
  209cc4:	8a 44 24 51          	mov    0x51(%rsp),%al
  209cc8:	88 44 24 76          	mov    %al,0x76(%rsp)
  209ccc:	88 44 24 77          	mov    %al,0x77(%rsp)
  209cd0:	88 44 24 57          	mov    %al,0x57(%rsp)
            if char == b'\n' {
  209cd4:	80 7c 24 57 0a       	cmpb   $0xa,0x57(%rsp)
  209cd9:	75 11                	jne    209cec <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17h844ad1b69d5ca833E+0xbc>
  209cdb:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
                self.write_u8(b'\r');
  209ce0:	be 0d 00 00 00       	mov    $0xd,%esi
  209ce5:	e8 b6 fe ff ff       	callq  209ba0 <_ZN9r3_kernel7drivers4uart4UART8write_u817ha951d6bb54df7437E>
  209cea:	eb 42                	jmp    209d2e <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17h844ad1b69d5ca833E+0xfe>
  209cec:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
            } else if self.is_writable_char(&char) {
  209cf1:	48 8d 74 24 57       	lea    0x57(%rsp),%rsi
  209cf6:	e8 f5 fe ff ff       	callq  209bf0 <_ZN9r3_kernel7drivers4uart4UART16is_writable_char17hd875fbb45edfcdbdE>
  209cfb:	88 44 24 07          	mov    %al,0x7(%rsp)
  209cff:	8a 44 24 07          	mov    0x7(%rsp),%al
  209d03:	a8 01                	test   $0x1,%al
  209d05:	75 13                	jne    209d1a <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17h844ad1b69d5ca833E+0xea>
  209d07:	eb 00                	jmp    209d09 <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17h844ad1b69d5ca833E+0xd9>
  209d09:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
                self.write_u8(COM_INVALID_CHAR_BYTE);
  209d0e:	be 3f 00 00 00       	mov    $0x3f,%esi
  209d13:	e8 88 fe ff ff       	callq  209ba0 <_ZN9r3_kernel7drivers4uart4UART8write_u817ha951d6bb54df7437E>
  209d18:	eb 84                	jmp    209c9e <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17h844ad1b69d5ca833E+0x6e>
  209d1a:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
                self.write_u8(char);
  209d1f:	0f b6 74 24 57       	movzbl 0x57(%rsp),%esi
  209d24:	e8 77 fe ff ff       	callq  209ba0 <_ZN9r3_kernel7drivers4uart4UART8write_u817ha951d6bb54df7437E>
  209d29:	e9 70 ff ff ff       	jmpq   209c9e <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17h844ad1b69d5ca833E+0x6e>
  209d2e:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
                self.write_u8(b'\n');
  209d33:	be 0a 00 00 00       	mov    $0xa,%esi
  209d38:	e8 63 fe ff ff       	callq  209ba0 <_ZN9r3_kernel7drivers4uart4UART8write_u817ha951d6bb54df7437E>
  209d3d:	e9 5c ff ff ff       	jmpq   209c9e <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17h844ad1b69d5ca833E+0x6e>
  209d42:	cc                   	int3   
  209d43:	cc                   	int3   
  209d44:	cc                   	int3   
  209d45:	cc                   	int3   
  209d46:	cc                   	int3   
  209d47:	cc                   	int3   
  209d48:	cc                   	int3   
  209d49:	cc                   	int3   
  209d4a:	cc                   	int3   
  209d4b:	cc                   	int3   
  209d4c:	cc                   	int3   
  209d4d:	cc                   	int3   
  209d4e:	cc                   	int3   
  209d4f:	cc                   	int3   

0000000000209d50 <_ZN67_$LT$r3_kernel..drivers..uart..UART$u20$as$u20$core..fmt..Write$GT$9write_str17h6dd3433d3a1bef49E>:
}

impl fmt::Write for UART {
    fn write_str(&mut self, string: &str) -> fmt::Result {
  209d50:	48 83 ec 28          	sub    $0x28,%rsp
  209d54:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  209d59:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  209d5e:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
        self.write_safe_string(string);
  209d63:	e8 c8 fe ff ff       	callq  209c30 <_ZN9r3_kernel7drivers4uart4UART17write_safe_string17h844ad1b69d5ca833E>
        return Ok(());
  209d68:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
    }
  209d6d:	8a 44 24 0f          	mov    0xf(%rsp),%al
  209d71:	24 01                	and    $0x1,%al
  209d73:	0f b6 c0             	movzbl %al,%eax
  209d76:	48 83 c4 28          	add    $0x28,%rsp
  209d7a:	c3                   	retq   
  209d7b:	cc                   	int3   
  209d7c:	cc                   	int3   
  209d7d:	cc                   	int3   
  209d7e:	cc                   	int3   
  209d7f:	cc                   	int3   

0000000000209d80 <_ZN9r3_kernel7drivers4uart9init_uart17h28a76d1a7b053dacE>:
}

fn init_uart() -> Option<Mutex<UART>> {
  209d80:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  209d87:	48 89 3c 24          	mov    %rdi,(%rsp)
  209d8b:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
    if let Some(uart) = UART::new() {
  209d90:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  209d95:	e8 26 fc ff ff       	callq  2099c0 <_ZN9r3_kernel7drivers4uart4UART3new17h6be220cb0837bcc2E>
  209d9a:	8a 54 24 18          	mov    0x18(%rsp),%dl
  209d9e:	80 ea 02             	sub    $0x2,%dl
  209da1:	b8 01 00 00 00       	mov    $0x1,%eax
  209da6:	31 c9                	xor    %ecx,%ecx
  209da8:	80 fa 00             	cmp    $0x0,%dl
  209dab:	48 0f 44 c1          	cmove  %rcx,%rax
  209daf:	48 83 f8 01          	cmp    $0x1,%rax
  209db3:	75 6a                	jne    209e1f <_ZN9r3_kernel7drivers4uart9init_uart17h28a76d1a7b053dacE+0x9f>
  209db5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  209dba:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  209dbf:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  209dc4:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  209dc9:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  209dce:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  209dd3:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  209dd8:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
        return Some(Mutex::new(uart));
  209ddd:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  209de2:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  209de7:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  209dec:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  209df3:	00 
  209df4:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  209df9:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  209e00:	00 
  209e01:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  209e06:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  209e0d:	00 
  209e0e:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  209e13:	48 8d 74 24 78       	lea    0x78(%rsp),%rsi
  209e18:	e8 a3 cb ff ff       	callq  2069c0 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h9c67aabfb8c12465E>
  209e1d:	eb 18                	jmp    209e37 <_ZN9r3_kernel7drivers4uart9init_uart17h28a76d1a7b053dacE+0xb7>
  209e1f:	48 8b 04 24          	mov    (%rsp),%rax
    }
    None
  209e23:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  209e2a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
  209e2f:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  209e36:	c3                   	retq   
  209e37:	48 8b 3c 24          	mov    (%rsp),%rdi
        return Some(Mutex::new(uart));
  209e3b:	48 83 c7 08          	add    $0x8,%rdi
  209e3f:	48 8d 74 24 50       	lea    0x50(%rsp),%rsi
  209e44:	ba 28 00 00 00       	mov    $0x28,%edx
  209e49:	e8 72 7a 00 00       	callq  2118c0 <memcpy>
  209e4e:	48 8b 04 24          	mov    (%rsp),%rax
  209e52:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
}
  209e59:	eb cf                	jmp    209e2a <_ZN9r3_kernel7drivers4uart9init_uart17h28a76d1a7b053dacE+0xaa>
  209e5b:	cc                   	int3   
  209e5c:	cc                   	int3   
  209e5d:	cc                   	int3   
  209e5e:	cc                   	int3   
  209e5f:	cc                   	int3   

0000000000209e60 <_ZN81_$LT$r3_kernel..drivers..uart..UART_DRIVER$u20$as$u20$core..ops..deref..Deref$GT$5deref17hf02e002ef2b5b6e1E>:
            fn deref(&self) -> &$T {
  209e60:	48 83 ec 18          	sub    $0x18,%rsp
  209e64:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  209e69:	48 8d 05 f0 ac 00 00 	lea    0xacf0(%rip),%rax        # 214b60 <_ZN81_$LT$r3_kernel..drivers..uart..UART_DRIVER$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17hbc1fb3ac42e3ec99E>
  209e70:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  209e75:	48 8d 3d e4 ac 00 00 	lea    0xace4(%rip),%rdi        # 214b60 <_ZN81_$LT$r3_kernel..drivers..uart..UART_DRIVER$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17hbc1fb3ac42e3ec99E>
  209e7c:	e8 df d4 ff ff       	callq  207360 <_ZN4spin4once13Once$LT$T$GT$9call_once17h8104c9757455a476E>
  209e81:	48 89 04 24          	mov    %rax,(%rsp)
  209e85:	48 8b 04 24          	mov    (%rsp),%rax
            }
  209e89:	48 83 c4 18          	add    $0x18,%rsp
  209e8d:	c3                   	retq   
  209e8e:	cc                   	int3   
  209e8f:	cc                   	int3   

0000000000209e90 <_ZN9r3_kernel3cpu18disable_interrupts17h09f60a96b4b2704aE>:
    }
}

pub fn disable_interrupts() {
    unsafe {
        asm!("cli", options(nomem, nostack));
  209e90:	fa                   	cli    
    }
}
  209e91:	c3                   	retq   
  209e92:	cc                   	int3   
  209e93:	cc                   	int3   
  209e94:	cc                   	int3   
  209e95:	cc                   	int3   
  209e96:	cc                   	int3   
  209e97:	cc                   	int3   
  209e98:	cc                   	int3   
  209e99:	cc                   	int3   
  209e9a:	cc                   	int3   
  209e9b:	cc                   	int3   
  209e9c:	cc                   	int3   
  209e9d:	cc                   	int3   
  209e9e:	cc                   	int3   
  209e9f:	cc                   	int3   

0000000000209ea0 <_ZN9r3_kernel3cpu17create_breakpoint17h91b05c84067a39edE>:
    rflags::RFlags::is_set(rflags::RFlagsStruct::INTERRUPT_FLAG)
}

pub fn create_breakpoint() {
    unsafe {
        asm!("int3", options(nomem, nostack));
  209ea0:	cc                   	int3   
    }
}
  209ea1:	c3                   	retq   
  209ea2:	cc                   	int3   
  209ea3:	cc                   	int3   
  209ea4:	cc                   	int3   
  209ea5:	cc                   	int3   
  209ea6:	cc                   	int3   
  209ea7:	cc                   	int3   
  209ea8:	cc                   	int3   
  209ea9:	cc                   	int3   
  209eaa:	cc                   	int3   
  209eab:	cc                   	int3   
  209eac:	cc                   	int3   
  209ead:	cc                   	int3   
  209eae:	cc                   	int3   
  209eaf:	cc                   	int3   

0000000000209eb0 <_ZN9r3_kernel3cpu18halt_no_interrupts17h93efa4ad8261b0f6E>:
            asm!("hlt", options(nomem, nostack));
        }
    }
}

pub fn halt_no_interrupts() -> ! {
  209eb0:	50                   	push   %rax
    disable_interrupts();
  209eb1:	e8 da ff ff ff       	callq  209e90 <_ZN9r3_kernel3cpu18disable_interrupts17h09f60a96b4b2704aE>
    unsafe {
        loop {
            asm!("hlt", options(nomem, nostack));
  209eb6:	f4                   	hlt    
  209eb7:	eb fd                	jmp    209eb6 <_ZN9r3_kernel3cpu18halt_no_interrupts17h93efa4ad8261b0f6E+0x6>
  209eb9:	cc                   	int3   
  209eba:	cc                   	int3   
  209ebb:	cc                   	int3   
  209ebc:	cc                   	int3   
  209ebd:	cc                   	int3   
  209ebe:	cc                   	int3   
  209ebf:	cc                   	int3   

0000000000209ec0 <_ZN4core4sync6atomic11atomic_load17hd5f2e0b0dca34a91E>:
        }
    }
}

#[inline]
unsafe fn atomic_load<T: Copy>(dst: *const T, order: Ordering) -> T {
  209ec0:	48 83 ec 28          	sub    $0x28,%rsp
  209ec4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  209ec9:	40 88 f0             	mov    %sil,%al
  209ecc:	88 44 24 1e          	mov    %al,0x1e(%rsp)
  209ed0:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
    // SAFETY: the caller must uphold the safety contract for `atomic_load`.
    unsafe {
        match order {
  209ed5:	0f b6 44 24 1e       	movzbl 0x1e(%rsp),%eax
  209eda:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  209edf:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  209ee4:	48 8d 0d 15 6c ff ff 	lea    -0x93eb(%rip),%rcx        # 200b00 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x1>
  209eeb:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  209eef:	48 01 c8             	add    %rcx,%rax
  209ef2:	ff e0                	jmpq   *%rax
  209ef4:	0f 0b                	ud2    
  209ef6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            Acquire => intrinsics::atomic_load_acq(dst),
            Relaxed => intrinsics::atomic_load_relaxed(dst),
  209efb:	8a 00                	mov    (%rax),%al
  209efd:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  209f01:	eb 59                	jmp    209f5c <_ZN4core4sync6atomic11atomic_load17hd5f2e0b0dca34a91E+0x9c>
            SeqCst => intrinsics::atomic_load(dst),
            Release => panic!("there is no such thing as a release load"),
  209f03:	48 8d 3d db 6c ff ff 	lea    -0x9325(%rip),%rdi        # 200be5 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0xe6>
  209f0a:	48 8d 15 4f 92 00 00 	lea    0x924f(%rip),%rdx        # 213160 <memset+0x1880>
  209f11:	be 28 00 00 00       	mov    $0x28,%esi
  209f16:	e8 75 4f 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  209f1b:	0f 0b                	ud2    
  209f1d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            Acquire => intrinsics::atomic_load_acq(dst),
  209f22:	8a 00                	mov    (%rax),%al
  209f24:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  209f28:	eb 30                	jmp    209f5a <_ZN4core4sync6atomic11atomic_load17hd5f2e0b0dca34a91E+0x9a>
            AcqRel => panic!("there is no such thing as an acquire/release load"),
  209f2a:	48 8d 3d 0b 6c ff ff 	lea    -0x93f5(%rip),%rdi        # 200b3c <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x3d>
  209f31:	48 8d 15 10 92 00 00 	lea    0x9210(%rip),%rdx        # 213148 <memset+0x1868>
  209f38:	be 31 00 00 00       	mov    $0x31,%esi
  209f3d:	e8 4e 4f 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  209f42:	0f 0b                	ud2    
  209f44:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            SeqCst => intrinsics::atomic_load(dst),
  209f49:	8a 00                	mov    (%rax),%al
  209f4b:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  209f4f:	eb 00                	jmp    209f51 <_ZN4core4sync6atomic11atomic_load17hd5f2e0b0dca34a91E+0x91>
        }
    }
}
  209f51:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  209f55:	48 83 c4 28          	add    $0x28,%rsp
  209f59:	c3                   	retq   
            Acquire => intrinsics::atomic_load_acq(dst),
  209f5a:	eb f5                	jmp    209f51 <_ZN4core4sync6atomic11atomic_load17hd5f2e0b0dca34a91E+0x91>
            Relaxed => intrinsics::atomic_load_relaxed(dst),
  209f5c:	eb f3                	jmp    209f51 <_ZN4core4sync6atomic11atomic_load17hd5f2e0b0dca34a91E+0x91>
  209f5e:	cc                   	int3   
  209f5f:	cc                   	int3   

0000000000209f60 <_ZN4core4sync6atomic12atomic_store17h9b0400bc043adf64E>:
unsafe fn atomic_store<T: Copy>(dst: *mut T, val: T, order: Ordering) {
  209f60:	48 83 ec 38          	sub    $0x38,%rsp
  209f64:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  209f69:	88 d1                	mov    %dl,%cl
  209f6b:	40 88 f0             	mov    %sil,%al
  209f6e:	88 44 24 17          	mov    %al,0x17(%rsp)
  209f72:	88 4c 24 27          	mov    %cl,0x27(%rsp)
  209f76:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  209f7b:	88 44 24 37          	mov    %al,0x37(%rsp)
        match order {
  209f7f:	0f b6 44 24 27       	movzbl 0x27(%rsp),%eax
  209f84:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  209f89:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  209f8e:	48 8d 0d 7f 6b ff ff 	lea    -0x9481(%rip),%rcx        # 200b14 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x15>
  209f95:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  209f99:	48 01 c8             	add    %rcx,%rax
  209f9c:	ff e0                	jmpq   *%rax
  209f9e:	0f 0b                	ud2    
  209fa0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209fa5:	8a 4c 24 17          	mov    0x17(%rsp),%cl
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
  209fa9:	88 08                	mov    %cl,(%rax)
  209fab:	eb 55                	jmp    20a002 <_ZN4core4sync6atomic12atomic_store17h9b0400bc043adf64E+0xa2>
  209fad:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  209fb2:	8a 4c 24 17          	mov    0x17(%rsp),%cl
            Release => intrinsics::atomic_store_rel(dst, val),
  209fb6:	88 08                	mov    %cl,(%rax)
  209fb8:	eb 46                	jmp    20a000 <_ZN4core4sync6atomic12atomic_store17h9b0400bc043adf64E+0xa0>
            Acquire => panic!("there is no such thing as an acquire store"),
  209fba:	48 8d 3d 7e 6c ff ff 	lea    -0x9382(%rip),%rdi        # 200c3f <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x140>
  209fc1:	48 8d 15 c8 91 00 00 	lea    0x91c8(%rip),%rdx        # 213190 <memset+0x18b0>
  209fc8:	be 2a 00 00 00       	mov    $0x2a,%esi
  209fcd:	e8 be 4e 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  209fd2:	0f 0b                	ud2    
            AcqRel => panic!("there is no such thing as an acquire/release store"),
  209fd4:	48 8d 3d 32 6c ff ff 	lea    -0x93ce(%rip),%rdi        # 200c0d <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x10e>
  209fdb:	48 8d 15 96 91 00 00 	lea    0x9196(%rip),%rdx        # 213178 <memset+0x1898>
  209fe2:	be 32 00 00 00       	mov    $0x32,%esi
  209fe7:	e8 a4 4e 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  209fec:	0f 0b                	ud2    
  209fee:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  209ff3:	8a 44 24 17          	mov    0x17(%rsp),%al
            SeqCst => intrinsics::atomic_store(dst, val),
  209ff7:	86 01                	xchg   %al,(%rcx)
  209ff9:	eb 00                	jmp    209ffb <_ZN4core4sync6atomic12atomic_store17h9b0400bc043adf64E+0x9b>
}
  209ffb:	48 83 c4 38          	add    $0x38,%rsp
  209fff:	c3                   	retq   
            Release => intrinsics::atomic_store_rel(dst, val),
  20a000:	eb f9                	jmp    209ffb <_ZN4core4sync6atomic12atomic_store17h9b0400bc043adf64E+0x9b>
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
  20a002:	eb f7                	jmp    209ffb <_ZN4core4sync6atomic12atomic_store17h9b0400bc043adf64E+0x9b>
  20a004:	cc                   	int3   
  20a005:	cc                   	int3   
  20a006:	cc                   	int3   
  20a007:	cc                   	int3   
  20a008:	cc                   	int3   
  20a009:	cc                   	int3   
  20a00a:	cc                   	int3   
  20a00b:	cc                   	int3   
  20a00c:	cc                   	int3   
  20a00d:	cc                   	int3   
  20a00e:	cc                   	int3   
  20a00f:	cc                   	int3   

000000000020a010 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E>:
    }
}

#[inline]
#[cfg(target_has_atomic = "8")]
unsafe fn atomic_compare_exchange<T: Copy>(
  20a010:	48 83 ec 68          	sub    $0x68,%rsp
  20a014:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20a019:	44 88 c0             	mov    %r8b,%al
  20a01c:	88 54 24 36          	mov    %dl,0x36(%rsp)
  20a020:	40 88 74 24 37       	mov    %sil,0x37(%rsp)
  20a025:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
  20a02a:	40 88 74 24 62       	mov    %sil,0x62(%rsp)
  20a02f:	88 54 24 63          	mov    %dl,0x63(%rsp)
  20a033:	88 4c 24 64          	mov    %cl,0x64(%rsp)
  20a037:	88 44 24 65          	mov    %al,0x65(%rsp)
    success: Ordering,
    failure: Ordering,
) -> Result<T, T> {
    // SAFETY: the caller must uphold the safety contract for `atomic_compare_exchange`.
    let (val, ok) = unsafe {
        match (success, failure) {
  20a03b:	88 4c 24 50          	mov    %cl,0x50(%rsp)
  20a03f:	88 44 24 51          	mov    %al,0x51(%rsp)
  20a043:	0f b6 44 24 50       	movzbl 0x50(%rsp),%eax
  20a048:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20a04d:	48 83 e8 04          	sub    $0x4,%rax
  20a051:	77 15                	ja     20a068 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x58>
  20a053:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20a058:	48 8d 0d c9 6a ff ff 	lea    -0x9537(%rip),%rcx        # 200b28 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x29>
  20a05f:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  20a063:	48 01 c8             	add    %rcx,%rax
  20a066:	ff e0                	jmpq   *%rax
  20a068:	0f b6 44 24 51       	movzbl 0x51(%rsp),%eax
  20a06d:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20a072:	48 83 e8 01          	sub    $0x1,%rax
  20a076:	0f 84 38 02 00 00    	je     20a2b4 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x2a4>
  20a07c:	eb 00                	jmp    20a07e <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x6e>
  20a07e:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20a083:	48 83 e8 03          	sub    $0x3,%rax
  20a087:	0f 84 41 02 00 00    	je     20a2ce <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x2be>
  20a08d:	e9 08 02 00 00       	jmpq   20a29a <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x28a>
  20a092:	0f b6 44 24 51       	movzbl 0x51(%rsp),%eax
  20a097:	48 83 f8 00          	cmp    $0x0,%rax
  20a09b:	0f 84 d7 01 00 00    	je     20a278 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x268>
  20a0a1:	eb c5                	jmp    20a068 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x58>
  20a0a3:	0f b6 44 24 51       	movzbl 0x51(%rsp),%eax
  20a0a8:	48 83 f8 00          	cmp    $0x0,%rax
  20a0ac:	0f 84 a1 01 00 00    	je     20a253 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x243>
  20a0b2:	eb b4                	jmp    20a068 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x58>
  20a0b4:	0f b6 44 24 51       	movzbl 0x51(%rsp),%eax
  20a0b9:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20a0be:	48 85 c0             	test   %rax,%rax
  20a0c1:	0f 84 40 01 00 00    	je     20a207 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x1f7>
  20a0c7:	eb 00                	jmp    20a0c9 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0xb9>
  20a0c9:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20a0ce:	48 83 e8 02          	sub    $0x2,%rax
  20a0d2:	0f 84 51 01 00 00    	je     20a229 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x219>
  20a0d8:	eb 8e                	jmp    20a068 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x58>
  20a0da:	0f b6 44 24 51       	movzbl 0x51(%rsp),%eax
  20a0df:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20a0e4:	48 85 c0             	test   %rax,%rax
  20a0e7:	0f 84 d4 00 00 00    	je     20a1c1 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x1b1>
  20a0ed:	eb 00                	jmp    20a0ef <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0xdf>
  20a0ef:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20a0f4:	48 83 e8 02          	sub    $0x2,%rax
  20a0f8:	0f 84 e5 00 00 00    	je     20a1e3 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x1d3>
  20a0fe:	e9 65 ff ff ff       	jmpq   20a068 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x58>
  20a103:	0f b6 44 24 51       	movzbl 0x51(%rsp),%eax
  20a108:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20a10d:	48 85 c0             	test   %rax,%rax
  20a110:	74 1f                	je     20a131 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x121>
  20a112:	eb 00                	jmp    20a114 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x104>
  20a114:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a119:	48 83 e8 02          	sub    $0x2,%rax
  20a11d:	74 34                	je     20a153 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x143>
  20a11f:	eb 00                	jmp    20a121 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x111>
  20a121:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20a126:	48 83 e8 04          	sub    $0x4,%rax
  20a12a:	74 49                	je     20a175 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x165>
  20a12c:	e9 37 ff ff ff       	jmpq   20a068 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x58>
  20a131:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  20a136:	8a 54 24 36          	mov    0x36(%rsp),%dl
  20a13a:	8a 44 24 37          	mov    0x37(%rsp),%al
            (AcqRel, Acquire) => intrinsics::atomic_cxchg_acqrel(dst, old, new),
            (Relaxed, Relaxed) => intrinsics::atomic_cxchg_relaxed(dst, old, new),
            (SeqCst, SeqCst) => intrinsics::atomic_cxchg(dst, old, new),
            (Acquire, Relaxed) => intrinsics::atomic_cxchg_acq_failrelaxed(dst, old, new),
            (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_failrelaxed(dst, old, new),
            (SeqCst, Relaxed) => intrinsics::atomic_cxchg_failrelaxed(dst, old, new),
  20a13e:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  20a142:	88 c1                	mov    %al,%cl
  20a144:	0f 94 c0             	sete   %al
  20a147:	24 01                	and    $0x1,%al
  20a149:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  20a14d:	88 44 24 49          	mov    %al,0x49(%rsp)
  20a151:	eb 6c                	jmp    20a1bf <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x1af>
  20a153:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  20a158:	8a 54 24 36          	mov    0x36(%rsp),%dl
  20a15c:	8a 44 24 37          	mov    0x37(%rsp),%al
            (SeqCst, Acquire) => intrinsics::atomic_cxchg_failacq(dst, old, new),
  20a160:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  20a164:	88 c1                	mov    %al,%cl
  20a166:	0f 94 c0             	sete   %al
  20a169:	24 01                	and    $0x1,%al
  20a16b:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  20a16f:	88 44 24 49          	mov    %al,0x49(%rsp)
  20a173:	eb 48                	jmp    20a1bd <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x1ad>
  20a175:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  20a17a:	8a 54 24 36          	mov    0x36(%rsp),%dl
  20a17e:	8a 44 24 37          	mov    0x37(%rsp),%al
            (SeqCst, SeqCst) => intrinsics::atomic_cxchg(dst, old, new),
  20a182:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  20a186:	88 c1                	mov    %al,%cl
  20a188:	0f 94 c0             	sete   %al
  20a18b:	24 01                	and    $0x1,%al
  20a18d:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  20a191:	88 44 24 49          	mov    %al,0x49(%rsp)
  20a195:	eb 00                	jmp    20a197 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x187>
    let (val, ok) = unsafe {
  20a197:	8a 44 24 48          	mov    0x48(%rsp),%al
  20a19b:	88 44 24 07          	mov    %al,0x7(%rsp)
  20a19f:	88 44 24 66          	mov    %al,0x66(%rsp)
  20a1a3:	8a 44 24 49          	mov    0x49(%rsp),%al
  20a1a7:	88 c1                	mov    %al,%cl
  20a1a9:	80 e1 01             	and    $0x1,%cl
  20a1ac:	88 4c 24 67          	mov    %cl,0x67(%rsp)
            (_, AcqRel) => panic!("there is no such thing as an acquire/release failure ordering"),
            (_, Release) => panic!("there is no such thing as a release failure ordering"),
            _ => panic!("a failure ordering can't be stronger than a success ordering"),
        }
    };
    if ok { Ok(val) } else { Err(val) }
  20a1b0:	a8 01                	test   $0x1,%al
  20a1b2:	0f 85 44 01 00 00    	jne    20a2fc <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x2ec>
  20a1b8:	e9 30 01 00 00       	jmpq   20a2ed <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x2dd>
            (SeqCst, Acquire) => intrinsics::atomic_cxchg_failacq(dst, old, new),
  20a1bd:	eb d8                	jmp    20a197 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x187>
            (SeqCst, Relaxed) => intrinsics::atomic_cxchg_failrelaxed(dst, old, new),
  20a1bf:	eb d6                	jmp    20a197 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x187>
  20a1c1:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  20a1c6:	8a 54 24 36          	mov    0x36(%rsp),%dl
  20a1ca:	8a 44 24 37          	mov    0x37(%rsp),%al
            (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_failrelaxed(dst, old, new),
  20a1ce:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  20a1d2:	88 c1                	mov    %al,%cl
  20a1d4:	0f 94 c0             	sete   %al
  20a1d7:	24 01                	and    $0x1,%al
  20a1d9:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  20a1dd:	88 44 24 49          	mov    %al,0x49(%rsp)
  20a1e1:	eb 22                	jmp    20a205 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x1f5>
  20a1e3:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  20a1e8:	8a 54 24 36          	mov    0x36(%rsp),%dl
  20a1ec:	8a 44 24 37          	mov    0x37(%rsp),%al
            (AcqRel, Acquire) => intrinsics::atomic_cxchg_acqrel(dst, old, new),
  20a1f0:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  20a1f4:	88 c1                	mov    %al,%cl
  20a1f6:	0f 94 c0             	sete   %al
  20a1f9:	24 01                	and    $0x1,%al
  20a1fb:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  20a1ff:	88 44 24 49          	mov    %al,0x49(%rsp)
  20a203:	eb 92                	jmp    20a197 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x187>
            (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_failrelaxed(dst, old, new),
  20a205:	eb 90                	jmp    20a197 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x187>
  20a207:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  20a20c:	8a 54 24 36          	mov    0x36(%rsp),%dl
  20a210:	8a 44 24 37          	mov    0x37(%rsp),%al
            (Acquire, Relaxed) => intrinsics::atomic_cxchg_acq_failrelaxed(dst, old, new),
  20a214:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  20a218:	88 c1                	mov    %al,%cl
  20a21a:	0f 94 c0             	sete   %al
  20a21d:	24 01                	and    $0x1,%al
  20a21f:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  20a223:	88 44 24 49          	mov    %al,0x49(%rsp)
  20a227:	eb 25                	jmp    20a24e <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x23e>
  20a229:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  20a22e:	8a 54 24 36          	mov    0x36(%rsp),%dl
  20a232:	8a 44 24 37          	mov    0x37(%rsp),%al
            (Acquire, Acquire) => intrinsics::atomic_cxchg_acq(dst, old, new),
  20a236:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  20a23a:	88 c1                	mov    %al,%cl
  20a23c:	0f 94 c0             	sete   %al
  20a23f:	24 01                	and    $0x1,%al
  20a241:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  20a245:	88 44 24 49          	mov    %al,0x49(%rsp)
  20a249:	e9 49 ff ff ff       	jmpq   20a197 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x187>
            (Acquire, Relaxed) => intrinsics::atomic_cxchg_acq_failrelaxed(dst, old, new),
  20a24e:	e9 44 ff ff ff       	jmpq   20a197 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x187>
  20a253:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  20a258:	8a 54 24 36          	mov    0x36(%rsp),%dl
  20a25c:	8a 44 24 37          	mov    0x37(%rsp),%al
            (Release, Relaxed) => intrinsics::atomic_cxchg_rel(dst, old, new),
  20a260:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  20a264:	88 c1                	mov    %al,%cl
  20a266:	0f 94 c0             	sete   %al
  20a269:	24 01                	and    $0x1,%al
  20a26b:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  20a26f:	88 44 24 49          	mov    %al,0x49(%rsp)
  20a273:	e9 1f ff ff ff       	jmpq   20a197 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x187>
  20a278:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  20a27d:	8a 54 24 36          	mov    0x36(%rsp),%dl
  20a281:	8a 44 24 37          	mov    0x37(%rsp),%al
            (Relaxed, Relaxed) => intrinsics::atomic_cxchg_relaxed(dst, old, new),
  20a285:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
  20a289:	88 c1                	mov    %al,%cl
  20a28b:	0f 94 c0             	sete   %al
  20a28e:	24 01                	and    $0x1,%al
  20a290:	88 4c 24 48          	mov    %cl,0x48(%rsp)
  20a294:	88 44 24 49          	mov    %al,0x49(%rsp)
  20a298:	eb 4e                	jmp    20a2e8 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x2d8>
            _ => panic!("a failure ordering can't be stronger than a success ordering"),
  20a29a:	48 8d 3d c8 69 ff ff 	lea    -0x9638(%rip),%rdi        # 200c69 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x16a>
  20a2a1:	48 8d 15 00 8f 00 00 	lea    0x8f00(%rip),%rdx        # 2131a8 <memset+0x18c8>
  20a2a8:	be 3c 00 00 00       	mov    $0x3c,%esi
  20a2ad:	e8 de 4b 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20a2b2:	0f 0b                	ud2    
            (_, Release) => panic!("there is no such thing as a release failure ordering"),
  20a2b4:	48 8d 3d 27 6a ff ff 	lea    -0x95d9(%rip),%rdi        # 200ce2 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x1e3>
  20a2bb:	48 8d 15 16 8f 00 00 	lea    0x8f16(%rip),%rdx        # 2131d8 <memset+0x18f8>
  20a2c2:	be 34 00 00 00       	mov    $0x34,%esi
  20a2c7:	e8 c4 4b 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20a2cc:	0f 0b                	ud2    
            (_, AcqRel) => panic!("there is no such thing as an acquire/release failure ordering"),
  20a2ce:	48 8d 3d d0 69 ff ff 	lea    -0x9630(%rip),%rdi        # 200ca5 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x1a6>
  20a2d5:	48 8d 15 e4 8e 00 00 	lea    0x8ee4(%rip),%rdx        # 2131c0 <memset+0x18e0>
  20a2dc:	be 3d 00 00 00       	mov    $0x3d,%esi
  20a2e1:	e8 aa 4b 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20a2e6:	0f 0b                	ud2    
            (Relaxed, Relaxed) => intrinsics::atomic_cxchg_relaxed(dst, old, new),
  20a2e8:	e9 aa fe ff ff       	jmpq   20a197 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x187>
  20a2ed:	8a 44 24 07          	mov    0x7(%rsp),%al
    if ok { Ok(val) } else { Err(val) }
  20a2f1:	88 44 24 41          	mov    %al,0x41(%rsp)
  20a2f5:	c6 44 24 40 01       	movb   $0x1,0x40(%rsp)
  20a2fa:	eb 0d                	jmp    20a309 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E+0x2f9>
  20a2fc:	8a 44 24 07          	mov    0x7(%rsp),%al
  20a300:	88 44 24 41          	mov    %al,0x41(%rsp)
  20a304:	c6 44 24 40 00       	movb   $0x0,0x40(%rsp)
}
  20a309:	8a 44 24 40          	mov    0x40(%rsp),%al
  20a30d:	8a 54 24 41          	mov    0x41(%rsp),%dl
  20a311:	48 83 c4 68          	add    $0x68,%rsp
  20a315:	c3                   	retq   
  20a316:	cc                   	int3   
  20a317:	cc                   	int3   
  20a318:	cc                   	int3   
  20a319:	cc                   	int3   
  20a31a:	cc                   	int3   
  20a31b:	cc                   	int3   
  20a31c:	cc                   	int3   
  20a31d:	cc                   	int3   
  20a31e:	cc                   	int3   
  20a31f:	cc                   	int3   

000000000020a320 <_ZN9r3_kernel3cpu2io4Port3new17hae4eb34b8ce188bdE>:
    pub port_no: usize,
    pub read_only: bool
}

impl Port {
    pub fn new(port_no: usize, read_only: bool) -> Self {
  20a320:	48 83 ec 20          	sub    $0x20,%rsp
  20a324:	40 88 f0             	mov    %sil,%al
  20a327:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20a32c:	24 01                	and    $0x1,%al
  20a32e:	88 44 24 1f          	mov    %al,0x1f(%rsp)
        Port { port_no, read_only }
  20a332:	48 89 3c 24          	mov    %rdi,(%rsp)
  20a336:	88 44 24 08          	mov    %al,0x8(%rsp)
    }
  20a33a:	48 8b 04 24          	mov    (%rsp),%rax
  20a33e:	8a 54 24 08          	mov    0x8(%rsp),%dl
  20a342:	48 83 c4 20          	add    $0x20,%rsp
  20a346:	c3                   	retq   
  20a347:	cc                   	int3   
  20a348:	cc                   	int3   
  20a349:	cc                   	int3   
  20a34a:	cc                   	int3   
  20a34b:	cc                   	int3   
  20a34c:	cc                   	int3   
  20a34d:	cc                   	int3   
  20a34e:	cc                   	int3   
  20a34f:	cc                   	int3   

000000000020a350 <_ZN9r3_kernel3cpu2io4Port7read_u817h2a2791b5b9859075E>:

    pub fn read_u8(&self) -> u8 {
  20a350:	48 83 ec 10          	sub    $0x10,%rsp
  20a354:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        // assembly is unsafe
        let value: u8;
        unsafe {
            asm!(
                "in al, dx", out("al") value, in("dx") self.port_no, 
  20a359:	48 8b 17             	mov    (%rdi),%rdx
            asm!(
  20a35c:	ec                   	in     (%dx),%al
  20a35d:	88 44 24 07          	mov    %al,0x7(%rsp)
                options(nomem, nostack, preserves_flags)
            );
        }

        return value;
    }
  20a361:	8a 44 24 07          	mov    0x7(%rsp),%al
  20a365:	48 83 c4 10          	add    $0x10,%rsp
  20a369:	c3                   	retq   
  20a36a:	cc                   	int3   
  20a36b:	cc                   	int3   
  20a36c:	cc                   	int3   
  20a36d:	cc                   	int3   
  20a36e:	cc                   	int3   
  20a36f:	cc                   	int3   

000000000020a370 <_ZN9r3_kernel3cpu2io4Port8write_u817h39db09cf4fc6e7abE>:

    pub fn write_u8(&self, value: u8) {
  20a370:	48 83 ec 20          	sub    $0x20,%rsp
  20a374:	48 89 3c 24          	mov    %rdi,(%rsp)
  20a378:	40 88 f0             	mov    %sil,%al
  20a37b:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20a37f:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20a384:	88 44 24 1f          	mov    %al,0x1f(%rsp)
        if !self.read_only {
  20a388:	8a 47 08             	mov    0x8(%rdi),%al
  20a38b:	34 ff                	xor    $0xff,%al
  20a38d:	a8 01                	test   $0x1,%al
  20a38f:	75 05                	jne    20a396 <_ZN9r3_kernel3cpu2io4Port8write_u817h39db09cf4fc6e7abE+0x26>
                    "out dx, al", in("dx") self.port_no, in("al") value,
                    options(nomem, nostack, preserves_flags)
                );
            }
        }
    }
  20a391:	48 83 c4 20          	add    $0x20,%rsp
  20a395:	c3                   	retq   
  20a396:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20a39a:	48 8b 0c 24          	mov    (%rsp),%rcx
                    "out dx, al", in("dx") self.port_no, in("al") value,
  20a39e:	48 8b 11             	mov    (%rcx),%rdx
                asm!(
  20a3a1:	ee                   	out    %al,(%dx)
  20a3a2:	eb ed                	jmp    20a391 <_ZN9r3_kernel3cpu2io4Port8write_u817h39db09cf4fc6e7abE+0x21>
  20a3a4:	cc                   	int3   
  20a3a5:	cc                   	int3   
  20a3a6:	cc                   	int3   
  20a3a7:	cc                   	int3   
  20a3a8:	cc                   	int3   
  20a3a9:	cc                   	int3   
  20a3aa:	cc                   	int3   
  20a3ab:	cc                   	int3   
  20a3ac:	cc                   	int3   
  20a3ad:	cc                   	int3   
  20a3ae:	cc                   	int3   
  20a3af:	cc                   	int3   

000000000020a3b0 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17hec166bfe633491fcE>:
    /// assert_eq!(x.unwrap_err(), "emergency failure");
    /// ```
    #[inline]
    #[track_caller]
    #[stable(feature = "rust1", since = "1.0.0")]
    pub fn unwrap_err(self) -> E {
  20a3b0:	48 83 ec 28          	sub    $0x28,%rsp
  20a3b4:	48 89 34 24          	mov    %rsi,(%rsp)
  20a3b8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        match self {
  20a3bd:	0f b7 07             	movzwl (%rdi),%eax
  20a3c0:	48 85 c0             	test   %rax,%rax
  20a3c3:	74 06                	je     20a3cb <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17hec166bfe633491fcE+0x1b>
  20a3c5:	eb 00                	jmp    20a3c7 <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17hec166bfe633491fcE+0x17>
  20a3c7:	eb 33                	jmp    20a3fc <_ZN4core6result19Result$LT$T$C$E$GT$10unwrap_err17hec166bfe633491fcE+0x4c>
  20a3c9:	0f 0b                	ud2    
  20a3cb:	4c 8b 04 24          	mov    (%rsp),%r8
  20a3cf:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            Ok(t) => unwrap_failed("called `Result::unwrap_err()` on an `Ok` value", &t),
  20a3d4:	66 8b 40 02          	mov    0x2(%rax),%ax
  20a3d8:	66 89 44 24 16       	mov    %ax,0x16(%rsp)
  20a3dd:	48 8d 3d 32 69 ff ff 	lea    -0x96ce(%rip),%rdi        # 200d16 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x217>
  20a3e4:	48 8d 0d 05 8e 00 00 	lea    0x8e05(%rip),%rcx        # 2131f0 <memset+0x1910>
  20a3eb:	be 2e 00 00 00       	mov    $0x2e,%esi
  20a3f0:	48 8d 54 24 16       	lea    0x16(%rsp),%rdx
  20a3f5:	e8 46 40 00 00       	callq  20e440 <_ZN4core6result13unwrap_failed17h381730a58d62d12fE>
  20a3fa:	0f 0b                	ud2    
  20a3fc:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Err(e) => e,
  20a401:	48 8b 41 08          	mov    0x8(%rcx),%rax
  20a405:	48 8b 51 10          	mov    0x10(%rcx),%rdx
  20a409:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20a40e:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
        }
    }
  20a413:	48 83 c4 28          	add    $0x28,%rsp
  20a417:	c3                   	retq   
  20a418:	cc                   	int3   
  20a419:	cc                   	int3   
  20a41a:	cc                   	int3   
  20a41b:	cc                   	int3   
  20a41c:	cc                   	int3   
  20a41d:	cc                   	int3   
  20a41e:	cc                   	int3   
  20a41f:	cc                   	int3   

000000000020a420 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h2c868a1b2405541fE>:
    pub const fn is_ok(&self) -> bool {
  20a420:	48 83 ec 10          	sub    $0x10,%rsp
  20a424:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        matches!(*self, Ok(_))
  20a429:	0f b7 07             	movzwl (%rdi),%eax
  20a42c:	48 83 f8 00          	cmp    $0x0,%rax
  20a430:	75 07                	jne    20a439 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h2c868a1b2405541fE+0x19>
  20a432:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  20a437:	eb 05                	jmp    20a43e <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h2c868a1b2405541fE+0x1e>
  20a439:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
    }
  20a43e:	8a 44 24 07          	mov    0x7(%rsp),%al
  20a442:	24 01                	and    $0x1,%al
  20a444:	0f b6 c0             	movzbl %al,%eax
  20a447:	48 83 c4 10          	add    $0x10,%rsp
  20a44b:	c3                   	retq   
  20a44c:	cc                   	int3   
  20a44d:	cc                   	int3   
  20a44e:	cc                   	int3   
  20a44f:	cc                   	int3   

000000000020a450 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h5662645dcbcbfa8dE>:
    pub const fn is_err(&self) -> bool {
  20a450:	48 83 ec 18          	sub    $0x18,%rsp
  20a454:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        !self.is_ok()
  20a459:	e8 c2 ff ff ff       	callq  20a420 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h2c868a1b2405541fE>
  20a45e:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20a462:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20a466:	34 ff                	xor    $0xff,%al
    }
  20a468:	24 01                	and    $0x1,%al
  20a46a:	0f b6 c0             	movzbl %al,%eax
  20a46d:	48 83 c4 18          	add    $0x18,%rsp
  20a471:	c3                   	retq   
  20a472:	cc                   	int3   
  20a473:	cc                   	int3   
  20a474:	cc                   	int3   
  20a475:	cc                   	int3   
  20a476:	cc                   	int3   
  20a477:	cc                   	int3   
  20a478:	cc                   	int3   
  20a479:	cc                   	int3   
  20a47a:	cc                   	int3   
  20a47b:	cc                   	int3   
  20a47c:	cc                   	int3   
  20a47d:	cc                   	int3   
  20a47e:	cc                   	int3   
  20a47f:	cc                   	int3   

000000000020a480 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h8b100da12d68ca68E>:
    pub fn unwrap(self) -> T {
  20a480:	48 83 ec 28          	sub    $0x28,%rsp
  20a484:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  20a489:	40 88 f8             	mov    %dil,%al
  20a48c:	24 01                	and    $0x1,%al
  20a48e:	88 44 24 17          	mov    %al,0x17(%rsp)
        match self {
  20a492:	0f b6 44 24 17       	movzbl 0x17(%rsp),%eax
  20a497:	a8 01                	test   $0x1,%al
  20a499:	74 06                	je     20a4a1 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h8b100da12d68ca68E+0x21>
  20a49b:	eb 00                	jmp    20a49d <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h8b100da12d68ca68E+0x1d>
  20a49d:	eb 07                	jmp    20a4a6 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h8b100da12d68ca68E+0x26>
  20a49f:	0f 0b                	ud2    
    }
  20a4a1:	48 83 c4 28          	add    $0x28,%rsp
  20a4a5:	c3                   	retq   
  20a4a6:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
  20a4ab:	48 8d 3d 92 68 ff ff 	lea    -0x976e(%rip),%rdi        # 200d44 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x245>
  20a4b2:	48 8d 0d 57 8d 00 00 	lea    0x8d57(%rip),%rcx        # 213210 <memset+0x1930>
  20a4b9:	be 2b 00 00 00       	mov    $0x2b,%esi
  20a4be:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  20a4c3:	e8 78 3f 00 00       	callq  20e440 <_ZN4core6result13unwrap_failed17h381730a58d62d12fE>
  20a4c8:	0f 0b                	ud2    
  20a4ca:	cc                   	int3   
  20a4cb:	cc                   	int3   
  20a4cc:	cc                   	int3   
  20a4cd:	cc                   	int3   
  20a4ce:	cc                   	int3   
  20a4cf:	cc                   	int3   

000000000020a4d0 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17hdce16b6c8bde96cdE>:
    pub fn unwrap(self) -> T {
  20a4d0:	48 83 ec 28          	sub    $0x28,%rsp
  20a4d4:	48 89 34 24          	mov    %rsi,(%rsp)
  20a4d8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        match self {
  20a4dd:	0f b7 07             	movzwl (%rdi),%eax
  20a4e0:	48 85 c0             	test   %rax,%rax
  20a4e3:	74 06                	je     20a4eb <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17hdce16b6c8bde96cdE+0x1b>
  20a4e5:	eb 00                	jmp    20a4e7 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17hdce16b6c8bde96cdE+0x17>
  20a4e7:	eb 15                	jmp    20a4fe <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17hdce16b6c8bde96cdE+0x2e>
  20a4e9:	0f 0b                	ud2    
  20a4eb:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            Ok(t) => t,
  20a4f0:	66 8b 40 02          	mov    0x2(%rax),%ax
  20a4f4:	66 89 44 24 26       	mov    %ax,0x26(%rsp)
    }
  20a4f9:	48 83 c4 28          	add    $0x28,%rsp
  20a4fd:	c3                   	retq   
  20a4fe:	4c 8b 04 24          	mov    (%rsp),%r8
  20a502:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
  20a507:	48 8b 48 08          	mov    0x8(%rax),%rcx
  20a50b:	48 8b 40 10          	mov    0x10(%rax),%rax
  20a50f:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  20a514:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20a519:	48 8d 3d 24 68 ff ff 	lea    -0x97dc(%rip),%rdi        # 200d44 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x245>
  20a520:	48 8d 0d 09 8d 00 00 	lea    0x8d09(%rip),%rcx        # 213230 <memset+0x1950>
  20a527:	be 2b 00 00 00       	mov    $0x2b,%esi
  20a52c:	48 8d 54 24 10       	lea    0x10(%rsp),%rdx
  20a531:	e8 0a 3f 00 00       	callq  20e440 <_ZN4core6result13unwrap_failed17h381730a58d62d12fE>
  20a536:	0f 0b                	ud2    
  20a538:	cc                   	int3   
  20a539:	cc                   	int3   
  20a53a:	cc                   	int3   
  20a53b:	cc                   	int3   
  20a53c:	cc                   	int3   
  20a53d:	cc                   	int3   
  20a53e:	cc                   	int3   
  20a53f:	cc                   	int3   

000000000020a540 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h2284ade66790ed9bE>:
    pub fn compare_and_swap(&self, current: bool, new: bool, order: Ordering) -> bool {
  20a540:	48 83 ec 28          	sub    $0x28,%rsp
  20a544:	48 89 3c 24          	mov    %rdi,(%rsp)
  20a548:	88 c8                	mov    %cl,%al
  20a54a:	88 44 24 0b          	mov    %al,0xb(%rsp)
  20a54e:	88 d1                	mov    %dl,%cl
  20a550:	88 4c 24 0c          	mov    %cl,0xc(%rsp)
  20a554:	40 88 f2             	mov    %sil,%dl
  20a557:	88 54 24 0d          	mov    %dl,0xd(%rsp)
  20a55b:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20a560:	80 e2 01             	and    $0x1,%dl
  20a563:	88 54 24 23          	mov    %dl,0x23(%rsp)
  20a567:	80 e1 01             	and    $0x1,%cl
  20a56a:	88 4c 24 24          	mov    %cl,0x24(%rsp)
  20a56e:	88 44 24 25          	mov    %al,0x25(%rsp)
        match self.compare_exchange(current, new, order, strongest_failure_ordering(order)) {
  20a572:	0f b6 f8             	movzbl %al,%edi
  20a575:	e8 e6 03 00 00       	callq  20a960 <_ZN4core4sync6atomic26strongest_failure_ordering17h8260c82d3018753aE>
  20a57a:	88 44 24 0e          	mov    %al,0xe(%rsp)
  20a57e:	48 8b 3c 24          	mov    (%rsp),%rdi
  20a582:	8a 44 24 0c          	mov    0xc(%rsp),%al
  20a586:	8a 54 24 0d          	mov    0xd(%rsp),%dl
  20a58a:	40 8a 74 24 0e       	mov    0xe(%rsp),%sil
  20a58f:	8a 4c 24 0b          	mov    0xb(%rsp),%cl
  20a593:	0f b6 c9             	movzbl %cl,%ecx
  20a596:	44 0f b6 c6          	movzbl %sil,%r8d
  20a59a:	0f b6 f2             	movzbl %dl,%esi
  20a59d:	83 e6 01             	and    $0x1,%esi
  20a5a0:	0f b6 d0             	movzbl %al,%edx
  20a5a3:	83 e2 01             	and    $0x1,%edx
  20a5a6:	e8 55 00 00 00       	callq  20a600 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17hfd964857ee1605d8E>
  20a5ab:	88 54 24 11          	mov    %dl,0x11(%rsp)
  20a5af:	88 44 24 10          	mov    %al,0x10(%rsp)
  20a5b3:	0f b6 44 24 10       	movzbl 0x10(%rsp),%eax
  20a5b8:	a8 01                	test   $0x1,%al
  20a5ba:	74 06                	je     20a5c2 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h2284ade66790ed9bE+0x82>
  20a5bc:	eb 00                	jmp    20a5be <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h2284ade66790ed9bE+0x7e>
  20a5be:	eb 17                	jmp    20a5d7 <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h2284ade66790ed9bE+0x97>
  20a5c0:	0f 0b                	ud2    
            Ok(x) => x,
  20a5c2:	8a 44 24 11          	mov    0x11(%rsp),%al
  20a5c6:	88 c1                	mov    %al,%cl
  20a5c8:	80 e1 01             	and    $0x1,%cl
  20a5cb:	88 4c 24 27          	mov    %cl,0x27(%rsp)
  20a5cf:	24 01                	and    $0x1,%al
  20a5d1:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20a5d5:	eb 13                	jmp    20a5ea <_ZN4core4sync6atomic10AtomicBool16compare_and_swap17h2284ade66790ed9bE+0xaa>
            Err(x) => x,
  20a5d7:	8a 44 24 11          	mov    0x11(%rsp),%al
  20a5db:	88 c1                	mov    %al,%cl
  20a5dd:	80 e1 01             	and    $0x1,%cl
  20a5e0:	88 4c 24 26          	mov    %cl,0x26(%rsp)
  20a5e4:	24 01                	and    $0x1,%al
  20a5e6:	88 44 24 0f          	mov    %al,0xf(%rsp)
    }
  20a5ea:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20a5ee:	24 01                	and    $0x1,%al
  20a5f0:	0f b6 c0             	movzbl %al,%eax
  20a5f3:	48 83 c4 28          	add    $0x28,%rsp
  20a5f7:	c3                   	retq   
  20a5f8:	cc                   	int3   
  20a5f9:	cc                   	int3   
  20a5fa:	cc                   	int3   
  20a5fb:	cc                   	int3   
  20a5fc:	cc                   	int3   
  20a5fd:	cc                   	int3   
  20a5fe:	cc                   	int3   
  20a5ff:	cc                   	int3   

000000000020a600 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17hfd964857ee1605d8E>:
    pub fn compare_exchange(
  20a600:	48 83 ec 38          	sub    $0x38,%rsp
  20a604:	44 88 c0             	mov    %r8b,%al
  20a607:	88 44 24 04          	mov    %al,0x4(%rsp)
  20a60b:	88 4c 24 05          	mov    %cl,0x5(%rsp)
  20a60f:	88 54 24 06          	mov    %dl,0x6(%rsp)
  20a613:	40 88 74 24 07       	mov    %sil,0x7(%rsp)
  20a618:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  20a61d:	40 80 e6 01          	and    $0x1,%sil
  20a621:	40 88 74 24 2a       	mov    %sil,0x2a(%rsp)
  20a626:	80 e2 01             	and    $0x1,%dl
  20a629:	88 54 24 2b          	mov    %dl,0x2b(%rsp)
  20a62d:	88 4c 24 2c          	mov    %cl,0x2c(%rsp)
  20a631:	88 44 24 2d          	mov    %al,0x2d(%rsp)
  20a635:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20a63a:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  20a63f:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20a644:	8a 44 24 06          	mov    0x6(%rsp),%al
  20a648:	8a 54 24 07          	mov    0x7(%rsp),%dl
  20a64c:	40 8a 74 24 04       	mov    0x4(%rsp),%sil
  20a651:	8a 4c 24 05          	mov    0x5(%rsp),%cl
            atomic_compare_exchange(self.v.get(), current as u8, new as u8, success, failure)
  20a655:	0f b6 c9             	movzbl %cl,%ecx
  20a658:	44 0f b6 c6          	movzbl %sil,%r8d
  20a65c:	0f b6 f2             	movzbl %dl,%esi
  20a65f:	83 e6 01             	and    $0x1,%esi
  20a662:	0f b6 d0             	movzbl %al,%edx
  20a665:	83 e2 01             	and    $0x1,%edx
  20a668:	e8 a3 f9 ff ff       	callq  20a010 <_ZN4core4sync6atomic23atomic_compare_exchange17heff6457dff4719a4E>
  20a66d:	88 54 24 19          	mov    %dl,0x19(%rsp)
  20a671:	88 44 24 18          	mov    %al,0x18(%rsp)
        match unsafe {
  20a675:	0f b6 44 24 18       	movzbl 0x18(%rsp),%eax
  20a67a:	a8 01                	test   $0x1,%al
  20a67c:	74 06                	je     20a684 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17hfd964857ee1605d8E+0x84>
  20a67e:	eb 00                	jmp    20a680 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17hfd964857ee1605d8E+0x80>
  20a680:	eb 1c                	jmp    20a69e <_ZN4core4sync6atomic10AtomicBool16compare_exchange17hfd964857ee1605d8E+0x9e>
  20a682:	0f 0b                	ud2    
            Ok(x) => Ok(x != 0),
  20a684:	8a 44 24 19          	mov    0x19(%rsp),%al
  20a688:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  20a68c:	3c 00                	cmp    $0x0,%al
  20a68e:	0f 95 c0             	setne  %al
  20a691:	24 01                	and    $0x1,%al
  20a693:	88 44 24 11          	mov    %al,0x11(%rsp)
  20a697:	c6 44 24 10 00       	movb   $0x0,0x10(%rsp)
  20a69c:	eb 18                	jmp    20a6b6 <_ZN4core4sync6atomic10AtomicBool16compare_exchange17hfd964857ee1605d8E+0xb6>
            Err(x) => Err(x != 0),
  20a69e:	8a 44 24 19          	mov    0x19(%rsp),%al
  20a6a2:	88 44 24 2e          	mov    %al,0x2e(%rsp)
  20a6a6:	3c 00                	cmp    $0x0,%al
  20a6a8:	0f 95 c0             	setne  %al
  20a6ab:	24 01                	and    $0x1,%al
  20a6ad:	88 44 24 11          	mov    %al,0x11(%rsp)
  20a6b1:	c6 44 24 10 01       	movb   $0x1,0x10(%rsp)
    }
  20a6b6:	8a 44 24 10          	mov    0x10(%rsp),%al
  20a6ba:	8a 54 24 11          	mov    0x11(%rsp),%dl
  20a6be:	48 83 c4 38          	add    $0x38,%rsp
  20a6c2:	c3                   	retq   
  20a6c3:	cc                   	int3   
  20a6c4:	cc                   	int3   
  20a6c5:	cc                   	int3   
  20a6c6:	cc                   	int3   
  20a6c7:	cc                   	int3   
  20a6c8:	cc                   	int3   
  20a6c9:	cc                   	int3   
  20a6ca:	cc                   	int3   
  20a6cb:	cc                   	int3   
  20a6cc:	cc                   	int3   
  20a6cd:	cc                   	int3   
  20a6ce:	cc                   	int3   
  20a6cf:	cc                   	int3   

000000000020a6d0 <_ZN4core4sync6atomic10AtomicBool3new17h98a9ecabc8d0c764E>:
    pub const fn new(v: bool) -> AtomicBool {
  20a6d0:	48 83 ec 10          	sub    $0x10,%rsp
  20a6d4:	40 88 f8             	mov    %dil,%al
  20a6d7:	88 c1                	mov    %al,%cl
  20a6d9:	80 e1 01             	and    $0x1,%cl
  20a6dc:	88 4c 24 0d          	mov    %cl,0xd(%rsp)
        AtomicBool { v: UnsafeCell::new(v as u8) }
  20a6e0:	24 01                	and    $0x1,%al
  20a6e2:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20a6e6:	88 44 24 0e          	mov    %al,0xe(%rsp)
    }
  20a6ea:	8a 44 24 0e          	mov    0xe(%rsp),%al
  20a6ee:	88 44 24 07          	mov    %al,0x7(%rsp)
  20a6f2:	8a 44 24 07          	mov    0x7(%rsp),%al
  20a6f6:	88 44 24 08          	mov    %al,0x8(%rsp)
    }
  20a6fa:	8a 44 24 08          	mov    0x8(%rsp),%al
  20a6fe:	48 83 c4 10          	add    $0x10,%rsp
  20a702:	c3                   	retq   
  20a703:	cc                   	int3   
  20a704:	cc                   	int3   
  20a705:	cc                   	int3   
  20a706:	cc                   	int3   
  20a707:	cc                   	int3   
  20a708:	cc                   	int3   
  20a709:	cc                   	int3   
  20a70a:	cc                   	int3   
  20a70b:	cc                   	int3   
  20a70c:	cc                   	int3   
  20a70d:	cc                   	int3   
  20a70e:	cc                   	int3   
  20a70f:	cc                   	int3   

000000000020a710 <_ZN4core4sync6atomic10AtomicBool4load17h2c6e38e521bd9650E>:
    pub fn load(&self, order: Ordering) -> bool {
  20a710:	48 83 ec 28          	sub    $0x28,%rsp
  20a714:	40 88 f0             	mov    %sil,%al
  20a717:	88 44 24 07          	mov    %al,0x7(%rsp)
  20a71b:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20a720:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  20a724:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20a729:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  20a72e:	8a 44 24 07          	mov    0x7(%rsp),%al
  20a732:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        unsafe { atomic_load(self.v.get(), order) != 0 }
  20a737:	0f b6 f0             	movzbl %al,%esi
  20a73a:	e8 81 f7 ff ff       	callq  209ec0 <_ZN4core4sync6atomic11atomic_load17hd5f2e0b0dca34a91E>
  20a73f:	88 44 24 06          	mov    %al,0x6(%rsp)
  20a743:	8a 44 24 06          	mov    0x6(%rsp),%al
  20a747:	3c 00                	cmp    $0x0,%al
  20a749:	0f 95 c0             	setne  %al
    }
  20a74c:	24 01                	and    $0x1,%al
  20a74e:	0f b6 c0             	movzbl %al,%eax
  20a751:	48 83 c4 28          	add    $0x28,%rsp
  20a755:	c3                   	retq   
  20a756:	cc                   	int3   
  20a757:	cc                   	int3   
  20a758:	cc                   	int3   
  20a759:	cc                   	int3   
  20a75a:	cc                   	int3   
  20a75b:	cc                   	int3   
  20a75c:	cc                   	int3   
  20a75d:	cc                   	int3   
  20a75e:	cc                   	int3   
  20a75f:	cc                   	int3   

000000000020a760 <_ZN4core4sync6atomic10AtomicBool5store17ha53101aa1a511b4bE>:
    pub fn store(&self, val: bool, order: Ordering) {
  20a760:	48 83 ec 28          	sub    $0x28,%rsp
  20a764:	88 d0                	mov    %dl,%al
  20a766:	88 44 24 06          	mov    %al,0x6(%rsp)
  20a76a:	40 88 f1             	mov    %sil,%cl
  20a76d:	88 4c 24 07          	mov    %cl,0x7(%rsp)
  20a771:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20a776:	80 e1 01             	and    $0x1,%cl
  20a779:	88 4c 24 1e          	mov    %cl,0x1e(%rsp)
  20a77d:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  20a781:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20a786:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  20a78b:	8a 44 24 06          	mov    0x6(%rsp),%al
  20a78f:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20a794:	8a 4c 24 07          	mov    0x7(%rsp),%cl
            atomic_store(self.v.get(), val as u8, order);
  20a798:	80 e1 01             	and    $0x1,%cl
  20a79b:	0f b6 f1             	movzbl %cl,%esi
  20a79e:	0f b6 d0             	movzbl %al,%edx
  20a7a1:	e8 ba f7 ff ff       	callq  209f60 <_ZN4core4sync6atomic12atomic_store17h9b0400bc043adf64E>
    }
  20a7a6:	48 83 c4 28          	add    $0x28,%rsp
  20a7aa:	c3                   	retq   
  20a7ab:	cc                   	int3   
  20a7ac:	cc                   	int3   
  20a7ad:	cc                   	int3   
  20a7ae:	cc                   	int3   
  20a7af:	cc                   	int3   

000000000020a7b0 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h6b6a92d7904b1f4dE>:
            pub fn compare_and_swap(&self,
  20a7b0:	48 83 ec 68          	sub    $0x68,%rsp
  20a7b4:	48 89 14 24          	mov    %rdx,(%rsp)
  20a7b8:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  20a7bd:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20a7c2:	88 c8                	mov    %cl,%al
  20a7c4:	88 44 24 1e          	mov    %al,0x1e(%rsp)
  20a7c8:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  20a7cd:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  20a7d2:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  20a7d7:	88 44 24 57          	mov    %al,0x57(%rsp)
                                            strongest_failure_ordering(order)) {
  20a7db:	0f b6 f8             	movzbl %al,%edi
  20a7de:	e8 7d 01 00 00       	callq  20a960 <_ZN4core4sync6atomic26strongest_failure_ordering17h8260c82d3018753aE>
  20a7e3:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  20a7e7:	48 8b 14 24          	mov    (%rsp),%rdx
  20a7eb:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  20a7f0:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  20a7f5:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  20a7f9:	8a 4c 24 1e          	mov    0x1e(%rsp),%cl
                match self.compare_exchange(current,
  20a7fd:	0f b6 c9             	movzbl %cl,%ecx
  20a800:	44 0f b6 c0          	movzbl %al,%r8d
  20a804:	e8 47 00 00 00       	callq  20a850 <_ZN4core4sync6atomic11AtomicUsize16compare_exchange17hdb7614b763f33c27E>
  20a809:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  20a80e:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20a813:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  20a818:	48 85 c0             	test   %rax,%rax
  20a81b:	74 06                	je     20a823 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h6b6a92d7904b1f4dE+0x73>
  20a81d:	eb 00                	jmp    20a81f <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h6b6a92d7904b1f4dE+0x6f>
  20a81f:	eb 13                	jmp    20a834 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h6b6a92d7904b1f4dE+0x84>
  20a821:	0f 0b                	ud2    
                    Ok(x) => x,
  20a823:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  20a828:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  20a82d:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20a832:	eb 0f                	jmp    20a843 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17h6b6a92d7904b1f4dE+0x93>
                    Err(x) => x,
  20a834:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  20a839:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  20a83e:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
            }
  20a843:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20a848:	48 83 c4 68          	add    $0x68,%rsp
  20a84c:	c3                   	retq   
  20a84d:	cc                   	int3   
  20a84e:	cc                   	int3   
  20a84f:	cc                   	int3   

000000000020a850 <_ZN4core4sync6atomic11AtomicUsize16compare_exchange17hdb7614b763f33c27E>:
            pub fn compare_exchange(&self,
  20a850:	48 83 ec 58          	sub    $0x58,%rsp
  20a854:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  20a859:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  20a85e:	44 88 c0             	mov    %r8b,%al
  20a861:	88 44 24 26          	mov    %al,0x26(%rsp)
  20a865:	88 4c 24 27          	mov    %cl,0x27(%rsp)
  20a869:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  20a86e:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20a873:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  20a878:	88 4c 24 4e          	mov    %cl,0x4e(%rsp)
  20a87c:	88 44 24 4f          	mov    %al,0x4f(%rsp)
  20a880:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20a885:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
  20a88a:	8a 44 24 26          	mov    0x26(%rsp),%al
  20a88e:	8a 4c 24 27          	mov    0x27(%rsp),%cl
  20a892:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  20a897:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  20a89c:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
                unsafe { atomic_compare_exchange(self.v.get(), current, new, success, failure) }
  20a8a1:	0f b6 c9             	movzbl %cl,%ecx
  20a8a4:	44 0f b6 c0          	movzbl %al,%r8d
  20a8a8:	e8 a3 28 00 00       	callq  20d150 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE>
  20a8ad:	48 89 04 24          	mov    %rax,(%rsp)
  20a8b1:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  20a8b6:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  20a8bb:	48 8b 04 24          	mov    (%rsp),%rax
            }
  20a8bf:	48 83 c4 58          	add    $0x58,%rsp
  20a8c3:	c3                   	retq   
  20a8c4:	cc                   	int3   
  20a8c5:	cc                   	int3   
  20a8c6:	cc                   	int3   
  20a8c7:	cc                   	int3   
  20a8c8:	cc                   	int3   
  20a8c9:	cc                   	int3   
  20a8ca:	cc                   	int3   
  20a8cb:	cc                   	int3   
  20a8cc:	cc                   	int3   
  20a8cd:	cc                   	int3   
  20a8ce:	cc                   	int3   
  20a8cf:	cc                   	int3   

000000000020a8d0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>:
            pub fn load(&self, order: Ordering) -> $int_type {
  20a8d0:	48 83 ec 38          	sub    $0x38,%rsp
  20a8d4:	40 88 f0             	mov    %sil,%al
  20a8d7:	88 44 24 17          	mov    %al,0x17(%rsp)
  20a8db:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  20a8e0:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  20a8e4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20a8e9:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  20a8ee:	8a 44 24 17          	mov    0x17(%rsp),%al
  20a8f2:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                unsafe { atomic_load(self.v.get(), order) }
  20a8f7:	0f b6 f0             	movzbl %al,%esi
  20a8fa:	e8 e1 26 00 00       	callq  20cfe0 <_ZN4core4sync6atomic11atomic_load17h039649f7f192edf8E>
  20a8ff:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20a904:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            }
  20a909:	48 83 c4 38          	add    $0x38,%rsp
  20a90d:	c3                   	retq   
  20a90e:	cc                   	int3   
  20a90f:	cc                   	int3   

000000000020a910 <_ZN4core4sync6atomic11AtomicUsize5store17h5dd1fdb8f532295fE>:
            pub fn store(&self, val: $int_type, order: Ordering) {
  20a910:	48 83 ec 38          	sub    $0x38,%rsp
  20a914:	48 89 34 24          	mov    %rsi,(%rsp)
  20a918:	88 d0                	mov    %dl,%al
  20a91a:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20a91e:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20a923:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  20a928:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  20a92c:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20a931:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  20a936:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20a93a:	48 8b 34 24          	mov    (%rsp),%rsi
  20a93e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                unsafe { atomic_store(self.v.get(), val, order); }
  20a943:	0f b6 d0             	movzbl %al,%edx
  20a946:	e8 45 27 00 00       	callq  20d090 <_ZN4core4sync6atomic12atomic_store17h62c662d0c0903d58E>
            }
  20a94b:	48 83 c4 38          	add    $0x38,%rsp
  20a94f:	c3                   	retq   

000000000020a950 <_ZN4core4sync6atomic14spin_loop_hint17h92421a221054ae95E>:
///
/// [`hint::spin_loop`]: crate::hint::spin_loop
#[inline]
#[stable(feature = "spin_loop_hint", since = "1.24.0")]
#[rustc_deprecated(since = "1.51.0", reason = "use hint::spin_loop instead")]
pub fn spin_loop_hint() {
  20a950:	50                   	push   %rax
    spin_loop()
  20a951:	e8 da 12 00 00       	callq  20bc30 <_ZN4core4hint9spin_loop17h42efeaf1154a507bE>
}
  20a956:	58                   	pop    %rax
  20a957:	c3                   	retq   
  20a958:	cc                   	int3   
  20a959:	cc                   	int3   
  20a95a:	cc                   	int3   
  20a95b:	cc                   	int3   
  20a95c:	cc                   	int3   
  20a95d:	cc                   	int3   
  20a95e:	cc                   	int3   
  20a95f:	cc                   	int3   

000000000020a960 <_ZN4core4sync6atomic26strongest_failure_ordering17h8260c82d3018753aE>:
fn strongest_failure_ordering(order: Ordering) -> Ordering {
  20a960:	48 83 ec 10          	sub    $0x10,%rsp
  20a964:	40 88 f8             	mov    %dil,%al
  20a967:	88 44 24 0e          	mov    %al,0xe(%rsp)
    match order {
  20a96b:	0f b6 44 24 0e       	movzbl 0xe(%rsp),%eax
  20a970:	48 89 04 24          	mov    %rax,(%rsp)
  20a974:	48 8b 04 24          	mov    (%rsp),%rax
  20a978:	48 8d 0d f1 63 ff ff 	lea    -0x9c0f(%rip),%rcx        # 200d70 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x271>
  20a97f:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  20a983:	48 01 c8             	add    %rcx,%rax
  20a986:	ff e0                	jmpq   *%rax
  20a988:	0f 0b                	ud2    
        Relaxed => Relaxed,
  20a98a:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
  20a98f:	eb 1a                	jmp    20a9ab <_ZN4core4sync6atomic26strongest_failure_ordering17h8260c82d3018753aE+0x4b>
        Release => Relaxed,
  20a991:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
  20a996:	eb 13                	jmp    20a9ab <_ZN4core4sync6atomic26strongest_failure_ordering17h8260c82d3018753aE+0x4b>
        Acquire => Acquire,
  20a998:	c6 44 24 0f 02       	movb   $0x2,0xf(%rsp)
  20a99d:	eb 0c                	jmp    20a9ab <_ZN4core4sync6atomic26strongest_failure_ordering17h8260c82d3018753aE+0x4b>
        AcqRel => Acquire,
  20a99f:	c6 44 24 0f 02       	movb   $0x2,0xf(%rsp)
  20a9a4:	eb 05                	jmp    20a9ab <_ZN4core4sync6atomic26strongest_failure_ordering17h8260c82d3018753aE+0x4b>
        SeqCst => SeqCst,
  20a9a6:	c6 44 24 0f 04       	movb   $0x4,0xf(%rsp)
}
  20a9ab:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20a9af:	48 83 c4 10          	add    $0x10,%rsp
  20a9b3:	c3                   	retq   
  20a9b4:	cc                   	int3   
  20a9b5:	cc                   	int3   
  20a9b6:	cc                   	int3   
  20a9b7:	cc                   	int3   
  20a9b8:	cc                   	int3   
  20a9b9:	cc                   	int3   
  20a9ba:	cc                   	int3   
  20a9bb:	cc                   	int3   
  20a9bc:	cc                   	int3   
  20a9bd:	cc                   	int3   
  20a9be:	cc                   	int3   
  20a9bf:	cc                   	int3   

000000000020a9c0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd89ffd2eae3f03a3E>:
        #[stable(feature = "rust1", since = "1.0.0")]
        impl<'a, T> Iterator for $name<'a, T> {
            type Item = $elem;

            #[inline]
            fn next(&mut self) -> Option<$elem> {
  20a9c0:	48 83 ec 78          	sub    $0x78,%rsp
  20a9c4:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  20a9c9:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
                // SAFETY: `assume` calls are safe since a slice's start pointer
                // must be non-null, and slices over non-ZSTs must also have a
                // non-null end pointer. The call to `next_unchecked!` is safe
                // since we check if the iterator is empty first.
                unsafe {
                    assume(!self.ptr.as_ptr().is_null());
  20a9ce:	48 8b 3f             	mov    (%rdi),%rdi
  20a9d1:	e8 4a 23 00 00       	callq  20cd20 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h4370c7a5de12ae4cE>
  20a9d6:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20a9db:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  20a9e0:	e8 2b 08 00 00       	callq  20b210 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h33afae7df97e265bE>
                    if mem::size_of::<T>() != 0 {
  20a9e5:	eb 00                	jmp    20a9e7 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd89ffd2eae3f03a3E+0x27>
  20a9e7:	b8 01 00 00 00       	mov    $0x1,%eax
  20a9ec:	48 83 f8 00          	cmp    $0x0,%rax
  20a9f0:	75 02                	jne    20a9f4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd89ffd2eae3f03a3E+0x34>
  20a9f2:	eb 10                	jmp    20aa04 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd89ffd2eae3f03a3E+0x44>
  20a9f4:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
                        assume(!self.end.is_null());
  20a9f9:	48 8b 78 08          	mov    0x8(%rax),%rdi
  20a9fd:	e8 6e 2d 00 00       	callq  20d770 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h1bffe517e0fb2d88E>
                    if mem::size_of::<T>() != 0 {
  20aa02:	eb 00                	jmp    20aa04 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd89ffd2eae3f03a3E+0x44>
  20aa04:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
                    }
                    if is_empty!(self) {
  20aa09:	48 8b 38             	mov    (%rax),%rdi
  20aa0c:	e8 0f 23 00 00       	callq  20cd20 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h4370c7a5de12ae4cE>
  20aa11:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20aa16:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20aa1b:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  20aa20:	48 3b 41 08          	cmp    0x8(%rcx),%rax
  20aa24:	74 77                	je     20aa9d <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd89ffd2eae3f03a3E+0xdd>
  20aa26:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20aa2b:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20aa30:	48 c7 44 24 50 01 00 	movq   $0x1,0x50(%rsp)
  20aa37:	00 00 
                    let old = self.ptr.as_ptr();
  20aa39:	48 8b 38             	mov    (%rax),%rdi
  20aa3c:	e8 df 22 00 00       	callq  20cd20 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h4370c7a5de12ae4cE>
  20aa41:	48 89 c1             	mov    %rax,%rcx
  20aa44:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20aa49:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  20aa4e:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
                    self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
  20aa53:	48 8b 38             	mov    (%rax),%rdi
  20aa56:	e8 c5 22 00 00       	callq  20cd20 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h4370c7a5de12ae4cE>
  20aa5b:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  20aa60:	48 c7 44 24 68 01 00 	movq   $0x1,0x68(%rsp)
  20aa67:	00 00 
  20aa69:	48 83 c0 01          	add    $0x1,%rax
  20aa6d:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  20aa72:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  20aa77:	e8 84 22 00 00       	callq  20cd00 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h528848c04cfca7adE>
  20aa7c:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  20aa81:	48 89 c2             	mov    %rax,%rdx
  20aa84:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20aa89:	48 89 11             	mov    %rdx,(%rcx)
                    old
  20aa8c:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            }
  20aa91:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20aa96:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
                        None
                    } else {
                        Some(next_unchecked!(self))
  20aa9b:	eb 13                	jmp    20aab0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd89ffd2eae3f03a3E+0xf0>
                        None
  20aa9d:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  20aaa4:	00 00 
                    }
                }
            }
  20aaa6:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  20aaab:	48 83 c4 78          	add    $0x78,%rsp
  20aaaf:	c3                   	retq   
  20aab0:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
                        Some(next_unchecked!(self))
  20aab5:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
                    if is_empty!(self) {
  20aaba:	eb ea                	jmp    20aaa6 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd89ffd2eae3f03a3E+0xe6>
  20aabc:	cc                   	int3   
  20aabd:	cc                   	int3   
  20aabe:	cc                   	int3   
  20aabf:	cc                   	int3   

000000000020aac0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h7e2a421563bf9ca4E>:
macro_rules! fmt_refs {
    ($($tr:ident),*) => {
        $(
        #[stable(feature = "rust1", since = "1.0.0")]
        impl<T: ?Sized + $tr> $tr for &T {
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
  20aac0:	48 83 ec 18          	sub    $0x18,%rsp
  20aac4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20aac9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20aace:	48 8b 3f             	mov    (%rdi),%rdi
  20aad1:	e8 4a 48 00 00       	callq  20f320 <_ZN73_$LT$core..panic..panic_info..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17hbda918ec9f68325eE>
  20aad6:	88 44 24 07          	mov    %al,0x7(%rsp)
  20aada:	8a 44 24 07          	mov    0x7(%rsp),%al
  20aade:	24 01                	and    $0x1,%al
  20aae0:	0f b6 c0             	movzbl %al,%eax
  20aae3:	48 83 c4 18          	add    $0x18,%rsp
  20aae7:	c3                   	retq   
  20aae8:	cc                   	int3   
  20aae9:	cc                   	int3   
  20aaea:	cc                   	int3   
  20aaeb:	cc                   	int3   
  20aaec:	cc                   	int3   
  20aaed:	cc                   	int3   
  20aaee:	cc                   	int3   
  20aaef:	cc                   	int3   

000000000020aaf0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h31b8a77bb6ae052eE>:
  20aaf0:	48 83 ec 18          	sub    $0x18,%rsp
  20aaf4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20aaf9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20aafe:	48 8b 3f             	mov    (%rdi),%rdi
  20ab01:	e8 da 57 00 00       	callq  2102e0 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h98e7025a5377be95E>
  20ab06:	88 44 24 07          	mov    %al,0x7(%rsp)
  20ab0a:	8a 44 24 07          	mov    0x7(%rsp),%al
  20ab0e:	24 01                	and    $0x1,%al
  20ab10:	0f b6 c0             	movzbl %al,%eax
  20ab13:	48 83 c4 18          	add    $0x18,%rsp
  20ab17:	c3                   	retq   
  20ab18:	cc                   	int3   
  20ab19:	cc                   	int3   
  20ab1a:	cc                   	int3   
  20ab1b:	cc                   	int3   
  20ab1c:	cc                   	int3   
  20ab1d:	cc                   	int3   
  20ab1e:	cc                   	int3   
  20ab1f:	cc                   	int3   

000000000020ab20 <_ZN4core3fmt10ArgumentV13new17h1055d36b2201d16bE>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20ab20:	48 83 ec 48          	sub    $0x48,%rsp
  20ab24:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20ab29:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20ab2e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20ab33:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20ab38:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20ab3d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20ab42:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20ab47:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20ab4c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20ab51:	48 89 04 24          	mov    %rax,(%rsp)
  20ab55:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20ab5a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20ab5e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20ab63:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20ab68:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20ab6d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20ab72:	48 83 c4 48          	add    $0x48,%rsp
  20ab76:	c3                   	retq   
  20ab77:	cc                   	int3   
  20ab78:	cc                   	int3   
  20ab79:	cc                   	int3   
  20ab7a:	cc                   	int3   
  20ab7b:	cc                   	int3   
  20ab7c:	cc                   	int3   
  20ab7d:	cc                   	int3   
  20ab7e:	cc                   	int3   
  20ab7f:	cc                   	int3   

000000000020ab80 <_ZN4core3fmt10ArgumentV13new17h30866114a7317d15E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20ab80:	48 83 ec 48          	sub    $0x48,%rsp
  20ab84:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20ab89:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20ab8e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20ab93:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20ab98:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20ab9d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20aba2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20aba7:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20abac:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20abb1:	48 89 04 24          	mov    %rax,(%rsp)
  20abb5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20abba:	48 8b 0c 24          	mov    (%rsp),%rcx
  20abbe:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20abc3:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20abc8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20abcd:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20abd2:	48 83 c4 48          	add    $0x48,%rsp
  20abd6:	c3                   	retq   
  20abd7:	cc                   	int3   
  20abd8:	cc                   	int3   
  20abd9:	cc                   	int3   
  20abda:	cc                   	int3   
  20abdb:	cc                   	int3   
  20abdc:	cc                   	int3   
  20abdd:	cc                   	int3   
  20abde:	cc                   	int3   
  20abdf:	cc                   	int3   

000000000020abe0 <_ZN4core3fmt10ArgumentV13new17h3a05cfc231554408E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20abe0:	48 83 ec 48          	sub    $0x48,%rsp
  20abe4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20abe9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20abee:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20abf3:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20abf8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20abfd:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20ac02:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20ac07:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20ac0c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20ac11:	48 89 04 24          	mov    %rax,(%rsp)
  20ac15:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20ac1a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20ac1e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20ac23:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20ac28:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20ac2d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20ac32:	48 83 c4 48          	add    $0x48,%rsp
  20ac36:	c3                   	retq   
  20ac37:	cc                   	int3   
  20ac38:	cc                   	int3   
  20ac39:	cc                   	int3   
  20ac3a:	cc                   	int3   
  20ac3b:	cc                   	int3   
  20ac3c:	cc                   	int3   
  20ac3d:	cc                   	int3   
  20ac3e:	cc                   	int3   
  20ac3f:	cc                   	int3   

000000000020ac40 <_ZN4core3fmt10ArgumentV13new17h3d8fc7a58ad0ecdfE>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20ac40:	48 83 ec 48          	sub    $0x48,%rsp
  20ac44:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20ac49:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20ac4e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20ac53:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20ac58:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20ac5d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20ac62:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20ac67:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20ac6c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20ac71:	48 89 04 24          	mov    %rax,(%rsp)
  20ac75:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20ac7a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20ac7e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20ac83:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20ac88:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20ac8d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20ac92:	48 83 c4 48          	add    $0x48,%rsp
  20ac96:	c3                   	retq   
  20ac97:	cc                   	int3   
  20ac98:	cc                   	int3   
  20ac99:	cc                   	int3   
  20ac9a:	cc                   	int3   
  20ac9b:	cc                   	int3   
  20ac9c:	cc                   	int3   
  20ac9d:	cc                   	int3   
  20ac9e:	cc                   	int3   
  20ac9f:	cc                   	int3   

000000000020aca0 <_ZN4core3fmt10ArgumentV13new17h6660be7cf414b0ecE>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20aca0:	48 83 ec 48          	sub    $0x48,%rsp
  20aca4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20aca9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20acae:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20acb3:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20acb8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20acbd:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20acc2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20acc7:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20accc:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20acd1:	48 89 04 24          	mov    %rax,(%rsp)
  20acd5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20acda:	48 8b 0c 24          	mov    (%rsp),%rcx
  20acde:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20ace3:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20ace8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20aced:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20acf2:	48 83 c4 48          	add    $0x48,%rsp
  20acf6:	c3                   	retq   
  20acf7:	cc                   	int3   
  20acf8:	cc                   	int3   
  20acf9:	cc                   	int3   
  20acfa:	cc                   	int3   
  20acfb:	cc                   	int3   
  20acfc:	cc                   	int3   
  20acfd:	cc                   	int3   
  20acfe:	cc                   	int3   
  20acff:	cc                   	int3   

000000000020ad00 <_ZN4core3fmt10ArgumentV13new17hbc228f159b345650E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20ad00:	48 83 ec 48          	sub    $0x48,%rsp
  20ad04:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20ad09:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20ad0e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20ad13:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20ad18:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20ad1d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20ad22:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20ad27:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20ad2c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20ad31:	48 89 04 24          	mov    %rax,(%rsp)
  20ad35:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20ad3a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20ad3e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20ad43:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20ad48:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20ad4d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20ad52:	48 83 c4 48          	add    $0x48,%rsp
  20ad56:	c3                   	retq   
  20ad57:	cc                   	int3   
  20ad58:	cc                   	int3   
  20ad59:	cc                   	int3   
  20ad5a:	cc                   	int3   
  20ad5b:	cc                   	int3   
  20ad5c:	cc                   	int3   
  20ad5d:	cc                   	int3   
  20ad5e:	cc                   	int3   
  20ad5f:	cc                   	int3   

000000000020ad60 <_ZN4core3fmt10ArgumentV13new17hcebee369d36adbb6E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20ad60:	48 83 ec 48          	sub    $0x48,%rsp
  20ad64:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20ad69:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20ad6e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20ad73:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20ad78:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20ad7d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20ad82:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20ad87:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20ad8c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20ad91:	48 89 04 24          	mov    %rax,(%rsp)
  20ad95:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20ad9a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20ad9e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20ada3:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20ada8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20adad:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20adb2:	48 83 c4 48          	add    $0x48,%rsp
  20adb6:	c3                   	retq   
  20adb7:	cc                   	int3   
  20adb8:	cc                   	int3   
  20adb9:	cc                   	int3   
  20adba:	cc                   	int3   
  20adbb:	cc                   	int3   
  20adbc:	cc                   	int3   
  20adbd:	cc                   	int3   
  20adbe:	cc                   	int3   
  20adbf:	cc                   	int3   

000000000020adc0 <_ZN4core3fmt10ArgumentV13new17hdc56630c0a43f264E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20adc0:	48 83 ec 48          	sub    $0x48,%rsp
  20adc4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20adc9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20adce:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20add3:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20add8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20addd:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20ade2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20ade7:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20adec:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20adf1:	48 89 04 24          	mov    %rax,(%rsp)
  20adf5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20adfa:	48 8b 0c 24          	mov    (%rsp),%rcx
  20adfe:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20ae03:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20ae08:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20ae0d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20ae12:	48 83 c4 48          	add    $0x48,%rsp
  20ae16:	c3                   	retq   
  20ae17:	cc                   	int3   
  20ae18:	cc                   	int3   
  20ae19:	cc                   	int3   
  20ae1a:	cc                   	int3   
  20ae1b:	cc                   	int3   
  20ae1c:	cc                   	int3   
  20ae1d:	cc                   	int3   
  20ae1e:	cc                   	int3   
  20ae1f:	cc                   	int3   

000000000020ae20 <_ZN4core3fmt10ArgumentV13new17heaaa3a467d979ad9E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20ae20:	48 83 ec 48          	sub    $0x48,%rsp
  20ae24:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20ae29:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20ae2e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20ae33:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20ae38:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20ae3d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20ae42:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20ae47:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20ae4c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20ae51:	48 89 04 24          	mov    %rax,(%rsp)
  20ae55:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20ae5a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20ae5e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20ae63:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20ae68:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20ae6d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20ae72:	48 83 c4 48          	add    $0x48,%rsp
  20ae76:	c3                   	retq   
  20ae77:	cc                   	int3   
  20ae78:	cc                   	int3   
  20ae79:	cc                   	int3   
  20ae7a:	cc                   	int3   
  20ae7b:	cc                   	int3   
  20ae7c:	cc                   	int3   
  20ae7d:	cc                   	int3   
  20ae7e:	cc                   	int3   
  20ae7f:	cc                   	int3   

000000000020ae80 <_ZN4core3fmt10ArgumentV13new17hed39039da1d20c39E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20ae80:	48 83 ec 48          	sub    $0x48,%rsp
  20ae84:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20ae89:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20ae8e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20ae93:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20ae98:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20ae9d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20aea2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20aea7:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20aeac:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20aeb1:	48 89 04 24          	mov    %rax,(%rsp)
  20aeb5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20aeba:	48 8b 0c 24          	mov    (%rsp),%rcx
  20aebe:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20aec3:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20aec8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20aecd:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20aed2:	48 83 c4 48          	add    $0x48,%rsp
  20aed6:	c3                   	retq   
  20aed7:	cc                   	int3   
  20aed8:	cc                   	int3   
  20aed9:	cc                   	int3   
  20aeda:	cc                   	int3   
  20aedb:	cc                   	int3   
  20aedc:	cc                   	int3   
  20aedd:	cc                   	int3   
  20aede:	cc                   	int3   
  20aedf:	cc                   	int3   

000000000020aee0 <_ZN4core3fmt10ArgumentV13new17hf01d32011d96aef4E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20aee0:	48 83 ec 48          	sub    $0x48,%rsp
  20aee4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20aee9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20aeee:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20aef3:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20aef8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20aefd:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20af02:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20af07:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20af0c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20af11:	48 89 04 24          	mov    %rax,(%rsp)
  20af15:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20af1a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20af1e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20af23:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20af28:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20af2d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20af32:	48 83 c4 48          	add    $0x48,%rsp
  20af36:	c3                   	retq   
  20af37:	cc                   	int3   
  20af38:	cc                   	int3   
  20af39:	cc                   	int3   
  20af3a:	cc                   	int3   
  20af3b:	cc                   	int3   
  20af3c:	cc                   	int3   
  20af3d:	cc                   	int3   
  20af3e:	cc                   	int3   
  20af3f:	cc                   	int3   

000000000020af40 <_ZN81_$LT$core..str..iter..Bytes$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hcd34291bd89f867dE>:
#[stable(feature = "rust1", since = "1.0.0")]
impl Iterator for Bytes<'_> {
    type Item = u8;

    #[inline]
    fn next(&mut self) -> Option<u8> {
  20af40:	48 83 ec 18          	sub    $0x18,%rsp
  20af44:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.0.next()
  20af49:	e8 62 d0 ff ff       	callq  207fb0 <_ZN104_$LT$core..iter..adapters..copied..Copied$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h043b2749de415b60E>
  20af4e:	88 44 24 0e          	mov    %al,0xe(%rsp)
  20af52:	88 54 24 0f          	mov    %dl,0xf(%rsp)
  20af56:	8a 54 24 0f          	mov    0xf(%rsp),%dl
  20af5a:	8a 44 24 0e          	mov    0xe(%rsp),%al
    }
  20af5e:	24 01                	and    $0x1,%al
  20af60:	48 83 c4 18          	add    $0x18,%rsp
  20af64:	c3                   	retq   
  20af65:	cc                   	int3   
  20af66:	cc                   	int3   
  20af67:	cc                   	int3   
  20af68:	cc                   	int3   
  20af69:	cc                   	int3   
  20af6a:	cc                   	int3   
  20af6b:	cc                   	int3   
  20af6c:	cc                   	int3   
  20af6d:	cc                   	int3   
  20af6e:	cc                   	int3   
  20af6f:	cc                   	int3   

000000000020af70 <_start>:

/// This function is called on panic.


#[no_mangle] // don't mangle the name of this function
pub extern "C" fn _start(boot_info: &'static BootInfo) -> ! {
  20af70:	48 81 ec 28 01 00 00 	sub    $0x128,%rsp
  20af77:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20af7c:	48 89 bc 24 f0 00 00 	mov    %rdi,0xf0(%rsp)
  20af83:	00 

    // init basic logging through UART as of now:
    logging::init();
  20af84:	e8 77 e0 ff ff       	callq  209000 <_ZN9r3_kernel7logging4init17h8bae91a50c531e46E>
  20af89:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    BootProtocol::create(boot_info);
  20af8e:	e8 1d a9 ff ff       	callq  2058b0 <_ZN9r3_kernel10boot_proto12BootProtocol6create17hda06133fa30eec4aE>
    log::info!("Saving boot info");
  20af93:	48 c7 44 24 18 03 00 	movq   $0x3,0x18(%rsp)
  20af9a:	00 00 
  20af9c:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  20afa1:	48 8d 35 90 53 ff ff 	lea    -0xac70(%rip),%rsi        # 200338 <str.0+0x38>
  20afa8:	e8 93 9c ff ff       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20afad:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20afb1:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20afb5:	a8 01                	test   $0x1,%al
  20afb7:	75 09                	jne    20afc2 <_start+0x52>
  20afb9:	eb 00                	jmp    20afbb <_start+0x4b>
  20afbb:	c6 44 24 27 00       	movb   $0x0,0x27(%rsp)
  20afc0:	eb 4e                	jmp    20b010 <_start+0xa0>
  20afc2:	c6 84 24 1f 01 00 00 	movb   $0x0,0x11f(%rsp)
  20afc9:	00 
  20afca:	48 8b 3d 17 8b 00 00 	mov    0x8b17(%rip),%rdi        # 213ae8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  20afd1:	0f b6 b4 24 1f 01 00 	movzbl 0x11f(%rsp),%esi
  20afd8:	00 
  20afd9:	e8 f2 f8 ff ff       	callq  20a8d0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  20afde:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
  20afe5:	00 
  20afe6:	48 8b 84 24 20 01 00 	mov    0x120(%rsp),%rax
  20afed:	00 
  20afee:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20aff3:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  20aff8:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  20affd:	e8 3e 9c ff ff       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20b002:	88 44 24 0e          	mov    %al,0xe(%rsp)
  20b006:	8a 44 24 0e          	mov    0xe(%rsp),%al
  20b00a:	24 01                	and    $0x1,%al
  20b00c:	88 44 24 27          	mov    %al,0x27(%rsp)
  20b010:	f6 44 24 27 01       	testb  $0x1,0x27(%rsp)
  20b015:	75 20                	jne    20b037 <_start+0xc7>
    log::info!("Hello, kernel world!");
  20b017:	48 c7 44 24 60 03 00 	movq   $0x3,0x60(%rsp)
  20b01e:	00 00 
  20b020:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  20b025:	48 8d 35 0c 53 ff ff 	lea    -0xacf4(%rip),%rsi        # 200338 <str.0+0x38>
  20b02c:	e8 0f 9c ff ff       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20b031:	88 44 24 0d          	mov    %al,0xd(%rsp)
  20b035:	eb 3a                	jmp    20b071 <_start+0x101>
    log::info!("Saving boot info");
  20b037:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  20b03c:	48 8d 35 0d 82 00 00 	lea    0x820d(%rip),%rsi        # 213250 <memset+0x1970>
  20b043:	ba 01 00 00 00       	mov    $0x1,%edx
  20b048:	48 8d 0d 39 5d ff ff 	lea    -0xa2c7(%rip),%rcx        # 200d88 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x289>
  20b04f:	31 c0                	xor    %eax,%eax
  20b051:	41 89 c0             	mov    %eax,%r8d
  20b054:	e8 b7 96 ff ff       	callq  204710 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  20b059:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  20b05e:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  20b063:	48 8d 15 f6 81 00 00 	lea    0x81f6(%rip),%rdx        # 213260 <memset+0x1980>
  20b06a:	e8 c1 16 00 00       	callq  20c730 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  20b06f:	eb a6                	jmp    20b017 <_start+0xa7>
  20b071:	8a 44 24 0d          	mov    0xd(%rsp),%al
    log::info!("Hello, kernel world!");
  20b075:	a8 01                	test   $0x1,%al
  20b077:	75 09                	jne    20b082 <_start+0x112>
  20b079:	eb 00                	jmp    20b07b <_start+0x10b>
  20b07b:	c6 44 24 6f 00       	movb   $0x0,0x6f(%rsp)
  20b080:	eb 4e                	jmp    20b0d0 <_start+0x160>
  20b082:	c6 84 24 0f 01 00 00 	movb   $0x0,0x10f(%rsp)
  20b089:	00 
  20b08a:	48 8b 3d 57 8a 00 00 	mov    0x8a57(%rip),%rdi        # 213ae8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  20b091:	0f b6 b4 24 0f 01 00 	movzbl 0x10f(%rsp),%esi
  20b098:	00 
  20b099:	e8 32 f8 ff ff       	callq  20a8d0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  20b09e:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  20b0a5:	00 
  20b0a6:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
  20b0ad:	00 
  20b0ae:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  20b0b3:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  20b0b8:	48 8d 74 24 70       	lea    0x70(%rsp),%rsi
  20b0bd:	e8 7e 9b ff ff       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20b0c2:	88 44 24 0c          	mov    %al,0xc(%rsp)
  20b0c6:	8a 44 24 0c          	mov    0xc(%rsp),%al
  20b0ca:	24 01                	and    $0x1,%al
  20b0cc:	88 44 24 6f          	mov    %al,0x6f(%rsp)
  20b0d0:	f6 44 24 6f 01       	testb  $0x1,0x6f(%rsp)
  20b0d5:	75 07                	jne    20b0de <_start+0x16e>

    BootProtocol::print_boot_info();
  20b0d7:	e8 44 a9 ff ff       	callq  205a20 <_ZN9r3_kernel10boot_proto12BootProtocol15print_boot_info17h223d91c5e4de5507E>
  20b0dc:	eb 3a                	jmp    20b118 <_start+0x1a8>
    log::info!("Hello, kernel world!");
  20b0de:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  20b0e3:	48 8d 35 ae 81 00 00 	lea    0x81ae(%rip),%rsi        # 213298 <memset+0x19b8>
  20b0ea:	ba 01 00 00 00       	mov    $0x1,%edx
  20b0ef:	48 8d 0d 92 5c ff ff 	lea    -0xa36e(%rip),%rcx        # 200d88 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x289>
  20b0f6:	31 c0                	xor    %eax,%eax
  20b0f8:	41 89 c0             	mov    %eax,%r8d
  20b0fb:	e8 10 96 ff ff       	callq  204710 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  20b100:	48 8b 74 24 60       	mov    0x60(%rsp),%rsi
  20b105:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  20b10a:	48 8d 15 97 81 00 00 	lea    0x8197(%rip),%rdx        # 2132a8 <memset+0x19c8>
  20b111:	e8 1a 16 00 00       	callq  20c730 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  20b116:	eb bf                	jmp    20b0d7 <_start+0x167>

    cpu::segments::init_gdt();
  20b118:	e8 23 91 ff ff       	callq  204240 <_ZN9r3_kernel3cpu8segments8init_gdt17h9348fa95bcfcd487E>
    cpu::exceptions::init_exceptions();
  20b11d:	e8 be 09 00 00       	callq  20bae0 <_ZN9r3_kernel3cpu10exceptions15init_exceptions17hc565662866757f28E>

    // raise a breakpoint:
    cpu::create_breakpoint();
  20b122:	e8 79 ed ff ff       	callq  209ea0 <_ZN9r3_kernel3cpu17create_breakpoint17h91b05c84067a39edE>
    log::debug!("After breakpoint!");
  20b127:	48 c7 84 24 a8 00 00 	movq   $0x4,0xa8(%rsp)
  20b12e:	00 04 00 00 00 
  20b133:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  20b13a:	00 
  20b13b:	48 8d 35 f6 51 ff ff 	lea    -0xae0a(%rip),%rsi        # 200338 <str.0+0x38>
  20b142:	e8 f9 9a ff ff       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20b147:	88 44 24 0b          	mov    %al,0xb(%rsp)
  20b14b:	8a 44 24 0b          	mov    0xb(%rsp),%al
  20b14f:	a8 01                	test   $0x1,%al
  20b151:	75 0c                	jne    20b15f <_start+0x1ef>
  20b153:	eb 00                	jmp    20b155 <_start+0x1e5>
  20b155:	c6 84 24 b7 00 00 00 	movb   $0x0,0xb7(%rsp)
  20b15c:	00 
  20b15d:	eb 5a                	jmp    20b1b9 <_start+0x249>
  20b15f:	c6 84 24 ff 00 00 00 	movb   $0x0,0xff(%rsp)
  20b166:	00 
  20b167:	48 8b 3d 7a 89 00 00 	mov    0x897a(%rip),%rdi        # 213ae8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  20b16e:	0f b6 b4 24 ff 00 00 	movzbl 0xff(%rsp),%esi
  20b175:	00 
  20b176:	e8 55 f7 ff ff       	callq  20a8d0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  20b17b:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  20b182:	00 
  20b183:	48 8b 84 24 00 01 00 	mov    0x100(%rsp),%rax
  20b18a:	00 
  20b18b:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  20b192:	00 
  20b193:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  20b19a:	00 
  20b19b:	48 8d b4 24 b8 00 00 	lea    0xb8(%rsp),%rsi
  20b1a2:	00 
  20b1a3:	e8 98 9a ff ff       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20b1a8:	88 44 24 0a          	mov    %al,0xa(%rsp)
  20b1ac:	8a 44 24 0a          	mov    0xa(%rsp),%al
  20b1b0:	24 01                	and    $0x1,%al
  20b1b2:	88 84 24 b7 00 00 00 	mov    %al,0xb7(%rsp)
  20b1b9:	f6 84 24 b7 00 00 00 	testb  $0x1,0xb7(%rsp)
  20b1c0:	01 
  20b1c1:	75 02                	jne    20b1c5 <_start+0x255>

    loop {}
  20b1c3:	eb fe                	jmp    20b1c3 <_start+0x253>
    log::debug!("After breakpoint!");
  20b1c5:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  20b1cc:	00 
  20b1cd:	48 8d 35 0c 81 00 00 	lea    0x810c(%rip),%rsi        # 2132e0 <memset+0x1a00>
  20b1d4:	ba 01 00 00 00       	mov    $0x1,%edx
  20b1d9:	48 8d 0d a8 5b ff ff 	lea    -0xa458(%rip),%rcx        # 200d88 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x289>
  20b1e0:	31 c0                	xor    %eax,%eax
  20b1e2:	41 89 c0             	mov    %eax,%r8d
  20b1e5:	e8 26 95 ff ff       	callq  204710 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  20b1ea:	48 8b b4 24 a8 00 00 	mov    0xa8(%rsp),%rsi
  20b1f1:	00 
  20b1f2:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  20b1f9:	00 
  20b1fa:	48 8d 15 ef 80 00 00 	lea    0x80ef(%rip),%rdx        # 2132f0 <memset+0x1a10>
  20b201:	e8 2a 15 00 00       	callq  20c730 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  20b206:	eb bb                	jmp    20b1c3 <_start+0x253>
  20b208:	cc                   	int3   
  20b209:	cc                   	int3   
  20b20a:	cc                   	int3   
  20b20b:	cc                   	int3   
  20b20c:	cc                   	int3   
  20b20d:	cc                   	int3   
  20b20e:	cc                   	int3   
  20b20f:	cc                   	int3   

000000000020b210 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h33afae7df97e265bE>:
    pub const fn is_null(self) -> bool {
  20b210:	48 83 ec 18          	sub    $0x18,%rsp
  20b214:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20b219:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20b21e:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        (self as *mut u8).guaranteed_eq(null_mut())
  20b223:	31 c0                	xor    %eax,%eax
  20b225:	89 c6                	mov    %eax,%esi
  20b227:	e8 b4 24 00 00       	callq  20d6e0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17ha8a0c6207e83f0f9E>
  20b22c:	88 44 24 07          	mov    %al,0x7(%rsp)
  20b230:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  20b234:	24 01                	and    $0x1,%al
  20b236:	0f b6 c0             	movzbl %al,%eax
  20b239:	48 83 c4 18          	add    $0x18,%rsp
  20b23d:	c3                   	retq   
  20b23e:	cc                   	int3   
  20b23f:	cc                   	int3   

000000000020b240 <_ZN4core3ptr4read17h3174a0a85995dc74E>:
///
/// [valid]: self#safety
#[inline]
#[stable(feature = "rust1", since = "1.0.0")]
#[rustc_const_unstable(feature = "const_ptr_read", issue = "80377")]
pub const unsafe fn read<T>(src: *const T) -> T {
  20b240:	48 83 ec 40          	sub    $0x40,%rsp
  20b244:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20b249:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
    #[must_use]
    #[inline(always)]
    #[rustc_diagnostic_item = "maybe_uninit_uninit"]
    pub const fn uninit() -> MaybeUninit<T> {
        MaybeUninit { uninit: () }
    }
  20b24e:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
    extern "rust-intrinsic" {
        #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
        fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
    }

    let mut tmp = MaybeUninit::<T>::uninit();
  20b253:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20b258:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
  20b25d:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20b262:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    // the stack as a separate allocated object.
    //
    // Also, since we just wrote a valid value into `tmp`, it is guaranteed
    // to be properly initialized.
    unsafe {
        copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
  20b267:	48 8b 00             	mov    (%rax),%rax
  20b26a:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        tmp.assume_init()
  20b26f:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20b274:	48 89 04 24          	mov    %rax,(%rsp)
  20b278:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20b27d:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20b282:	48 8b 04 24          	mov    (%rsp),%rax
    }
}
  20b286:	48 83 c4 40          	add    $0x40,%rsp
  20b28a:	c3                   	retq   
  20b28b:	cc                   	int3   
  20b28c:	cc                   	int3   
  20b28d:	cc                   	int3   
  20b28e:	cc                   	int3   
  20b28f:	cc                   	int3   

000000000020b290 <_ZN4core3ptr5write17hb4ae5111637a2d49E>:
/// assert_eq!(bar, "foo");
/// ```
#[inline]
#[stable(feature = "rust1", since = "1.0.0")]
#[rustc_const_unstable(feature = "const_ptr_write", issue = "86302")]
pub const unsafe fn write<T>(dst: *mut T, src: T) {
  20b290:	48 83 ec 10          	sub    $0x10,%rsp
  20b294:	48 89 34 24          	mov    %rsi,(%rsp)
  20b298:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)

    // SAFETY: the caller must guarantee that `dst` is valid for writes.
    // `dst` cannot overlap `src` because the caller has mutable access
    // to `dst` while `src` is owned by this function.
    unsafe {
        copy_nonoverlapping(&src as *const T, dst, 1);
  20b29d:	48 8b 04 24          	mov    (%rsp),%rax
  20b2a1:	48 89 07             	mov    %rax,(%rdi)
        intrinsics::forget(src);
    }
}
  20b2a4:	48 83 c4 10          	add    $0x10,%rsp
  20b2a8:	c3                   	retq   
  20b2a9:	cc                   	int3   
  20b2aa:	cc                   	int3   
  20b2ab:	cc                   	int3   
  20b2ac:	cc                   	int3   
  20b2ad:	cc                   	int3   
  20b2ae:	cc                   	int3   
  20b2af:	cc                   	int3   

000000000020b2b0 <_ZN4core3str8converts23from_utf8_unchecked_mut17h954742d39eb3e2cbE>:
/// assert_eq!("💖", heart);
/// ```
#[inline]
#[must_use]
#[stable(feature = "str_mut_extras", since = "1.20.0")]
pub unsafe fn from_utf8_unchecked_mut(v: &mut [u8]) -> &mut str {
  20b2b0:	48 83 ec 10          	sub    $0x10,%rsp
  20b2b4:	48 89 f2             	mov    %rsi,%rdx
  20b2b7:	48 89 f8             	mov    %rdi,%rax
  20b2ba:	48 89 04 24          	mov    %rax,(%rsp)
  20b2be:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    // SAFETY: the caller must guarantee that the bytes `v`
    // are valid UTF-8, thus the cast to `*mut str` is safe.
    // Also, the pointer dereference is safe because that pointer
    // comes from a reference which is guaranteed to be valid for writes.
    unsafe { &mut *(v as *mut [u8] as *mut str) }
}
  20b2c3:	48 83 c4 10          	add    $0x10,%rsp
  20b2c7:	c3                   	retq   
  20b2c8:	cc                   	int3   
  20b2c9:	cc                   	int3   
  20b2ca:	cc                   	int3   
  20b2cb:	cc                   	int3   
  20b2cc:	cc                   	int3   
  20b2cd:	cc                   	int3   
  20b2ce:	cc                   	int3   
  20b2cf:	cc                   	int3   

000000000020b2d0 <_ZN9r3_kernel3cpu10exceptions14divide_by_zero17habe74aec76114f7cE>:
use lazy_static::lazy_static;
use spin::Mutex;

// implements basic exception handlers:

pub extern "x86-interrupt" fn divide_by_zero(stk: InterruptStackFrame) {
  20b2d0:	41 53                	push   %r11
  20b2d2:	41 52                	push   %r10
  20b2d4:	41 51                	push   %r9
  20b2d6:	41 50                	push   %r8
  20b2d8:	57                   	push   %rdi
  20b2d9:	56                   	push   %rsi
  20b2da:	52                   	push   %rdx
  20b2db:	51                   	push   %rcx
  20b2dc:	50                   	push   %rax
  20b2dd:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  20b2e4:	fc                   	cld    
  20b2e5:	48 8d 84 24 f8 00 00 	lea    0xf8(%rsp),%rax
  20b2ec:	00 
  20b2ed:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    log::error!("Divide by zero exception\nException info: {:#?}", stk);
  20b2f2:	48 c7 44 24 38 01 00 	movq   $0x1,0x38(%rsp)
  20b2f9:	00 00 
  20b2fb:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  20b300:	48 8d 35 31 50 ff ff 	lea    -0xafcf(%rip),%rsi        # 200338 <str.0+0x38>
  20b307:	e8 34 99 ff ff       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20b30c:	88 44 24 37          	mov    %al,0x37(%rsp)
  20b310:	8a 44 24 37          	mov    0x37(%rsp),%al
  20b314:	a8 01                	test   $0x1,%al
  20b316:	75 09                	jne    20b321 <_ZN9r3_kernel3cpu10exceptions14divide_by_zero17habe74aec76114f7cE+0x51>
  20b318:	eb 00                	jmp    20b31a <_ZN9r3_kernel3cpu10exceptions14divide_by_zero17habe74aec76114f7cE+0x4a>
  20b31a:	c6 44 24 47 00       	movb   $0x0,0x47(%rsp)
  20b31f:	eb 4e                	jmp    20b36f <_ZN9r3_kernel3cpu10exceptions14divide_by_zero17habe74aec76114f7cE+0x9f>
  20b321:	c6 84 24 a7 00 00 00 	movb   $0x0,0xa7(%rsp)
  20b328:	00 
  20b329:	48 8b 3d b8 87 00 00 	mov    0x87b8(%rip),%rdi        # 213ae8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  20b330:	0f b6 b4 24 a7 00 00 	movzbl 0xa7(%rsp),%esi
  20b337:	00 
  20b338:	e8 93 f5 ff ff       	callq  20a8d0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  20b33d:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  20b344:	00 
  20b345:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  20b34c:	00 
  20b34d:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20b352:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  20b357:	48 8d 74 24 48       	lea    0x48(%rsp),%rsi
  20b35c:	e8 df 98 ff ff       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20b361:	88 44 24 27          	mov    %al,0x27(%rsp)
  20b365:	8a 44 24 27          	mov    0x27(%rsp),%al
  20b369:	24 01                	and    $0x1,%al
  20b36b:	88 44 24 47          	mov    %al,0x47(%rsp)
  20b36f:	f6 44 24 47 01       	testb  $0x1,0x47(%rsp)
  20b374:	75 16                	jne    20b38c <_ZN9r3_kernel3cpu10exceptions14divide_by_zero17habe74aec76114f7cE+0xbc>
}
  20b376:	48 81 c4 b0 00 00 00 	add    $0xb0,%rsp
  20b37d:	58                   	pop    %rax
  20b37e:	59                   	pop    %rcx
  20b37f:	5a                   	pop    %rdx
  20b380:	5e                   	pop    %rsi
  20b381:	5f                   	pop    %rdi
  20b382:	41 58                	pop    %r8
  20b384:	41 59                	pop    %r9
  20b386:	41 5a                	pop    %r10
  20b388:	41 5b                	pop    %r11
  20b38a:	48 cf                	iretq  
  20b38c:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    log::error!("Divide by zero exception\nException info: {:#?}", stk);
  20b391:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  20b398:	00 
  20b399:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  20b3a0:	00 
  20b3a1:	48 89 bc 24 98 00 00 	mov    %rdi,0x98(%rsp)
  20b3a8:	00 
  20b3a9:	48 8d 35 c0 98 ff ff 	lea    -0x6740(%rip),%rsi        # 204c70 <_ZN84_$LT$r3_kernel..cpu..interrupts..InterruptStackFrame$u20$as$u20$core..fmt..Debug$GT$3fmt17h17704686073dfe8aE>
  20b3b0:	e8 cb f7 ff ff       	callq  20ab80 <_ZN4core3fmt10ArgumentV13new17h30866114a7317d15E>
  20b3b5:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20b3ba:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  20b3bf:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20b3c4:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20b3c9:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  20b3d0:	00 
  20b3d1:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  20b3d8:	00 
  20b3d9:	48 8d 84 24 80 00 00 	lea    0x80(%rsp),%rax
  20b3e0:	00 
  20b3e1:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20b3e6:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  20b3eb:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  20b3f0:	48 8d 35 31 7f 00 00 	lea    0x7f31(%rip),%rsi        # 213328 <memset+0x1a48>
  20b3f7:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  20b3fd:	4c 8d 0d ec 59 ff ff 	lea    -0xa614(%rip),%r9        # 200df0 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x2f1>
  20b404:	4c 89 c2             	mov    %r8,%rdx
  20b407:	48 c7 04 24 01 00 00 	movq   $0x1,(%rsp)
  20b40e:	00 
  20b40f:	e8 9c 92 ff ff       	callq  2046b0 <_ZN4core3fmt9Arguments16new_v1_formatted17hbeddea28af1cc014E>
  20b414:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  20b419:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  20b41e:	48 8d 15 13 7f 00 00 	lea    0x7f13(%rip),%rdx        # 213338 <memset+0x1a58>
  20b425:	e8 06 13 00 00       	callq  20c730 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  20b42a:	e9 47 ff ff ff       	jmpq   20b376 <_ZN9r3_kernel3cpu10exceptions14divide_by_zero17habe74aec76114f7cE+0xa6>
  20b42f:	cc                   	int3   

000000000020b430 <_ZN9r3_kernel3cpu10exceptions10breakpoint17h2847d3a782101dd5E>:

extern "x86-interrupt" fn breakpoint(stk: InterruptStackFrame) {
  20b430:	41 53                	push   %r11
  20b432:	41 52                	push   %r10
  20b434:	41 51                	push   %r9
  20b436:	41 50                	push   %r8
  20b438:	57                   	push   %rdi
  20b439:	56                   	push   %rsi
  20b43a:	52                   	push   %rdx
  20b43b:	51                   	push   %rcx
  20b43c:	50                   	push   %rax
  20b43d:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  20b444:	fc                   	cld    
  20b445:	48 8d 84 24 f8 00 00 	lea    0xf8(%rsp),%rax
  20b44c:	00 
  20b44d:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    log::error!("Breakpoint exception\nException info: {:#?}", stk);
  20b452:	48 c7 44 24 38 01 00 	movq   $0x1,0x38(%rsp)
  20b459:	00 00 
  20b45b:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  20b460:	48 8d 35 d1 4e ff ff 	lea    -0xb12f(%rip),%rsi        # 200338 <str.0+0x38>
  20b467:	e8 d4 97 ff ff       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20b46c:	88 44 24 37          	mov    %al,0x37(%rsp)
  20b470:	8a 44 24 37          	mov    0x37(%rsp),%al
  20b474:	a8 01                	test   $0x1,%al
  20b476:	75 09                	jne    20b481 <_ZN9r3_kernel3cpu10exceptions10breakpoint17h2847d3a782101dd5E+0x51>
  20b478:	eb 00                	jmp    20b47a <_ZN9r3_kernel3cpu10exceptions10breakpoint17h2847d3a782101dd5E+0x4a>
  20b47a:	c6 44 24 47 00       	movb   $0x0,0x47(%rsp)
  20b47f:	eb 4e                	jmp    20b4cf <_ZN9r3_kernel3cpu10exceptions10breakpoint17h2847d3a782101dd5E+0x9f>
  20b481:	c6 84 24 a7 00 00 00 	movb   $0x0,0xa7(%rsp)
  20b488:	00 
  20b489:	48 8b 3d 58 86 00 00 	mov    0x8658(%rip),%rdi        # 213ae8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  20b490:	0f b6 b4 24 a7 00 00 	movzbl 0xa7(%rsp),%esi
  20b497:	00 
  20b498:	e8 33 f4 ff ff       	callq  20a8d0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  20b49d:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  20b4a4:	00 
  20b4a5:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  20b4ac:	00 
  20b4ad:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20b4b2:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  20b4b7:	48 8d 74 24 48       	lea    0x48(%rsp),%rsi
  20b4bc:	e8 7f 97 ff ff       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20b4c1:	88 44 24 27          	mov    %al,0x27(%rsp)
  20b4c5:	8a 44 24 27          	mov    0x27(%rsp),%al
  20b4c9:	24 01                	and    $0x1,%al
  20b4cb:	88 44 24 47          	mov    %al,0x47(%rsp)
  20b4cf:	f6 44 24 47 01       	testb  $0x1,0x47(%rsp)
  20b4d4:	75 16                	jne    20b4ec <_ZN9r3_kernel3cpu10exceptions10breakpoint17h2847d3a782101dd5E+0xbc>
}
  20b4d6:	48 81 c4 b0 00 00 00 	add    $0xb0,%rsp
  20b4dd:	58                   	pop    %rax
  20b4de:	59                   	pop    %rcx
  20b4df:	5a                   	pop    %rdx
  20b4e0:	5e                   	pop    %rsi
  20b4e1:	5f                   	pop    %rdi
  20b4e2:	41 58                	pop    %r8
  20b4e4:	41 59                	pop    %r9
  20b4e6:	41 5a                	pop    %r10
  20b4e8:	41 5b                	pop    %r11
  20b4ea:	48 cf                	iretq  
  20b4ec:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    log::error!("Breakpoint exception\nException info: {:#?}", stk);
  20b4f1:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  20b4f8:	00 
  20b4f9:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  20b500:	00 
  20b501:	48 89 bc 24 98 00 00 	mov    %rdi,0x98(%rsp)
  20b508:	00 
  20b509:	48 8d 35 60 97 ff ff 	lea    -0x68a0(%rip),%rsi        # 204c70 <_ZN84_$LT$r3_kernel..cpu..interrupts..InterruptStackFrame$u20$as$u20$core..fmt..Debug$GT$3fmt17h17704686073dfe8aE>
  20b510:	e8 6b f6 ff ff       	callq  20ab80 <_ZN4core3fmt10ArgumentV13new17h30866114a7317d15E>
  20b515:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20b51a:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  20b51f:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20b524:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20b529:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  20b530:	00 
  20b531:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  20b538:	00 
  20b539:	48 8d 84 24 80 00 00 	lea    0x80(%rsp),%rax
  20b540:	00 
  20b541:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20b546:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  20b54b:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  20b550:	48 8d 35 19 7e 00 00 	lea    0x7e19(%rip),%rsi        # 213370 <memset+0x1a90>
  20b557:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  20b55d:	4c 8d 0d 8c 58 ff ff 	lea    -0xa774(%rip),%r9        # 200df0 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x2f1>
  20b564:	4c 89 c2             	mov    %r8,%rdx
  20b567:	48 c7 04 24 01 00 00 	movq   $0x1,(%rsp)
  20b56e:	00 
  20b56f:	e8 3c 91 ff ff       	callq  2046b0 <_ZN4core3fmt9Arguments16new_v1_formatted17hbeddea28af1cc014E>
  20b574:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  20b579:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  20b57e:	48 8d 15 fb 7d 00 00 	lea    0x7dfb(%rip),%rdx        # 213380 <memset+0x1aa0>
  20b585:	e8 a6 11 00 00       	callq  20c730 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  20b58a:	e9 47 ff ff ff       	jmpq   20b4d6 <_ZN9r3_kernel3cpu10exceptions10breakpoint17h2847d3a782101dd5E+0xa6>
  20b58f:	cc                   	int3   

000000000020b590 <_ZN9r3_kernel3cpu10exceptions14invalid_opcode17h21f08de57ee3447bE>:

extern "x86-interrupt" fn invalid_opcode(stk: InterruptStackFrame) {
  20b590:	41 53                	push   %r11
  20b592:	41 52                	push   %r10
  20b594:	41 51                	push   %r9
  20b596:	41 50                	push   %r8
  20b598:	57                   	push   %rdi
  20b599:	56                   	push   %rsi
  20b59a:	52                   	push   %rdx
  20b59b:	51                   	push   %rcx
  20b59c:	50                   	push   %rax
  20b59d:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  20b5a4:	fc                   	cld    
  20b5a5:	48 8d 84 24 f8 00 00 	lea    0xf8(%rsp),%rax
  20b5ac:	00 
  20b5ad:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    log::error!("Invalid opcode exception\nException info: {:#?}", stk);
  20b5b2:	48 c7 44 24 38 01 00 	movq   $0x1,0x38(%rsp)
  20b5b9:	00 00 
  20b5bb:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  20b5c0:	48 8d 35 71 4d ff ff 	lea    -0xb28f(%rip),%rsi        # 200338 <str.0+0x38>
  20b5c7:	e8 74 96 ff ff       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20b5cc:	88 44 24 37          	mov    %al,0x37(%rsp)
  20b5d0:	8a 44 24 37          	mov    0x37(%rsp),%al
  20b5d4:	a8 01                	test   $0x1,%al
  20b5d6:	75 09                	jne    20b5e1 <_ZN9r3_kernel3cpu10exceptions14invalid_opcode17h21f08de57ee3447bE+0x51>
  20b5d8:	eb 00                	jmp    20b5da <_ZN9r3_kernel3cpu10exceptions14invalid_opcode17h21f08de57ee3447bE+0x4a>
  20b5da:	c6 44 24 47 00       	movb   $0x0,0x47(%rsp)
  20b5df:	eb 4e                	jmp    20b62f <_ZN9r3_kernel3cpu10exceptions14invalid_opcode17h21f08de57ee3447bE+0x9f>
  20b5e1:	c6 84 24 a7 00 00 00 	movb   $0x0,0xa7(%rsp)
  20b5e8:	00 
  20b5e9:	48 8b 3d f8 84 00 00 	mov    0x84f8(%rip),%rdi        # 213ae8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  20b5f0:	0f b6 b4 24 a7 00 00 	movzbl 0xa7(%rsp),%esi
  20b5f7:	00 
  20b5f8:	e8 d3 f2 ff ff       	callq  20a8d0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  20b5fd:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  20b604:	00 
  20b605:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  20b60c:	00 
  20b60d:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20b612:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  20b617:	48 8d 74 24 48       	lea    0x48(%rsp),%rsi
  20b61c:	e8 1f 96 ff ff       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20b621:	88 44 24 27          	mov    %al,0x27(%rsp)
  20b625:	8a 44 24 27          	mov    0x27(%rsp),%al
  20b629:	24 01                	and    $0x1,%al
  20b62b:	88 44 24 47          	mov    %al,0x47(%rsp)
  20b62f:	f6 44 24 47 01       	testb  $0x1,0x47(%rsp)
  20b634:	75 16                	jne    20b64c <_ZN9r3_kernel3cpu10exceptions14invalid_opcode17h21f08de57ee3447bE+0xbc>
}
  20b636:	48 81 c4 b0 00 00 00 	add    $0xb0,%rsp
  20b63d:	58                   	pop    %rax
  20b63e:	59                   	pop    %rcx
  20b63f:	5a                   	pop    %rdx
  20b640:	5e                   	pop    %rsi
  20b641:	5f                   	pop    %rdi
  20b642:	41 58                	pop    %r8
  20b644:	41 59                	pop    %r9
  20b646:	41 5a                	pop    %r10
  20b648:	41 5b                	pop    %r11
  20b64a:	48 cf                	iretq  
  20b64c:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    log::error!("Invalid opcode exception\nException info: {:#?}", stk);
  20b651:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  20b658:	00 
  20b659:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  20b660:	00 
  20b661:	48 89 bc 24 98 00 00 	mov    %rdi,0x98(%rsp)
  20b668:	00 
  20b669:	48 8d 35 00 96 ff ff 	lea    -0x6a00(%rip),%rsi        # 204c70 <_ZN84_$LT$r3_kernel..cpu..interrupts..InterruptStackFrame$u20$as$u20$core..fmt..Debug$GT$3fmt17h17704686073dfe8aE>
  20b670:	e8 0b f5 ff ff       	callq  20ab80 <_ZN4core3fmt10ArgumentV13new17h30866114a7317d15E>
  20b675:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20b67a:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  20b67f:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20b684:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20b689:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
  20b690:	00 
  20b691:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  20b698:	00 
  20b699:	48 8d 84 24 80 00 00 	lea    0x80(%rsp),%rax
  20b6a0:	00 
  20b6a1:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20b6a6:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  20b6ab:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  20b6b0:	48 8d 35 01 7d 00 00 	lea    0x7d01(%rip),%rsi        # 2133b8 <memset+0x1ad8>
  20b6b7:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  20b6bd:	4c 8d 0d 2c 57 ff ff 	lea    -0xa8d4(%rip),%r9        # 200df0 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x2f1>
  20b6c4:	4c 89 c2             	mov    %r8,%rdx
  20b6c7:	48 c7 04 24 01 00 00 	movq   $0x1,(%rsp)
  20b6ce:	00 
  20b6cf:	e8 dc 8f ff ff       	callq  2046b0 <_ZN4core3fmt9Arguments16new_v1_formatted17hbeddea28af1cc014E>
  20b6d4:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  20b6d9:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  20b6de:	48 8d 15 e3 7c 00 00 	lea    0x7ce3(%rip),%rdx        # 2133c8 <memset+0x1ae8>
  20b6e5:	e8 46 10 00 00       	callq  20c730 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  20b6ea:	e9 47 ff ff ff       	jmpq   20b636 <_ZN9r3_kernel3cpu10exceptions14invalid_opcode17h21f08de57ee3447bE+0xa6>
  20b6ef:	cc                   	int3   

000000000020b6f0 <_ZN9r3_kernel3cpu10exceptions12double_fault17h186d7c09906de389E>:

extern "x86-interrupt" fn double_fault(stk: InterruptStackFrame, err: u64) -> ! {
  20b6f0:	50                   	push   %rax
  20b6f1:	41 53                	push   %r11
  20b6f3:	41 52                	push   %r10
  20b6f5:	41 51                	push   %r9
  20b6f7:	41 50                	push   %r8
  20b6f9:	57                   	push   %rdi
  20b6fa:	56                   	push   %rsi
  20b6fb:	52                   	push   %rdx
  20b6fc:	51                   	push   %rcx
  20b6fd:	50                   	push   %rax
  20b6fe:	48 81 ec f8 00 00 00 	sub    $0xf8,%rsp
  20b705:	fc                   	cld    
  20b706:	48 8b 84 24 48 01 00 	mov    0x148(%rsp),%rax
  20b70d:	00 
  20b70e:	48 8d 84 24 50 01 00 	lea    0x150(%rsp),%rax
  20b715:	00 
  20b716:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
    log::error!("Double fault exception {}\nException info: {:#?}", err, stk);
  20b71b:	48 c7 44 24 60 01 00 	movq   $0x1,0x60(%rsp)
  20b722:	00 00 
  20b724:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  20b729:	48 8d 35 08 4c ff ff 	lea    -0xb3f8(%rip),%rsi        # 200338 <str.0+0x38>
  20b730:	e8 0b 95 ff ff       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20b735:	88 44 24 5f          	mov    %al,0x5f(%rsp)
  20b739:	8a 44 24 5f          	mov    0x5f(%rsp),%al
  20b73d:	a8 01                	test   $0x1,%al
  20b73f:	75 09                	jne    20b74a <_ZN9r3_kernel3cpu10exceptions12double_fault17h186d7c09906de389E+0x5a>
  20b741:	eb 00                	jmp    20b743 <_ZN9r3_kernel3cpu10exceptions12double_fault17h186d7c09906de389E+0x53>
  20b743:	c6 44 24 6f 00       	movb   $0x0,0x6f(%rsp)
  20b748:	eb 4e                	jmp    20b798 <_ZN9r3_kernel3cpu10exceptions12double_fault17h186d7c09906de389E+0xa8>
  20b74a:	c6 84 24 ef 00 00 00 	movb   $0x0,0xef(%rsp)
  20b751:	00 
  20b752:	48 8b 3d 8f 83 00 00 	mov    0x838f(%rip),%rdi        # 213ae8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  20b759:	0f b6 b4 24 ef 00 00 	movzbl 0xef(%rsp),%esi
  20b760:	00 
  20b761:	e8 6a f1 ff ff       	callq  20a8d0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  20b766:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  20b76d:	00 
  20b76e:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  20b775:	00 
  20b776:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  20b77b:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  20b780:	48 8d 74 24 70       	lea    0x70(%rsp),%rsi
  20b785:	e8 b6 94 ff ff       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20b78a:	88 44 24 4f          	mov    %al,0x4f(%rsp)
  20b78e:	8a 44 24 4f          	mov    0x4f(%rsp),%al
  20b792:	24 01                	and    $0x1,%al
  20b794:	88 44 24 6f          	mov    %al,0x6f(%rsp)
  20b798:	f6 44 24 6f 01       	testb  $0x1,0x6f(%rsp)
  20b79d:	75 07                	jne    20b7a6 <_ZN9r3_kernel3cpu10exceptions12double_fault17h186d7c09906de389E+0xb6>
    cpu::halt_no_interrupts();
  20b79f:	e8 0c e7 ff ff       	callq  209eb0 <_ZN9r3_kernel3cpu18halt_no_interrupts17h93efa4ad8261b0f6E>
  20b7a4:	0f 0b                	ud2    
  20b7a6:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
    log::error!("Double fault exception {}\nException info: {:#?}", err, stk);
  20b7ab:	48 8d 8c 24 48 01 00 	lea    0x148(%rsp),%rcx
  20b7b2:	00 
  20b7b3:	48 89 8c 24 c8 00 00 	mov    %rcx,0xc8(%rsp)
  20b7ba:	00 
  20b7bb:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  20b7c2:	00 
  20b7c3:	48 8b bc 24 c8 00 00 	mov    0xc8(%rsp),%rdi
  20b7ca:	00 
  20b7cb:	48 89 bc 24 d8 00 00 	mov    %rdi,0xd8(%rsp)
  20b7d2:	00 
  20b7d3:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  20b7da:	00 
  20b7db:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20b7e0:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  20b7e7:	00 
  20b7e8:	48 8b 35 51 83 00 00 	mov    0x8351(%rip),%rsi        # 213b40 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xb8>
  20b7ef:	e8 8c f6 ff ff       	callq  20ae80 <_ZN4core3fmt10ArgumentV13new17hed39039da1d20c39E>
  20b7f4:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20b7f9:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  20b7fe:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  20b803:	48 8d 35 66 94 ff ff 	lea    -0x6b9a(%rip),%rsi        # 204c70 <_ZN84_$LT$r3_kernel..cpu..interrupts..InterruptStackFrame$u20$as$u20$core..fmt..Debug$GT$3fmt17h17704686073dfe8aE>
  20b80a:	e8 71 f3 ff ff       	callq  20ab80 <_ZN4core3fmt10ArgumentV13new17h30866114a7317d15E>
  20b80f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20b814:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  20b819:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  20b81e:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  20b823:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  20b828:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  20b82d:	48 89 b4 24 a8 00 00 	mov    %rsi,0xa8(%rsp)
  20b834:	00 
  20b835:	48 89 94 24 b0 00 00 	mov    %rdx,0xb0(%rsp)
  20b83c:	00 
  20b83d:	48 89 8c 24 b8 00 00 	mov    %rcx,0xb8(%rsp)
  20b844:	00 
  20b845:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  20b84c:	00 
  20b84d:	48 8d 84 24 a8 00 00 	lea    0xa8(%rsp),%rax
  20b854:	00 
  20b855:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20b85a:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  20b85f:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  20b864:	48 8d 35 95 7b 00 00 	lea    0x7b95(%rip),%rsi        # 213400 <memset+0x1b20>
  20b86b:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  20b871:	4c 8d 0d 58 56 ff ff 	lea    -0xa9a8(%rip),%r9        # 200ed0 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x3d1>
  20b878:	4c 89 c2             	mov    %r8,%rdx
  20b87b:	48 c7 04 24 02 00 00 	movq   $0x2,(%rsp)
  20b882:	00 
  20b883:	e8 28 8e ff ff       	callq  2046b0 <_ZN4core3fmt9Arguments16new_v1_formatted17hbeddea28af1cc014E>
  20b888:	48 8b 74 24 60       	mov    0x60(%rsp),%rsi
  20b88d:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  20b892:	48 8d 15 87 7b 00 00 	lea    0x7b87(%rip),%rdx        # 213420 <memset+0x1b40>
  20b899:	e8 92 0e 00 00       	callq  20c730 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  20b89e:	e9 fc fe ff ff       	jmpq   20b79f <_ZN9r3_kernel3cpu10exceptions12double_fault17h186d7c09906de389E+0xaf>
  20b8a3:	cc                   	int3   
  20b8a4:	cc                   	int3   
  20b8a5:	cc                   	int3   
  20b8a6:	cc                   	int3   
  20b8a7:	cc                   	int3   
  20b8a8:	cc                   	int3   
  20b8a9:	cc                   	int3   
  20b8aa:	cc                   	int3   
  20b8ab:	cc                   	int3   
  20b8ac:	cc                   	int3   
  20b8ad:	cc                   	int3   
  20b8ae:	cc                   	int3   
  20b8af:	cc                   	int3   

000000000020b8b0 <_ZN9r3_kernel3cpu10exceptions11prepare_idt17h7e687c1ba2cae053E>:
}

pub fn prepare_idt() -> InterruptDescriptorTable {
  20b8b0:	48 81 ec f8 00 00 00 	sub    $0xf8,%rsp
  20b8b7:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20b8bc:	48 89 f8             	mov    %rdi,%rax
  20b8bf:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    let mut idt = InterruptDescriptorTable::empty();
  20b8c4:	e8 d7 94 ff ff       	callq  204da0 <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable5empty17he645bac9df5f28f0E>
    idt.divide_error = prepare_default_handle(divide_by_zero);
  20b8c9:	48 8d 3d 00 fa ff ff 	lea    -0x600(%rip),%rdi        # 20b2d0 <_ZN9r3_kernel3cpu10exceptions14divide_by_zero17habe74aec76114f7cE>
  20b8d0:	e8 0b 9e ff ff       	callq  2056e0 <_ZN9r3_kernel3cpu10interrupts22prepare_default_handle17hd8eb7bb14fe770d5E>
  20b8d5:	48 89 94 24 b0 00 00 	mov    %rdx,0xb0(%rsp)
  20b8dc:	00 
  20b8dd:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  20b8e4:	00 
  20b8e5:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  20b8ec:	00 
  20b8ed:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20b8f2:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  20b8f9:	00 
  20b8fa:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20b8ff:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20b904:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  20b909:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  20b90e:	48 89 50 08          	mov    %rdx,0x8(%rax)
  20b912:	48 89 08             	mov    %rcx,(%rax)
    idt.invalid_opcode = prepare_default_handle(invalid_opcode);
  20b915:	48 8d 3d 74 fc ff ff 	lea    -0x38c(%rip),%rdi        # 20b590 <_ZN9r3_kernel3cpu10exceptions14invalid_opcode17h21f08de57ee3447bE>
  20b91c:	e8 bf 9d ff ff       	callq  2056e0 <_ZN9r3_kernel3cpu10interrupts22prepare_default_handle17hd8eb7bb14fe770d5E>
  20b921:	48 89 94 24 c0 00 00 	mov    %rdx,0xc0(%rsp)
  20b928:	00 
  20b929:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  20b930:	00 
  20b931:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  20b938:	00 
  20b939:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20b93e:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  20b945:	00 
  20b946:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20b94b:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20b950:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  20b955:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  20b95a:	48 89 50 68          	mov    %rdx,0x68(%rax)
  20b95e:	48 89 48 60          	mov    %rcx,0x60(%rax)
    idt.breakpoint = prepare_default_handle(breakpoint);
  20b962:	48 8d 3d c7 fa ff ff 	lea    -0x539(%rip),%rdi        # 20b430 <_ZN9r3_kernel3cpu10exceptions10breakpoint17h2847d3a782101dd5E>
  20b969:	e8 72 9d ff ff       	callq  2056e0 <_ZN9r3_kernel3cpu10interrupts22prepare_default_handle17hd8eb7bb14fe770d5E>
  20b96e:	48 89 94 24 d0 00 00 	mov    %rdx,0xd0(%rsp)
  20b975:	00 
  20b976:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  20b97d:	00 
  20b97e:	48 8b 84 24 c8 00 00 	mov    0xc8(%rsp),%rax
  20b985:	00 
  20b986:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20b98b:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  20b992:	00 
  20b993:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20b998:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20b99d:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  20b9a2:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
  20b9a7:	48 89 50 38          	mov    %rdx,0x38(%rax)
  20b9ab:	48 89 48 30          	mov    %rcx,0x30(%rax)
    idt.double_fault = prepare_no_ret_error_code_handle(double_fault);
  20b9af:	48 8d 3d 3a fd ff ff 	lea    -0x2c6(%rip),%rdi        # 20b6f0 <_ZN9r3_kernel3cpu10exceptions12double_fault17h186d7c09906de389E>
  20b9b6:	e8 85 9d ff ff       	callq  205740 <_ZN9r3_kernel3cpu10interrupts32prepare_no_ret_error_code_handle17h3b008e4f60cf1d75E>
  20b9bb:	48 89 94 24 e0 00 00 	mov    %rdx,0xe0(%rsp)
  20b9c2:	00 
  20b9c3:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
  20b9ca:	00 
  20b9cb:	48 8b 84 24 d8 00 00 	mov    0xd8(%rsp),%rax
  20b9d2:	00 
  20b9d3:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  20b9d8:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  20b9df:	00 
  20b9e0:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  20b9e5:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  20b9ea:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  20b9ef:	48 89 87 80 00 00 00 	mov    %rax,0x80(%rdi)
  20b9f6:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  20b9fb:	48 89 87 88 00 00 00 	mov    %rax,0x88(%rdi)
    idt.double_fault.set_stack_index(0);
  20ba02:	48 81 c7 80 00 00 00 	add    $0x80,%rdi
  20ba09:	31 f6                	xor    %esi,%esi
  20ba0b:	e8 c0 b6 ff ff       	callq  2070d0 <_ZN9r3_kernel3cpu10interrupts33InterruptDescriptorEntry$LT$T$GT$15set_stack_index17h8c751100918cb978E>

    log::info!("Prepared basic exceptions.");
  20ba10:	48 c7 44 24 60 03 00 	movq   $0x3,0x60(%rsp)
  20ba17:	00 00 
  20ba19:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  20ba1e:	48 8d 35 13 49 ff ff 	lea    -0xb6ed(%rip),%rsi        # 200338 <str.0+0x38>
  20ba25:	e8 16 92 ff ff       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20ba2a:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20ba2e:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20ba32:	a8 01                	test   $0x1,%al
  20ba34:	75 09                	jne    20ba3f <_ZN9r3_kernel3cpu10exceptions11prepare_idt17h7e687c1ba2cae053E+0x18f>
  20ba36:	eb 00                	jmp    20ba38 <_ZN9r3_kernel3cpu10exceptions11prepare_idt17h7e687c1ba2cae053E+0x188>
  20ba38:	c6 44 24 6f 00       	movb   $0x0,0x6f(%rsp)
  20ba3d:	eb 4e                	jmp    20ba8d <_ZN9r3_kernel3cpu10exceptions11prepare_idt17h7e687c1ba2cae053E+0x1dd>
  20ba3f:	c6 84 24 ef 00 00 00 	movb   $0x0,0xef(%rsp)
  20ba46:	00 
  20ba47:	48 8b 3d 9a 80 00 00 	mov    0x809a(%rip),%rdi        # 213ae8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  20ba4e:	0f b6 b4 24 ef 00 00 	movzbl 0xef(%rsp),%esi
  20ba55:	00 
  20ba56:	e8 75 ee ff ff       	callq  20a8d0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  20ba5b:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  20ba62:	00 
  20ba63:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  20ba6a:	00 
  20ba6b:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  20ba70:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  20ba75:	48 8d 74 24 70       	lea    0x70(%rsp),%rsi
  20ba7a:	e8 c1 91 ff ff       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20ba7f:	88 44 24 0e          	mov    %al,0xe(%rsp)
  20ba83:	8a 44 24 0e          	mov    0xe(%rsp),%al
  20ba87:	24 01                	and    $0x1,%al
  20ba89:	88 44 24 6f          	mov    %al,0x6f(%rsp)
  20ba8d:	f6 44 24 6f 01       	testb  $0x1,0x6f(%rsp)
  20ba92:	75 0d                	jne    20baa1 <_ZN9r3_kernel3cpu10exceptions11prepare_idt17h7e687c1ba2cae053E+0x1f1>
  20ba94:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    return idt;
}
  20ba99:	48 81 c4 f8 00 00 00 	add    $0xf8,%rsp
  20baa0:	c3                   	retq   
    log::info!("Prepared basic exceptions.");
  20baa1:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  20baa6:	48 8d 35 ab 79 00 00 	lea    0x79ab(%rip),%rsi        # 213458 <memset+0x1b78>
  20baad:	ba 01 00 00 00       	mov    $0x1,%edx
  20bab2:	48 8d 0d a7 54 ff ff 	lea    -0xab59(%rip),%rcx        # 200f60 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x461>
  20bab9:	31 c0                	xor    %eax,%eax
  20babb:	41 89 c0             	mov    %eax,%r8d
  20babe:	e8 4d 8c ff ff       	callq  204710 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  20bac3:	48 8b 74 24 60       	mov    0x60(%rsp),%rsi
  20bac8:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  20bacd:	48 8d 15 94 79 00 00 	lea    0x7994(%rip),%rdx        # 213468 <memset+0x1b88>
  20bad4:	e8 57 0c 00 00       	callq  20c730 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  20bad9:	eb b9                	jmp    20ba94 <_ZN9r3_kernel3cpu10exceptions11prepare_idt17h7e687c1ba2cae053E+0x1e4>
  20badb:	cc                   	int3   
  20badc:	cc                   	int3   
  20badd:	cc                   	int3   
  20bade:	cc                   	int3   
  20badf:	cc                   	int3   

000000000020bae0 <_ZN9r3_kernel3cpu10exceptions15init_exceptions17hc565662866757f28E>:

lazy_static! {
    pub static ref IDT: Mutex<InterruptDescriptorTable> = Mutex::new(prepare_idt());
}

pub fn init_exceptions() {
  20bae0:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
    // load processor IDT
    IDT.lock().load_into_cpu();
  20bae7:	48 8d 3d 99 54 ff ff 	lea    -0xab67(%rip),%rdi        # 200f87 <_ZN9r3_kernel3cpu10exceptions3IDT17he44583177f5a1f5fE>
  20baee:	e8 fd 00 00 00       	callq  20bbf0 <_ZN75_$LT$r3_kernel..cpu..exceptions..IDT$u20$as$u20$core..ops..deref..Deref$GT$5deref17h0f9b31e2dab7f12aE>
  20baf3:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20baf8:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  20bafd:	e8 ae af ff ff       	callq  206ab0 <_ZN4spin5mutex14Mutex$LT$T$GT$4lock17h2d82f46c320cde4bE>
  20bb02:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  20bb07:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20bb0c:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  20bb11:	e8 8a b0 ff ff       	callq  206ba0 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h6438e4ee6feea27dE>
  20bb16:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20bb1b:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  20bb20:	e8 7b 9b ff ff       	callq  2056a0 <_ZN9r3_kernel3cpu10interrupts24InterruptDescriptorTable13load_into_cpu17hfad6d3a77281dca1E>
  20bb25:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  20bb2a:	e8 01 02 00 00       	callq  20bd30 <_ZN4core3ptr104drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..cpu..interrupts..InterruptDescriptorTable$GT$$GT$17h4dc346f8cb271829E>
    log::info!("Initialized Interrupt descriptor table.");
  20bb2f:	48 c7 44 24 30 03 00 	movq   $0x3,0x30(%rsp)
  20bb36:	00 00 
  20bb38:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  20bb3d:	48 8d 35 f4 47 ff ff 	lea    -0xb80c(%rip),%rsi        # 200338 <str.0+0x38>
  20bb44:	e8 f7 90 ff ff       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20bb49:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20bb4d:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20bb51:	a8 01                	test   $0x1,%al
  20bb53:	75 09                	jne    20bb5e <_ZN9r3_kernel3cpu10exceptions15init_exceptions17hc565662866757f28E+0x7e>
  20bb55:	eb 00                	jmp    20bb57 <_ZN9r3_kernel3cpu10exceptions15init_exceptions17hc565662866757f28E+0x77>
  20bb57:	c6 44 24 3f 00       	movb   $0x0,0x3f(%rsp)
  20bb5c:	eb 48                	jmp    20bba6 <_ZN9r3_kernel3cpu10exceptions15init_exceptions17hc565662866757f28E+0xc6>
  20bb5e:	c6 44 24 7f 00       	movb   $0x0,0x7f(%rsp)
  20bb63:	48 8b 3d 7e 7f 00 00 	mov    0x7f7e(%rip),%rdi        # 213ae8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x60>
  20bb6a:	0f b6 74 24 7f       	movzbl 0x7f(%rsp),%esi
  20bb6f:	e8 5c ed ff ff       	callq  20a8d0 <_ZN4core4sync6atomic11AtomicUsize4load17habd50e9a578bb37bE>
  20bb74:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  20bb7b:	00 
  20bb7c:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  20bb83:	00 
  20bb84:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20bb89:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  20bb8e:	48 8d 74 24 40       	lea    0x40(%rsp),%rsi
  20bb93:	e8 a8 90 ff ff       	callq  204c40 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h378b9a848e58149aE>
  20bb98:	88 44 24 0e          	mov    %al,0xe(%rsp)
  20bb9c:	8a 44 24 0e          	mov    0xe(%rsp),%al
  20bba0:	24 01                	and    $0x1,%al
  20bba2:	88 44 24 3f          	mov    %al,0x3f(%rsp)
  20bba6:	f6 44 24 3f 01       	testb  $0x1,0x3f(%rsp)
  20bbab:	75 08                	jne    20bbb5 <_ZN9r3_kernel3cpu10exceptions15init_exceptions17hc565662866757f28E+0xd5>
}
  20bbad:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  20bbb4:	c3                   	retq   
    log::info!("Initialized Interrupt descriptor table.");
  20bbb5:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  20bbba:	48 8d 35 df 78 00 00 	lea    0x78df(%rip),%rsi        # 2134a0 <memset+0x1bc0>
  20bbc1:	ba 01 00 00 00       	mov    $0x1,%edx
  20bbc6:	48 8d 0d 93 53 ff ff 	lea    -0xac6d(%rip),%rcx        # 200f60 <_ZN9r3_kernel7drivers4uart11UART_DRIVER17h13316a806c359273E+0x461>
  20bbcd:	31 c0                	xor    %eax,%eax
  20bbcf:	41 89 c0             	mov    %eax,%r8d
  20bbd2:	e8 39 8b ff ff       	callq  204710 <_ZN4core3fmt9Arguments6new_v117h9654568d76c8366eE>
  20bbd7:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  20bbdc:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  20bbe1:	48 8d 15 c8 78 00 00 	lea    0x78c8(%rip),%rdx        # 2134b0 <memset+0x1bd0>
  20bbe8:	e8 43 0b 00 00       	callq  20c730 <_ZN3log17__private_api_log17ha4b636ffcba62793E>
  20bbed:	eb be                	jmp    20bbad <_ZN9r3_kernel3cpu10exceptions15init_exceptions17hc565662866757f28E+0xcd>
  20bbef:	cc                   	int3   

000000000020bbf0 <_ZN75_$LT$r3_kernel..cpu..exceptions..IDT$u20$as$u20$core..ops..deref..Deref$GT$5deref17h0f9b31e2dab7f12aE>:
            fn deref(&self) -> &$T {
  20bbf0:	48 83 ec 18          	sub    $0x18,%rsp
  20bbf4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20bbf9:	48 8d 05 b0 e0 00 00 	lea    0xe0b0(%rip),%rax        # 219cb0 <_ZN75_$LT$r3_kernel..cpu..exceptions..IDT$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17heb6b46609789e227E>
  20bc00:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20bc05:	48 8d 3d a4 e0 00 00 	lea    0xe0a4(%rip),%rdi        # 219cb0 <_ZN75_$LT$r3_kernel..cpu..exceptions..IDT$u20$as$u20$core..ops..deref..Deref$GT$5deref11__stability4LAZY17heb6b46609789e227E>
  20bc0c:	e8 8f bd ff ff       	callq  2079a0 <_ZN4spin4once13Once$LT$T$GT$9call_once17hfb2697eeb39dd359E>
  20bc11:	48 89 04 24          	mov    %rax,(%rsp)
  20bc15:	48 8b 04 24          	mov    (%rsp),%rax
            }
  20bc19:	48 83 c4 18          	add    $0x18,%rsp
  20bc1d:	c3                   	retq   
  20bc1e:	cc                   	int3   
  20bc1f:	cc                   	int3   

000000000020bc20 <_ZN4core4hint21unreachable_unchecked17he3b397bdcee5fea3E>:
#[stable(feature = "unreachable", since = "1.27.0")]
#[rustc_const_stable(feature = "const_unreachable_unchecked", since = "1.57.0")]
pub const unsafe fn unreachable_unchecked() -> ! {
    // SAFETY: the safety contract for `intrinsics::unreachable` must
    // be upheld by the caller.
    unsafe { intrinsics::unreachable() }
  20bc20:	0f 0b                	ud2    
  20bc22:	cc                   	int3   
  20bc23:	cc                   	int3   
  20bc24:	cc                   	int3   
  20bc25:	cc                   	int3   
  20bc26:	cc                   	int3   
  20bc27:	cc                   	int3   
  20bc28:	cc                   	int3   
  20bc29:	cc                   	int3   
  20bc2a:	cc                   	int3   
  20bc2b:	cc                   	int3   
  20bc2c:	cc                   	int3   
  20bc2d:	cc                   	int3   
  20bc2e:	cc                   	int3   
  20bc2f:	cc                   	int3   

000000000020bc30 <_ZN4core4hint9spin_loop17h42efeaf1154a507bE>:
            // SAFETY: the `cfg` attr ensures that we only execute this on arm targets
            // with support for the v6 feature.
            unsafe { crate::arch::arm::__yield() };
        }
    }
}
  20bc30:	c3                   	retq   
  20bc31:	cc                   	int3   
  20bc32:	cc                   	int3   
  20bc33:	cc                   	int3   
  20bc34:	cc                   	int3   
  20bc35:	cc                   	int3   
  20bc36:	cc                   	int3   
  20bc37:	cc                   	int3   
  20bc38:	cc                   	int3   
  20bc39:	cc                   	int3   
  20bc3a:	cc                   	int3   
  20bc3b:	cc                   	int3   
  20bc3c:	cc                   	int3   
  20bc3d:	cc                   	int3   
  20bc3e:	cc                   	int3   
  20bc3f:	cc                   	int3   

000000000020bc40 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h5cc1f53bc66c4beaE>:
    ///
    /// [`as_mut_ptr`]: slice::as_mut_ptr
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
    #[inline]
    pub const fn as_ptr(&self) -> *const T {
  20bc40:	48 83 ec 10          	sub    $0x10,%rsp
  20bc44:	48 89 f8             	mov    %rdi,%rax
  20bc47:	48 89 04 24          	mov    %rax,(%rsp)
  20bc4b:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
        self as *const [T] as *const T
    }
  20bc50:	48 83 c4 10          	add    $0x10,%rsp
  20bc54:	c3                   	retq   
  20bc55:	cc                   	int3   
  20bc56:	cc                   	int3   
  20bc57:	cc                   	int3   
  20bc58:	cc                   	int3   
  20bc59:	cc                   	int3   
  20bc5a:	cc                   	int3   
  20bc5b:	cc                   	int3   
  20bc5c:	cc                   	int3   
  20bc5d:	cc                   	int3   
  20bc5e:	cc                   	int3   
  20bc5f:	cc                   	int3   

000000000020bc60 <_ZN4core3ops8function6FnOnce9call_once17h9f4a139d2a8e95dbE>:
    #[stable(feature = "fn_once_output", since = "1.12.0")]
    type Output;

    /// Performs the call operation.
    #[unstable(feature = "fn_traits", issue = "29625")]
    extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
  20bc60:	48 83 ec 18          	sub    $0x18,%rsp
  20bc64:	48 89 f8             	mov    %rdi,%rax
  20bc67:	48 89 04 24          	mov    %rax,(%rsp)
    static ref KERNEL_TSS: TaskStateSegment = create_tss_for_bp();
  20bc6b:	e8 e0 82 ff ff       	callq  203f50 <_ZN9r3_kernel3cpu8segments17create_tss_for_bp17h6ae7bbdd9ddc0561E>
  20bc70:	48 8b 04 24          	mov    (%rsp),%rax
  20bc74:	48 83 c4 18          	add    $0x18,%rsp
  20bc78:	c3                   	retq   
  20bc79:	cc                   	int3   
  20bc7a:	cc                   	int3   
  20bc7b:	cc                   	int3   
  20bc7c:	cc                   	int3   
  20bc7d:	cc                   	int3   
  20bc7e:	cc                   	int3   
  20bc7f:	cc                   	int3   

000000000020bc80 <_ZN4core3ops8function6FnOnce9call_once17hbfa38db203cdd59fE>:
  20bc80:	48 81 ec 28 10 00 00 	sub    $0x1028,%rsp
  20bc87:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20bc8c:	48 89 3c 24          	mov    %rdi,(%rsp)
    pub static ref IDT: Mutex<InterruptDescriptorTable> = Mutex::new(prepare_idt());
  20bc90:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  20bc95:	e8 16 fc ff ff       	callq  20b8b0 <_ZN9r3_kernel3cpu10exceptions11prepare_idt17h7e687c1ba2cae053E>
  20bc9a:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20bc9f:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  20bca4:	e8 77 ac ff ff       	callq  206920 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h278439292dab46e4E>
  20bca9:	48 8b 04 24          	mov    (%rsp),%rax
  20bcad:	48 81 c4 28 10 00 00 	add    $0x1028,%rsp
  20bcb4:	c3                   	retq   
  20bcb5:	cc                   	int3   
  20bcb6:	cc                   	int3   
  20bcb7:	cc                   	int3   
  20bcb8:	cc                   	int3   
  20bcb9:	cc                   	int3   
  20bcba:	cc                   	int3   
  20bcbb:	cc                   	int3   
  20bcbc:	cc                   	int3   
  20bcbd:	cc                   	int3   
  20bcbe:	cc                   	int3   
  20bcbf:	cc                   	int3   

000000000020bcc0 <_ZN4core3ops8function6FnOnce9call_once17hc3c97168e4cb6453E>:
  20bcc0:	48 83 ec 28          	sub    $0x28,%rsp
  20bcc4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20bcc9:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
    pub static ref BOOT_INFO: Mutex<BootProtoContainer> = Mutex::new(BootProtoContainer::empty());
  20bcce:	e8 cd 9a ff ff       	callq  2057a0 <_ZN9r3_kernel10boot_proto18BootProtoContainer5empty17h2895c2c060c9370bE>
  20bcd3:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  20bcd8:	48 89 c6             	mov    %rax,%rsi
  20bcdb:	e8 b0 ab ff ff       	callq  206890 <_ZN4spin5mutex14Mutex$LT$T$GT$3new17h1368181a5039d411E>
  20bce0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20bce5:	48 83 c4 28          	add    $0x28,%rsp
  20bce9:	c3                   	retq   
  20bcea:	cc                   	int3   
  20bceb:	cc                   	int3   
  20bcec:	cc                   	int3   
  20bced:	cc                   	int3   
  20bcee:	cc                   	int3   
  20bcef:	cc                   	int3   

000000000020bcf0 <_ZN4core3ops8function6FnOnce9call_once17hd8afbc9466c583faE>:
  20bcf0:	48 83 ec 18          	sub    $0x18,%rsp
  20bcf4:	48 89 f8             	mov    %rdi,%rax
  20bcf7:	48 89 04 24          	mov    %rax,(%rsp)
    static ref KERNEL_BASE_GDT: GDTContainer = create_gdt_for_bp();
  20bcfb:	e8 c0 82 ff ff       	callq  203fc0 <_ZN9r3_kernel3cpu8segments17create_gdt_for_bp17h9836393e5564ee0dE>
  20bd00:	48 8b 04 24          	mov    (%rsp),%rax
  20bd04:	48 83 c4 18          	add    $0x18,%rsp
  20bd08:	c3                   	retq   
  20bd09:	cc                   	int3   
  20bd0a:	cc                   	int3   
  20bd0b:	cc                   	int3   
  20bd0c:	cc                   	int3   
  20bd0d:	cc                   	int3   
  20bd0e:	cc                   	int3   
  20bd0f:	cc                   	int3   

000000000020bd10 <_ZN4core3ops8function6FnOnce9call_once17he9df15db724f2edfE>:
  20bd10:	48 83 ec 18          	sub    $0x18,%rsp
  20bd14:	48 89 f8             	mov    %rdi,%rax
  20bd17:	48 89 04 24          	mov    %rax,(%rsp)

lazy_static! {
    pub static ref UART_DRIVER: Option<Mutex<UART>> = init_uart();
  20bd1b:	e8 60 e0 ff ff       	callq  209d80 <_ZN9r3_kernel7drivers4uart9init_uart17h28a76d1a7b053dacE>
  20bd20:	48 8b 04 24          	mov    (%rsp),%rax
  20bd24:	48 83 c4 18          	add    $0x18,%rsp
  20bd28:	c3                   	retq   
  20bd29:	cc                   	int3   
  20bd2a:	cc                   	int3   
  20bd2b:	cc                   	int3   
  20bd2c:	cc                   	int3   
  20bd2d:	cc                   	int3   
  20bd2e:	cc                   	int3   
  20bd2f:	cc                   	int3   

000000000020bd30 <_ZN4core3ptr104drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..cpu..interrupts..InterruptDescriptorTable$GT$$GT$17h4dc346f8cb271829E>:
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
  20bd30:	50                   	push   %rax
  20bd31:	48 89 3c 24          	mov    %rdi,(%rsp)
  20bd35:	e8 d6 00 00 00       	callq  20be10 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h799440b001dac72bE>
  20bd3a:	58                   	pop    %rax
  20bd3b:	c3                   	retq   
  20bd3c:	cc                   	int3   
  20bd3d:	cc                   	int3   
  20bd3e:	cc                   	int3   
  20bd3f:	cc                   	int3   

000000000020bd40 <_ZN4core3ptr24drop_in_place$LT$u64$GT$17ha57af979494c2506E>:
  20bd40:	50                   	push   %rax
  20bd41:	48 89 3c 24          	mov    %rdi,(%rsp)
  20bd45:	58                   	pop    %rax
  20bd46:	c3                   	retq   
  20bd47:	cc                   	int3   
  20bd48:	cc                   	int3   
  20bd49:	cc                   	int3   
  20bd4a:	cc                   	int3   
  20bd4b:	cc                   	int3   
  20bd4c:	cc                   	int3   
  20bd4d:	cc                   	int3   
  20bd4e:	cc                   	int3   
  20bd4f:	cc                   	int3   

000000000020bd50 <_ZN4core3ptr28drop_in_place$LT$$RF$str$GT$17hda917a2b14b04484E>:
  20bd50:	50                   	push   %rax
  20bd51:	48 89 3c 24          	mov    %rdi,(%rsp)
  20bd55:	58                   	pop    %rax
  20bd56:	c3                   	retq   
  20bd57:	cc                   	int3   
  20bd58:	cc                   	int3   
  20bd59:	cc                   	int3   
  20bd5a:	cc                   	int3   
  20bd5b:	cc                   	int3   
  20bd5c:	cc                   	int3   
  20bd5d:	cc                   	int3   
  20bd5e:	cc                   	int3   
  20bd5f:	cc                   	int3   

000000000020bd60 <_ZN4core3ptr28drop_in_place$LT$$RF$u16$GT$17hab59f3233d937d96E>:
  20bd60:	50                   	push   %rax
  20bd61:	48 89 3c 24          	mov    %rdi,(%rsp)
  20bd65:	58                   	pop    %rax
  20bd66:	c3                   	retq   
  20bd67:	cc                   	int3   
  20bd68:	cc                   	int3   
  20bd69:	cc                   	int3   
  20bd6a:	cc                   	int3   
  20bd6b:	cc                   	int3   
  20bd6c:	cc                   	int3   
  20bd6d:	cc                   	int3   
  20bd6e:	cc                   	int3   
  20bd6f:	cc                   	int3   

000000000020bd70 <_ZN4core3ptr37drop_in_place$LT$core..fmt..Error$GT$17hfdea5627f4b33806E>:
  20bd70:	50                   	push   %rax
  20bd71:	48 89 3c 24          	mov    %rdi,(%rsp)
  20bd75:	58                   	pop    %rax
  20bd76:	c3                   	retq   
  20bd77:	cc                   	int3   
  20bd78:	cc                   	int3   
  20bd79:	cc                   	int3   
  20bd7a:	cc                   	int3   
  20bd7b:	cc                   	int3   
  20bd7c:	cc                   	int3   
  20bd7d:	cc                   	int3   
  20bd7e:	cc                   	int3   
  20bd7f:	cc                   	int3   

000000000020bd80 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17h93a754bf50e05e07E>:
  20bd80:	50                   	push   %rax
  20bd81:	48 89 3c 24          	mov    %rdi,(%rsp)
  20bd85:	e8 f6 01 00 00       	callq  20bf80 <_ZN60_$LT$spin..once..Finish$u20$as$u20$core..ops..drop..Drop$GT$4drop17h0d628bd715907b3cE>
  20bd8a:	58                   	pop    %rax
  20bd8b:	c3                   	retq   
  20bd8c:	cc                   	int3   
  20bd8d:	cc                   	int3   
  20bd8e:	cc                   	int3   
  20bd8f:	cc                   	int3   

000000000020bd90 <_ZN4core3ptr53drop_in_place$LT$r3_kernel..logging..KernelLogger$GT$17h8776a4b6cb5745b5E>:
  20bd90:	50                   	push   %rax
  20bd91:	48 89 3c 24          	mov    %rdi,(%rsp)
  20bd95:	58                   	pop    %rax
  20bd96:	c3                   	retq   
  20bd97:	cc                   	int3   
  20bd98:	cc                   	int3   
  20bd99:	cc                   	int3   
  20bd9a:	cc                   	int3   
  20bd9b:	cc                   	int3   
  20bd9c:	cc                   	int3   
  20bd9d:	cc                   	int3   
  20bd9e:	cc                   	int3   
  20bd9f:	cc                   	int3   

000000000020bda0 <_ZN4core3ptr62drop_in_place$LT$r3_kernel..cpu..segments..SegmentSelector$GT$17hc02e85b8a65b92fcE>:
  20bda0:	50                   	push   %rax
  20bda1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20bda5:	58                   	pop    %rax
  20bda6:	c3                   	retq   
  20bda7:	cc                   	int3   
  20bda8:	cc                   	int3   
  20bda9:	cc                   	int3   
  20bdaa:	cc                   	int3   
  20bdab:	cc                   	int3   
  20bdac:	cc                   	int3   
  20bdad:	cc                   	int3   
  20bdae:	cc                   	int3   
  20bdaf:	cc                   	int3   

000000000020bdb0 <_ZN4core3ptr63drop_in_place$LT$$RF$mut$u20$r3_kernel..drivers..uart..UART$GT$17h4eacb68016d4b9a7E>:
  20bdb0:	50                   	push   %rax
  20bdb1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20bdb5:	58                   	pop    %rax
  20bdb6:	c3                   	retq   
  20bdb7:	cc                   	int3   
  20bdb8:	cc                   	int3   
  20bdb9:	cc                   	int3   
  20bdba:	cc                   	int3   
  20bdbb:	cc                   	int3   
  20bdbc:	cc                   	int3   
  20bdbd:	cc                   	int3   
  20bdbe:	cc                   	int3   
  20bdbf:	cc                   	int3   

000000000020bdc0 <_ZN4core3ptr82drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..drivers..uart..UART$GT$$GT$17h26685a7b93c5d71bE>:
  20bdc0:	50                   	push   %rax
  20bdc1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20bdc5:	e8 16 00 00 00       	callq  20bde0 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h2d9cee4c8ab35771E>
  20bdca:	58                   	pop    %rax
  20bdcb:	c3                   	retq   
  20bdcc:	cc                   	int3   
  20bdcd:	cc                   	int3   
  20bdce:	cc                   	int3   
  20bdcf:	cc                   	int3   

000000000020bdd0 <_ZN4core3ptr93drop_in_place$LT$spin..mutex..MutexGuard$LT$r3_kernel..boot_proto..BootProtoContainer$GT$$GT$17h754c2fd5620c579cE>:
  20bdd0:	50                   	push   %rax
  20bdd1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20bdd5:	e8 66 00 00 00       	callq  20be40 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf79b7fd7184a650eE>
  20bdda:	58                   	pop    %rax
  20bddb:	c3                   	retq   
  20bddc:	cc                   	int3   
  20bddd:	cc                   	int3   
  20bdde:	cc                   	int3   
  20bddf:	cc                   	int3   

000000000020bde0 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h2d9cee4c8ab35771E>:
}

impl<'a, T: ?Sized> Drop for MutexGuard<'a, T>
{
    /// The dropping of the MutexGuard will release the lock it was created from.
    fn drop(&mut self)
  20bde0:	48 83 ec 18          	sub    $0x18,%rsp
  20bde4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
    {
        self.lock.store(false, Ordering::Release);
  20bde9:	48 8b 3f             	mov    (%rdi),%rdi
  20bdec:	c6 44 24 0f 01       	movb   $0x1,0xf(%rsp)
  20bdf1:	31 f6                	xor    %esi,%esi
  20bdf3:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  20bdf8:	e8 63 e9 ff ff       	callq  20a760 <_ZN4core4sync6atomic10AtomicBool5store17ha53101aa1a511b4bE>
    }
  20bdfd:	48 83 c4 18          	add    $0x18,%rsp
  20be01:	c3                   	retq   
  20be02:	cc                   	int3   
  20be03:	cc                   	int3   
  20be04:	cc                   	int3   
  20be05:	cc                   	int3   
  20be06:	cc                   	int3   
  20be07:	cc                   	int3   
  20be08:	cc                   	int3   
  20be09:	cc                   	int3   
  20be0a:	cc                   	int3   
  20be0b:	cc                   	int3   
  20be0c:	cc                   	int3   
  20be0d:	cc                   	int3   
  20be0e:	cc                   	int3   
  20be0f:	cc                   	int3   

000000000020be10 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h799440b001dac72bE>:
    fn drop(&mut self)
  20be10:	48 83 ec 18          	sub    $0x18,%rsp
  20be14:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.lock.store(false, Ordering::Release);
  20be19:	48 8b 3f             	mov    (%rdi),%rdi
  20be1c:	c6 44 24 0f 01       	movb   $0x1,0xf(%rsp)
  20be21:	31 f6                	xor    %esi,%esi
  20be23:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  20be28:	e8 33 e9 ff ff       	callq  20a760 <_ZN4core4sync6atomic10AtomicBool5store17ha53101aa1a511b4bE>
    }
  20be2d:	48 83 c4 18          	add    $0x18,%rsp
  20be31:	c3                   	retq   
  20be32:	cc                   	int3   
  20be33:	cc                   	int3   
  20be34:	cc                   	int3   
  20be35:	cc                   	int3   
  20be36:	cc                   	int3   
  20be37:	cc                   	int3   
  20be38:	cc                   	int3   
  20be39:	cc                   	int3   
  20be3a:	cc                   	int3   
  20be3b:	cc                   	int3   
  20be3c:	cc                   	int3   
  20be3d:	cc                   	int3   
  20be3e:	cc                   	int3   
  20be3f:	cc                   	int3   

000000000020be40 <_ZN74_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf79b7fd7184a650eE>:
    fn drop(&mut self)
  20be40:	48 83 ec 18          	sub    $0x18,%rsp
  20be44:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        self.lock.store(false, Ordering::Release);
  20be49:	48 8b 3f             	mov    (%rdi),%rdi
  20be4c:	c6 44 24 0f 01       	movb   $0x1,0xf(%rsp)
  20be51:	31 f6                	xor    %esi,%esi
  20be53:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  20be58:	e8 03 e9 ff ff       	callq  20a760 <_ZN4core4sync6atomic10AtomicBool5store17ha53101aa1a511b4bE>
    }
  20be5d:	48 83 c4 18          	add    $0x18,%rsp
  20be61:	c3                   	retq   
  20be62:	cc                   	int3   
  20be63:	cc                   	int3   
  20be64:	cc                   	int3   
  20be65:	cc                   	int3   
  20be66:	cc                   	int3   
  20be67:	cc                   	int3   
  20be68:	cc                   	int3   
  20be69:	cc                   	int3   
  20be6a:	cc                   	int3   
  20be6b:	cc                   	int3   
  20be6c:	cc                   	int3   
  20be6d:	cc                   	int3   
  20be6e:	cc                   	int3   
  20be6f:	cc                   	int3   

000000000020be70 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17hfaed2971c47496d3E>:
                #[inline]
                fn partial_cmp(&self, other: &$t) -> Option<Ordering> {
                    Some(self.cmp(other))
                }
                #[inline]
                fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
  20be70:	48 83 ec 10          	sub    $0x10,%rsp
  20be74:	48 89 3c 24          	mov    %rdi,(%rsp)
  20be78:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  20be7d:	48 8b 07             	mov    (%rdi),%rax
  20be80:	48 3b 06             	cmp    (%rsi),%rax
  20be83:	0f 92 c0             	setb   %al
  20be86:	24 01                	and    $0x1,%al
  20be88:	0f b6 c0             	movzbl %al,%eax
  20be8b:	48 83 c4 10          	add    $0x10,%rsp
  20be8f:	c3                   	retq   

000000000020be90 <_ZN4core3str21_$LT$impl$u20$str$GT$5bytes17h69793d84f9f7b42cE>:
    ///
    /// assert_eq!(None, bytes.next());
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[inline]
    pub fn bytes(&self) -> Bytes<'_> {
  20be90:	48 83 ec 78          	sub    $0x78,%rsp
  20be94:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  20be99:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
  20be9e:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
  20bea3:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
        unsafe { mem::transmute(self) }
  20bea8:	48 89 7c 24 68       	mov    %rdi,0x68(%rsp)
  20bead:	48 89 74 24 70       	mov    %rsi,0x70(%rsp)
  20beb2:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  20beb7:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20bebc:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  20bec1:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20bec6:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  20becb:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
        Bytes(self.as_bytes().iter().copied())
  20bed0:	e8 db 0d 00 00       	callq  20ccb0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17he41657a4f47f5768E>
  20bed5:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20beda:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  20bedf:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  20bee4:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  20bee9:	e8 62 0c 00 00       	callq  20cb50 <_ZN4core4iter6traits8iterator8Iterator6copied17hc9ec77e1a1303f3eE>
  20beee:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20bef3:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  20bef8:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20befd:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  20bf02:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  20bf07:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
    }
  20bf0c:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20bf11:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  20bf16:	48 83 c4 78          	add    $0x78,%rsp
  20bf1a:	c3                   	retq   
  20bf1b:	cc                   	int3   
  20bf1c:	cc                   	int3   
  20bf1d:	cc                   	int3   
  20bf1e:	cc                   	int3   
  20bf1f:	cc                   	int3   

000000000020bf20 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h80a022844752abc3E>:
        unsafe fn forward_unchecked(start: Self, n: usize) -> Self {
  20bf20:	48 83 ec 30          	sub    $0x30,%rsp
  20bf24:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20bf29:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20bf2e:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20bf33:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        #[inline(always)]
        pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
            // SAFETY: the caller must uphold the safety contract for
            // `unchecked_add`.
            unsafe { intrinsics::unchecked_add(self, rhs) }
  20bf38:	48 01 f7             	add    %rsi,%rdi
  20bf3b:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20bf40:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  20bf45:	48 89 04 24          	mov    %rax,(%rsp)
  20bf49:	48 8b 04 24          	mov    (%rsp),%rax
        }
  20bf4d:	48 83 c4 30          	add    $0x30,%rsp
  20bf51:	c3                   	retq   
  20bf52:	cc                   	int3   
  20bf53:	cc                   	int3   
  20bf54:	cc                   	int3   
  20bf55:	cc                   	int3   
  20bf56:	cc                   	int3   
  20bf57:	cc                   	int3   
  20bf58:	cc                   	int3   
  20bf59:	cc                   	int3   
  20bf5a:	cc                   	int3   
  20bf5b:	cc                   	int3   
  20bf5c:	cc                   	int3   
  20bf5d:	cc                   	int3   
  20bf5e:	cc                   	int3   
  20bf5f:	cc                   	int3   

000000000020bf60 <_ZN4core7convert3num64_$LT$impl$u20$core..convert..From$LT$u16$GT$$u20$for$u20$u64$GT$4from17h0f0bf1c063626619E>:
        impl const From<$Small> for $Large {
            // Rustdocs on the impl block show a "[+] show undocumented items" toggle.
            // Rustdocs on functions do not.
            #[doc = $doc]
            #[inline]
            fn from(small: $Small) -> Self {
  20bf60:	48 83 ec 02          	sub    $0x2,%rsp
  20bf64:	66 89 f8             	mov    %di,%ax
  20bf67:	66 89 04 24          	mov    %ax,(%rsp)
                small as Self
  20bf6b:	0f b7 c0             	movzwl %ax,%eax
            }
  20bf6e:	48 83 c4 02          	add    $0x2,%rsp
  20bf72:	c3                   	retq   
  20bf73:	cc                   	int3   
  20bf74:	cc                   	int3   
  20bf75:	cc                   	int3   
  20bf76:	cc                   	int3   
  20bf77:	cc                   	int3   
  20bf78:	cc                   	int3   
  20bf79:	cc                   	int3   
  20bf7a:	cc                   	int3   
  20bf7b:	cc                   	int3   
  20bf7c:	cc                   	int3   
  20bf7d:	cc                   	int3   
  20bf7e:	cc                   	int3   
  20bf7f:	cc                   	int3   

000000000020bf80 <_ZN60_$LT$spin..once..Finish$u20$as$u20$core..ops..drop..Drop$GT$4drop17h0d628bd715907b3cE>:
    state: &'a AtomicUsize,
    panicked: bool,
}

impl<'a> Drop for Finish<'a> {
    fn drop(&mut self) {
  20bf80:	48 83 ec 18          	sub    $0x18,%rsp
  20bf84:	48 89 3c 24          	mov    %rdi,(%rsp)
  20bf88:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        if self.panicked {
  20bf8d:	f6 47 08 01          	testb  $0x1,0x8(%rdi)
  20bf91:	75 05                	jne    20bf98 <_ZN60_$LT$spin..once..Finish$u20$as$u20$core..ops..drop..Drop$GT$4drop17h0d628bd715907b3cE+0x18>
            self.state.store(PANICKED, Ordering::SeqCst);
        }
    }
  20bf93:	48 83 c4 18          	add    $0x18,%rsp
  20bf97:	c3                   	retq   
  20bf98:	48 8b 04 24          	mov    (%rsp),%rax
            self.state.store(PANICKED, Ordering::SeqCst);
  20bf9c:	48 8b 38             	mov    (%rax),%rdi
  20bf9f:	c6 44 24 0f 04       	movb   $0x4,0xf(%rsp)
  20bfa4:	be 03 00 00 00       	mov    $0x3,%esi
  20bfa9:	0f b6 54 24 0f       	movzbl 0xf(%rsp),%edx
  20bfae:	e8 0d 00 00 00       	callq  20bfc0 <_ZN4core4sync6atomic11AtomicUsize5store17h7f42b3e169ad4dc7E>
  20bfb3:	eb de                	jmp    20bf93 <_ZN60_$LT$spin..once..Finish$u20$as$u20$core..ops..drop..Drop$GT$4drop17h0d628bd715907b3cE+0x13>
  20bfb5:	cc                   	int3   
  20bfb6:	cc                   	int3   
  20bfb7:	cc                   	int3   
  20bfb8:	cc                   	int3   
  20bfb9:	cc                   	int3   
  20bfba:	cc                   	int3   
  20bfbb:	cc                   	int3   
  20bfbc:	cc                   	int3   
  20bfbd:	cc                   	int3   
  20bfbe:	cc                   	int3   
  20bfbf:	cc                   	int3   

000000000020bfc0 <_ZN4core4sync6atomic11AtomicUsize5store17h7f42b3e169ad4dc7E>:
            pub fn store(&self, val: $int_type, order: Ordering) {
  20bfc0:	48 83 ec 38          	sub    $0x38,%rsp
  20bfc4:	48 89 34 24          	mov    %rsi,(%rsp)
  20bfc8:	88 d0                	mov    %dl,%al
  20bfca:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20bfce:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20bfd3:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  20bfd8:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  20bfdc:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20bfe1:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  20bfe6:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20bfea:	48 8b 34 24          	mov    (%rsp),%rsi
  20bfee:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                unsafe { atomic_store(self.v.get(), val, order); }
  20bff3:	0f b6 d0             	movzbl %al,%edx
  20bff6:	e8 05 00 00 00       	callq  20c000 <_ZN4core4sync6atomic12atomic_store17h3c6fa1ca70c2bd0fE>
            }
  20bffb:	48 83 c4 38          	add    $0x38,%rsp
  20bfff:	c3                   	retq   

000000000020c000 <_ZN4core4sync6atomic12atomic_store17h3c6fa1ca70c2bd0fE>:
unsafe fn atomic_store<T: Copy>(dst: *mut T, val: T, order: Ordering) {
  20c000:	48 83 ec 38          	sub    $0x38,%rsp
  20c004:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  20c009:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20c00e:	88 d0                	mov    %dl,%al
  20c010:	88 44 24 27          	mov    %al,0x27(%rsp)
  20c014:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20c019:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        match order {
  20c01e:	0f b6 44 24 27       	movzbl 0x27(%rsp),%eax
  20c023:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20c028:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20c02d:	48 8d 0d 54 4f ff ff 	lea    -0xb0ac(%rip),%rcx        # 200f88 <_ZN9r3_kernel3cpu10exceptions3IDT17he44583177f5a1f5fE+0x1>
  20c034:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  20c038:	48 01 c8             	add    %rcx,%rax
  20c03b:	ff e0                	jmpq   *%rax
  20c03d:	0f 0b                	ud2    
  20c03f:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20c044:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
  20c049:	48 89 08             	mov    %rcx,(%rax)
  20c04c:	eb 59                	jmp    20c0a7 <_ZN4core4sync6atomic12atomic_store17h3c6fa1ca70c2bd0fE+0xa7>
  20c04e:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20c053:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Release => intrinsics::atomic_store_rel(dst, val),
  20c058:	48 89 08             	mov    %rcx,(%rax)
  20c05b:	eb 48                	jmp    20c0a5 <_ZN4core4sync6atomic12atomic_store17h3c6fa1ca70c2bd0fE+0xa5>
            Acquire => panic!("there is no such thing as an acquire store"),
  20c05d:	48 8d 3d e2 4f ff ff 	lea    -0xb01e(%rip),%rdi        # 201046 <_ZN9r3_kernel3cpu10exceptions3IDT17he44583177f5a1f5fE+0xbf>
  20c064:	48 8d 15 95 74 00 00 	lea    0x7495(%rip),%rdx        # 213500 <memset+0x1c20>
  20c06b:	be 2a 00 00 00       	mov    $0x2a,%esi
  20c070:	e8 1b 2e 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20c075:	0f 0b                	ud2    
            AcqRel => panic!("there is no such thing as an acquire/release store"),
  20c077:	48 8d 3d 1e 4f ff ff 	lea    -0xb0e2(%rip),%rdi        # 200f9c <_ZN9r3_kernel3cpu10exceptions3IDT17he44583177f5a1f5fE+0x15>
  20c07e:	48 8d 15 63 74 00 00 	lea    0x7463(%rip),%rdx        # 2134e8 <memset+0x1c08>
  20c085:	be 32 00 00 00       	mov    $0x32,%esi
  20c08a:	e8 01 2e 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20c08f:	0f 0b                	ud2    
  20c091:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20c096:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            SeqCst => intrinsics::atomic_store(dst, val),
  20c09b:	48 87 01             	xchg   %rax,(%rcx)
  20c09e:	eb 00                	jmp    20c0a0 <_ZN4core4sync6atomic12atomic_store17h3c6fa1ca70c2bd0fE+0xa0>
}
  20c0a0:	48 83 c4 38          	add    $0x38,%rsp
  20c0a4:	c3                   	retq   
            Release => intrinsics::atomic_store_rel(dst, val),
  20c0a5:	eb f9                	jmp    20c0a0 <_ZN4core4sync6atomic12atomic_store17h3c6fa1ca70c2bd0fE+0xa0>
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
  20c0a7:	eb f7                	jmp    20c0a0 <_ZN4core4sync6atomic12atomic_store17h3c6fa1ca70c2bd0fE+0xa0>
  20c0a9:	cc                   	int3   
  20c0aa:	cc                   	int3   
  20c0ab:	cc                   	int3   
  20c0ac:	cc                   	int3   
  20c0ad:	cc                   	int3   
  20c0ae:	cc                   	int3   
  20c0af:	cc                   	int3   

000000000020c0b0 <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17h64195f908f525ecbE>:
    fn clone(&self) -> Level {
  20c0b0:	50                   	push   %rax
  20c0b1:	48 89 3c 24          	mov    %rdi,(%rsp)
        *self
  20c0b5:	48 8b 07             	mov    (%rdi),%rax
    }
  20c0b8:	59                   	pop    %rcx
  20c0b9:	c3                   	retq   
  20c0ba:	cc                   	int3   
  20c0bb:	cc                   	int3   
  20c0bc:	cc                   	int3   
  20c0bd:	cc                   	int3   
  20c0be:	cc                   	int3   
  20c0bf:	cc                   	int3   

000000000020c0c0 <_ZN49_$LT$log..Level$u20$as$u20$core..fmt..Display$GT$3fmt17h774fa8d468057f7dE>:
    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
  20c0c0:	48 83 ec 38          	sub    $0x38,%rsp
  20c0c4:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20c0c9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20c0ce:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        fmt.pad(self.as_str())
  20c0d3:	e8 38 00 00 00       	callq  20c110 <_ZN3log5Level6as_str17h940f0b247dae748dE>
  20c0d8:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20c0dd:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  20c0e2:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20c0e7:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  20c0ec:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  20c0f1:	e8 aa 48 00 00       	callq  2109a0 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E>
  20c0f6:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20c0fa:	8a 44 24 0f          	mov    0xf(%rsp),%al
    }
  20c0fe:	24 01                	and    $0x1,%al
  20c100:	0f b6 c0             	movzbl %al,%eax
  20c103:	48 83 c4 38          	add    $0x38,%rsp
  20c107:	c3                   	retq   
  20c108:	cc                   	int3   
  20c109:	cc                   	int3   
  20c10a:	cc                   	int3   
  20c10b:	cc                   	int3   
  20c10c:	cc                   	int3   
  20c10d:	cc                   	int3   
  20c10e:	cc                   	int3   
  20c10f:	cc                   	int3   

000000000020c110 <_ZN3log5Level6as_str17h940f0b247dae748dE>:
    pub fn as_str(&self) -> &'static str {
  20c110:	48 83 ec 18          	sub    $0x18,%rsp
  20c114:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
        LOG_LEVEL_NAMES[*self as usize]
  20c119:	48 8b 07             	mov    (%rdi),%rax
  20c11c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20c121:	48 83 f8 06          	cmp    $0x6,%rax
  20c125:	0f 92 c0             	setb   %al
  20c128:	a8 01                	test   $0x1,%al
  20c12a:	75 02                	jne    20c12e <_ZN3log5Level6as_str17h940f0b247dae748dE+0x1e>
  20c12c:	eb 1e                	jmp    20c14c <_ZN3log5Level6as_str17h940f0b247dae748dE+0x3c>
  20c12e:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  20c133:	48 c1 e1 04          	shl    $0x4,%rcx
  20c137:	48 8d 15 2a 74 00 00 	lea    0x742a(%rip),%rdx        # 213568 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E>
  20c13e:	48 8b 04 11          	mov    (%rcx,%rdx,1),%rax
  20c142:	48 8b 54 11 08       	mov    0x8(%rcx,%rdx,1),%rdx
    }
  20c147:	48 83 c4 18          	add    $0x18,%rsp
  20c14b:	c3                   	retq   
  20c14c:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        LOG_LEVEL_NAMES[*self as usize]
  20c151:	48 8d 15 70 74 00 00 	lea    0x7470(%rip),%rdx        # 2135c8 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x60>
  20c158:	be 06 00 00 00       	mov    $0x6,%esi
  20c15d:	e8 7e 2d 00 00       	callq  20eee0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  20c162:	0f 0b                	ud2    
  20c164:	cc                   	int3   
  20c165:	cc                   	int3   
  20c166:	cc                   	int3   
  20c167:	cc                   	int3   
  20c168:	cc                   	int3   
  20c169:	cc                   	int3   
  20c16a:	cc                   	int3   
  20c16b:	cc                   	int3   
  20c16c:	cc                   	int3   
  20c16d:	cc                   	int3   
  20c16e:	cc                   	int3   
  20c16f:	cc                   	int3   

000000000020c170 <_ZN3log6Record7builder17h05e0ba0ce2be0210E>:
    pub fn builder() -> RecordBuilder<'a> {
  20c170:	50                   	push   %rax
  20c171:	48 89 f8             	mov    %rdi,%rax
  20c174:	48 89 04 24          	mov    %rax,(%rsp)
        RecordBuilder::new()
  20c178:	e8 13 00 00 00       	callq  20c190 <_ZN3log13RecordBuilder3new17hbec355d2ea311581E>
  20c17d:	48 8b 04 24          	mov    (%rsp),%rax
    }
  20c181:	59                   	pop    %rcx
  20c182:	c3                   	retq   
  20c183:	cc                   	int3   
  20c184:	cc                   	int3   
  20c185:	cc                   	int3   
  20c186:	cc                   	int3   
  20c187:	cc                   	int3   
  20c188:	cc                   	int3   
  20c189:	cc                   	int3   
  20c18a:	cc                   	int3   
  20c18b:	cc                   	int3   
  20c18c:	cc                   	int3   
  20c18d:	cc                   	int3   
  20c18e:	cc                   	int3   
  20c18f:	cc                   	int3   

000000000020c190 <_ZN3log13RecordBuilder3new17hbec355d2ea311581E>:
    pub fn new() -> RecordBuilder<'a> {
  20c190:	48 81 ec 28 01 00 00 	sub    $0x128,%rsp
  20c197:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c19b:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
                args: format_args!(""),
  20c1a0:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  20c1a7:	00 
  20c1a8:	48 8d 0d c1 4e ff ff 	lea    -0xb13f(%rip),%rcx        # 201070 <_ZN9r3_kernel3cpu10exceptions3IDT17he44583177f5a1f5fE+0xe9>
  20c1af:	48 89 ce             	mov    %rcx,%rsi
  20c1b2:	31 c0                	xor    %eax,%eax
  20c1b4:	41 89 c0             	mov    %eax,%r8d
  20c1b7:	4c 89 c2             	mov    %r8,%rdx
  20c1ba:	e8 e1 13 00 00       	callq  20d5a0 <_ZN4core3fmt9Arguments6new_v117h95f460802f9138bdE>
                metadata: Metadata::builder().build(),
  20c1bf:	48 8d bc 24 d8 00 00 	lea    0xd8(%rsp),%rdi
  20c1c6:	00 
  20c1c7:	e8 84 02 00 00       	callq  20c450 <_ZN3log8Metadata7builder17h99a7ee957b8c624fE>
  20c1cc:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  20c1d3:	00 
  20c1d4:	48 8d b4 24 d8 00 00 	lea    0xd8(%rsp),%rsi
  20c1db:	00 
  20c1dc:	e8 df 02 00 00       	callq  20c4c0 <_ZN3log15MetadataBuilder5build17hda1f130a916cf6d1E>
                module_path: None,
  20c1e1:	48 c7 84 24 f0 00 00 	movq   $0x2,0xf0(%rsp)
  20c1e8:	00 02 00 00 00 
                file: None,
  20c1ed:	48 c7 84 24 08 01 00 	movq   $0x2,0x108(%rsp)
  20c1f4:	00 02 00 00 00 
                line: None,
  20c1f9:	c7 84 24 20 01 00 00 	movl   $0x0,0x120(%rsp)
  20c200:	00 00 00 00 
            record: Record {
  20c204:	48 8b 84 24 c0 00 00 	mov    0xc0(%rsp),%rax
  20c20b:	00 
  20c20c:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20c211:	48 8b 84 24 c8 00 00 	mov    0xc8(%rsp),%rax
  20c218:	00 
  20c219:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20c21e:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
  20c225:	00 
  20c226:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20c22b:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  20c230:	48 83 c7 18          	add    $0x18,%rdi
  20c234:	48 8d b4 24 90 00 00 	lea    0x90(%rsp),%rsi
  20c23b:	00 
  20c23c:	ba 30 00 00 00       	mov    $0x30,%edx
  20c241:	e8 7a 56 00 00       	callq  2118c0 <memcpy>
  20c246:	48 8b 3c 24          	mov    (%rsp),%rdi
  20c24a:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
  20c251:	00 
  20c252:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  20c257:	48 8b 84 24 f8 00 00 	mov    0xf8(%rsp),%rax
  20c25e:	00 
  20c25f:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  20c264:	48 8b 84 24 00 01 00 	mov    0x100(%rsp),%rax
  20c26b:	00 
  20c26c:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  20c271:	48 8b 84 24 08 01 00 	mov    0x108(%rsp),%rax
  20c278:	00 
  20c279:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  20c27e:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
  20c285:	00 
  20c286:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  20c28b:	48 8b 84 24 18 01 00 	mov    0x118(%rsp),%rax
  20c292:	00 
  20c293:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  20c29a:	00 
  20c29b:	8b 8c 24 20 01 00 00 	mov    0x120(%rsp),%ecx
  20c2a2:	8b 84 24 24 01 00 00 	mov    0x124(%rsp),%eax
  20c2a9:	89 8c 24 88 00 00 00 	mov    %ecx,0x88(%rsp)
  20c2b0:	89 84 24 8c 00 00 00 	mov    %eax,0x8c(%rsp)
        RecordBuilder {
  20c2b7:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  20c2bc:	ba 80 00 00 00       	mov    $0x80,%edx
  20c2c1:	e8 fa 55 00 00       	callq  2118c0 <memcpy>
  20c2c6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  20c2cb:	48 81 c4 28 01 00 00 	add    $0x128,%rsp
  20c2d2:	c3                   	retq   
  20c2d3:	cc                   	int3   
  20c2d4:	cc                   	int3   
  20c2d5:	cc                   	int3   
  20c2d6:	cc                   	int3   
  20c2d7:	cc                   	int3   
  20c2d8:	cc                   	int3   
  20c2d9:	cc                   	int3   
  20c2da:	cc                   	int3   
  20c2db:	cc                   	int3   
  20c2dc:	cc                   	int3   
  20c2dd:	cc                   	int3   
  20c2de:	cc                   	int3   
  20c2df:	cc                   	int3   

000000000020c2e0 <_ZN3log13RecordBuilder4args17h2b585606cd819bcfE>:
    pub fn args(&mut self, args: fmt::Arguments<'a>) -> &mut RecordBuilder<'a> {
  20c2e0:	48 83 ec 48          	sub    $0x48,%rsp
  20c2e4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20c2e9:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
        self.record.args = args;
  20c2ee:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  20c2f3:	ba 30 00 00 00       	mov    $0x30,%edx
  20c2f8:	e8 c3 55 00 00       	callq  2118c0 <memcpy>
  20c2fd:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20c302:	48 83 c7 18          	add    $0x18,%rdi
  20c306:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  20c30b:	ba 30 00 00 00       	mov    $0x30,%edx
  20c310:	e8 ab 55 00 00       	callq  2118c0 <memcpy>
  20c315:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  20c31a:	48 83 c4 48          	add    $0x48,%rsp
  20c31e:	c3                   	retq   
  20c31f:	cc                   	int3   

000000000020c320 <_ZN3log13RecordBuilder5level17h9d775aec8976dd36E>:
    pub fn level(&mut self, level: Level) -> &mut RecordBuilder<'a> {
  20c320:	48 83 ec 10          	sub    $0x10,%rsp
  20c324:	48 89 f8             	mov    %rdi,%rax
  20c327:	48 89 04 24          	mov    %rax,(%rsp)
  20c32b:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
        self.record.metadata.level = level;
  20c330:	48 89 30             	mov    %rsi,(%rax)
    }
  20c333:	48 83 c4 10          	add    $0x10,%rsp
  20c337:	c3                   	retq   
  20c338:	cc                   	int3   
  20c339:	cc                   	int3   
  20c33a:	cc                   	int3   
  20c33b:	cc                   	int3   
  20c33c:	cc                   	int3   
  20c33d:	cc                   	int3   
  20c33e:	cc                   	int3   
  20c33f:	cc                   	int3   

000000000020c340 <_ZN3log13RecordBuilder6target17h4a341ee0d2618e5aE>:
    pub fn target(&mut self, target: &'a str) -> &mut RecordBuilder<'a> {
  20c340:	48 83 ec 18          	sub    $0x18,%rsp
  20c344:	48 89 f8             	mov    %rdi,%rax
  20c347:	48 89 04 24          	mov    %rax,(%rsp)
  20c34b:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  20c350:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
        self.record.metadata.target = target;
  20c355:	48 89 70 08          	mov    %rsi,0x8(%rax)
  20c359:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
  20c35d:	48 83 c4 18          	add    $0x18,%rsp
  20c361:	c3                   	retq   
  20c362:	cc                   	int3   
  20c363:	cc                   	int3   
  20c364:	cc                   	int3   
  20c365:	cc                   	int3   
  20c366:	cc                   	int3   
  20c367:	cc                   	int3   
  20c368:	cc                   	int3   
  20c369:	cc                   	int3   
  20c36a:	cc                   	int3   
  20c36b:	cc                   	int3   
  20c36c:	cc                   	int3   
  20c36d:	cc                   	int3   
  20c36e:	cc                   	int3   
  20c36f:	cc                   	int3   

000000000020c370 <_ZN3log13RecordBuilder18module_path_static17hd557922a918e7806E>:
    pub fn module_path_static(&mut self, path: Option<&'static str>) -> &mut RecordBuilder<'a> {
  20c370:	48 83 ec 38          	sub    $0x38,%rsp
  20c374:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c378:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  20c37d:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  20c382:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
        self.record.module_path = path.map(MaybeStaticStr::Static);
  20c387:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  20c38c:	e8 bf 09 00 00       	callq  20cd50 <_ZN4core6option15Option$LT$T$GT$3map17hb5a6e0461aae5bdfE>
  20c391:	48 8b 04 24          	mov    (%rsp),%rax
  20c395:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  20c39a:	48 89 48 48          	mov    %rcx,0x48(%rax)
  20c39e:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20c3a3:	48 89 48 50          	mov    %rcx,0x50(%rax)
  20c3a7:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  20c3ac:	48 89 48 58          	mov    %rcx,0x58(%rax)
    }
  20c3b0:	48 83 c4 38          	add    $0x38,%rsp
  20c3b4:	c3                   	retq   
  20c3b5:	cc                   	int3   
  20c3b6:	cc                   	int3   
  20c3b7:	cc                   	int3   
  20c3b8:	cc                   	int3   
  20c3b9:	cc                   	int3   
  20c3ba:	cc                   	int3   
  20c3bb:	cc                   	int3   
  20c3bc:	cc                   	int3   
  20c3bd:	cc                   	int3   
  20c3be:	cc                   	int3   
  20c3bf:	cc                   	int3   

000000000020c3c0 <_ZN3log13RecordBuilder11file_static17h60389474d26d77e5E>:
    pub fn file_static(&mut self, file: Option<&'static str>) -> &mut RecordBuilder<'a> {
  20c3c0:	48 83 ec 38          	sub    $0x38,%rsp
  20c3c4:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c3c8:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  20c3cd:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  20c3d2:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
        self.record.file = file.map(MaybeStaticStr::Static);
  20c3d7:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  20c3dc:	e8 6f 09 00 00       	callq  20cd50 <_ZN4core6option15Option$LT$T$GT$3map17hb5a6e0461aae5bdfE>
  20c3e1:	48 8b 04 24          	mov    (%rsp),%rax
  20c3e5:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  20c3ea:	48 89 48 60          	mov    %rcx,0x60(%rax)
  20c3ee:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20c3f3:	48 89 48 68          	mov    %rcx,0x68(%rax)
  20c3f7:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  20c3fc:	48 89 48 70          	mov    %rcx,0x70(%rax)
    }
  20c400:	48 83 c4 38          	add    $0x38,%rsp
  20c404:	c3                   	retq   
  20c405:	cc                   	int3   
  20c406:	cc                   	int3   
  20c407:	cc                   	int3   
  20c408:	cc                   	int3   
  20c409:	cc                   	int3   
  20c40a:	cc                   	int3   
  20c40b:	cc                   	int3   
  20c40c:	cc                   	int3   
  20c40d:	cc                   	int3   
  20c40e:	cc                   	int3   
  20c40f:	cc                   	int3   

000000000020c410 <_ZN3log13RecordBuilder4line17h0be5a6fb4e296bd0E>:
    pub fn line(&mut self, line: Option<u32>) -> &mut RecordBuilder<'a> {
  20c410:	48 83 ec 10          	sub    $0x10,%rsp
  20c414:	48 89 f8             	mov    %rdi,%rax
  20c417:	48 89 04 24          	mov    %rax,(%rsp)
  20c41b:	89 74 24 08          	mov    %esi,0x8(%rsp)
  20c41f:	89 54 24 0c          	mov    %edx,0xc(%rsp)
        self.record.line = line;
  20c423:	89 70 78             	mov    %esi,0x78(%rax)
  20c426:	89 50 7c             	mov    %edx,0x7c(%rax)
    }
  20c429:	48 83 c4 10          	add    $0x10,%rsp
  20c42d:	c3                   	retq   
  20c42e:	cc                   	int3   
  20c42f:	cc                   	int3   

000000000020c430 <_ZN3log13RecordBuilder5build17hf5ee0b9e001b8f8aE>:
    pub fn build(&self) -> Record<'a> {
  20c430:	48 83 ec 18          	sub    $0x18,%rsp
  20c434:	48 89 f8             	mov    %rdi,%rax
  20c437:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20c43c:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
        self.record.clone()
  20c441:	e8 3a 05 00 00       	callq  20c980 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hfd38e2f26efc21d5E>
  20c446:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  20c44b:	48 83 c4 18          	add    $0x18,%rsp
  20c44f:	c3                   	retq   

000000000020c450 <_ZN3log8Metadata7builder17h99a7ee957b8c624fE>:
    pub fn builder() -> MetadataBuilder<'a> {
  20c450:	50                   	push   %rax
  20c451:	48 89 f8             	mov    %rdi,%rax
  20c454:	48 89 04 24          	mov    %rax,(%rsp)
        MetadataBuilder::new()
  20c458:	e8 13 00 00 00       	callq  20c470 <_ZN3log15MetadataBuilder3new17h752bdcb599a575a5E>
  20c45d:	48 8b 04 24          	mov    (%rsp),%rax
    }
  20c461:	59                   	pop    %rcx
  20c462:	c3                   	retq   
  20c463:	cc                   	int3   
  20c464:	cc                   	int3   
  20c465:	cc                   	int3   
  20c466:	cc                   	int3   
  20c467:	cc                   	int3   
  20c468:	cc                   	int3   
  20c469:	cc                   	int3   
  20c46a:	cc                   	int3   
  20c46b:	cc                   	int3   
  20c46c:	cc                   	int3   
  20c46d:	cc                   	int3   
  20c46e:	cc                   	int3   
  20c46f:	cc                   	int3   

000000000020c470 <_ZN3log15MetadataBuilder3new17h752bdcb599a575a5E>:
    pub fn new() -> MetadataBuilder<'a> {
  20c470:	48 83 ec 18          	sub    $0x18,%rsp
  20c474:	48 89 f8             	mov    %rdi,%rax
            metadata: Metadata {
  20c477:	48 c7 04 24 03 00 00 	movq   $0x3,(%rsp)
  20c47e:	00 
  20c47f:	48 8d 0d ea 4b ff ff 	lea    -0xb416(%rip),%rcx        # 201070 <_ZN9r3_kernel3cpu10exceptions3IDT17he44583177f5a1f5fE+0xe9>
  20c486:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  20c48b:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  20c492:	00 00 
        MetadataBuilder {
  20c494:	48 8b 0c 24          	mov    (%rsp),%rcx
  20c498:	48 89 0f             	mov    %rcx,(%rdi)
  20c49b:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  20c4a0:	48 89 4f 08          	mov    %rcx,0x8(%rdi)
  20c4a4:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20c4a9:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
    }
  20c4ad:	48 83 c4 18          	add    $0x18,%rsp
  20c4b1:	c3                   	retq   
  20c4b2:	cc                   	int3   
  20c4b3:	cc                   	int3   
  20c4b4:	cc                   	int3   
  20c4b5:	cc                   	int3   
  20c4b6:	cc                   	int3   
  20c4b7:	cc                   	int3   
  20c4b8:	cc                   	int3   
  20c4b9:	cc                   	int3   
  20c4ba:	cc                   	int3   
  20c4bb:	cc                   	int3   
  20c4bc:	cc                   	int3   
  20c4bd:	cc                   	int3   
  20c4be:	cc                   	int3   
  20c4bf:	cc                   	int3   

000000000020c4c0 <_ZN3log15MetadataBuilder5build17hda1f130a916cf6d1E>:
    pub fn build(&self) -> Metadata<'a> {
  20c4c0:	48 83 ec 18          	sub    $0x18,%rsp
  20c4c4:	48 89 f8             	mov    %rdi,%rax
  20c4c7:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20c4cc:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
        self.metadata.clone()
  20c4d1:	e8 0a 06 00 00       	callq  20cae0 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h97158d329926fdb9E>
  20c4d6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  20c4db:	48 83 c4 18          	add    $0x18,%rsp
  20c4df:	c3                   	retq   

000000000020c4e0 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h56ee4da12616bf71E>:
    fn enabled(&self, _: &Metadata) -> bool {
  20c4e0:	48 83 ec 10          	sub    $0x10,%rsp
  20c4e4:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c4e8:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    }
  20c4ed:	31 c0                	xor    %eax,%eax
  20c4ef:	24 01                	and    $0x1,%al
  20c4f1:	0f b6 c0             	movzbl %al,%eax
  20c4f4:	48 83 c4 10          	add    $0x10,%rsp
  20c4f8:	c3                   	retq   
  20c4f9:	cc                   	int3   
  20c4fa:	cc                   	int3   
  20c4fb:	cc                   	int3   
  20c4fc:	cc                   	int3   
  20c4fd:	cc                   	int3   
  20c4fe:	cc                   	int3   
  20c4ff:	cc                   	int3   

000000000020c500 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17h2de79af78304e972E>:
    fn log(&self, _: &Record) {}
  20c500:	48 83 ec 10          	sub    $0x10,%rsp
  20c504:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c508:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  20c50d:	48 83 c4 10          	add    $0x10,%rsp
  20c511:	c3                   	retq   
  20c512:	cc                   	int3   
  20c513:	cc                   	int3   
  20c514:	cc                   	int3   
  20c515:	cc                   	int3   
  20c516:	cc                   	int3   
  20c517:	cc                   	int3   
  20c518:	cc                   	int3   
  20c519:	cc                   	int3   
  20c51a:	cc                   	int3   
  20c51b:	cc                   	int3   
  20c51c:	cc                   	int3   
  20c51d:	cc                   	int3   
  20c51e:	cc                   	int3   
  20c51f:	cc                   	int3   

000000000020c520 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h85912e3b490f95beE>:
    fn flush(&self) {}
  20c520:	50                   	push   %rax
  20c521:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c525:	58                   	pop    %rax
  20c526:	c3                   	retq   
  20c527:	cc                   	int3   
  20c528:	cc                   	int3   
  20c529:	cc                   	int3   
  20c52a:	cc                   	int3   
  20c52b:	cc                   	int3   
  20c52c:	cc                   	int3   
  20c52d:	cc                   	int3   
  20c52e:	cc                   	int3   
  20c52f:	cc                   	int3   

000000000020c530 <_ZN3log10set_logger17ha1c2327ac82037ebE>:
/// # }
/// ```
///
/// [`set_logger_racy`]: fn.set_logger_racy.html
#[cfg(atomic_cas)]
pub fn set_logger(logger: &'static dyn Log) -> Result<(), SetLoggerError> {
  20c530:	48 83 ec 28          	sub    $0x28,%rsp
  20c534:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20c539:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
    set_logger_inner(|| logger)
  20c53e:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
  20c543:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20c548:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  20c54d:	e8 2e 00 00 00       	callq  20c580 <_ZN3log16set_logger_inner17haef7a3c86b15c794E>
  20c552:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20c556:	8a 44 24 0f          	mov    0xf(%rsp),%al
}
  20c55a:	24 01                	and    $0x1,%al
  20c55c:	0f b6 c0             	movzbl %al,%eax
  20c55f:	48 83 c4 28          	add    $0x28,%rsp
  20c563:	c3                   	retq   
  20c564:	cc                   	int3   
  20c565:	cc                   	int3   
  20c566:	cc                   	int3   
  20c567:	cc                   	int3   
  20c568:	cc                   	int3   
  20c569:	cc                   	int3   
  20c56a:	cc                   	int3   
  20c56b:	cc                   	int3   
  20c56c:	cc                   	int3   
  20c56d:	cc                   	int3   
  20c56e:	cc                   	int3   
  20c56f:	cc                   	int3   

000000000020c570 <_ZN3log10set_logger28_$u7b$$u7b$closure$u7d$$u7d$17h6b23b2e882e62bbeE>:
    set_logger_inner(|| logger)
  20c570:	50                   	push   %rax
  20c571:	48 89 3c 24          	mov    %rdi,(%rsp)
  20c575:	48 8b 07             	mov    (%rdi),%rax
  20c578:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  20c57c:	59                   	pop    %rcx
  20c57d:	c3                   	retq   
  20c57e:	cc                   	int3   
  20c57f:	cc                   	int3   

000000000020c580 <_ZN3log16set_logger_inner17haef7a3c86b15c794E>:

#[cfg(atomic_cas)]
fn set_logger_inner<F>(make_logger: F) -> Result<(), SetLoggerError>
  20c580:	48 83 ec 68          	sub    $0x68,%rsp
  20c584:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  20c589:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
where
    F: FnOnce() -> &'static dyn Log,
{
    let old_state = match STATE.compare_exchange(
  20c58e:	c6 44 24 57 00       	movb   $0x0,0x57(%rsp)
  20c593:	c6 44 24 57 01       	movb   $0x1,0x57(%rsp)
        UNINITIALIZED,
        INITIALIZING,
        Ordering::SeqCst,
  20c598:	c6 44 24 46 04       	movb   $0x4,0x46(%rsp)
        Ordering::SeqCst,
  20c59d:	c6 44 24 47 04       	movb   $0x4,0x47(%rsp)
    let old_state = match STATE.compare_exchange(
  20c5a2:	44 0f b6 44 24 47    	movzbl 0x47(%rsp),%r8d
  20c5a8:	0f b6 4c 24 46       	movzbl 0x46(%rsp),%ecx
  20c5ad:	48 8d 3d 2c e7 00 00 	lea    0xe72c(%rip),%rdi        # 21ace0 <_ZN3log5STATE17hb7f15395e9efabeeE>
  20c5b4:	31 c0                	xor    %eax,%eax
  20c5b6:	89 c6                	mov    %eax,%esi
  20c5b8:	ba 01 00 00 00       	mov    $0x1,%edx
  20c5bd:	e8 1e 09 00 00       	callq  20cee0 <_ZN4core4sync6atomic11AtomicUsize16compare_exchange17he87cbcb88a12dc83E>
  20c5c2:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  20c5c7:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20c5cc:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  20c5d1:	48 85 c0             	test   %rax,%rax
  20c5d4:	74 06                	je     20c5dc <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0x5c>
  20c5d6:	eb 00                	jmp    20c5d8 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0x58>
  20c5d8:	eb 0e                	jmp    20c5e8 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0x68>
  20c5da:	0f 0b                	ud2    
    ) {
        Ok(s) | Err(s) => s,
  20c5dc:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20c5e1:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    let old_state = match STATE.compare_exchange(
  20c5e6:	eb 0a                	jmp    20c5f2 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0x72>
        Ok(s) | Err(s) => s,
  20c5e8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20c5ed:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20c5f2:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  20c5f7:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20c5fc:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
    };
    match old_state {
  20c601:	48 85 c0             	test   %rax,%rax
  20c604:	74 16                	je     20c61c <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0x9c>
  20c606:	eb 00                	jmp    20c608 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0x88>
  20c608:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20c60d:	48 83 e8 01          	sub    $0x1,%rax
  20c611:	74 24                	je     20c637 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0xb7>
  20c613:	eb 00                	jmp    20c615 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0x95>
            while STATE.load(Ordering::SeqCst) == INITIALIZING {
                std::sync::atomic::spin_loop_hint();
            }
            Err(SetLoggerError(()))
        }
        _ => Err(SetLoggerError(())),
  20c615:	c6 44 24 2f 01       	movb   $0x1,0x2f(%rsp)
  20c61a:	eb 37                	jmp    20c653 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0xd3>
  20c61c:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
                LOGGER = make_logger();
  20c621:	c6 44 24 57 00       	movb   $0x0,0x57(%rsp)
  20c626:	e8 45 ff ff ff       	callq  20c570 <_ZN3log10set_logger28_$u7b$$u7b$closure$u7d$$u7d$17h6b23b2e882e62bbeE>
  20c62b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20c630:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  20c635:	eb 3d                	jmp    20c674 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0xf4>
            while STATE.load(Ordering::SeqCst) == INITIALIZING {
  20c637:	c6 44 24 56 04       	movb   $0x4,0x56(%rsp)
  20c63c:	48 8d 3d 9d e6 00 00 	lea    0xe69d(%rip),%rdi        # 21ace0 <_ZN3log5STATE17hb7f15395e9efabeeE>
  20c643:	0f b6 74 24 56       	movzbl 0x56(%rsp),%esi
  20c648:	e8 13 09 00 00       	callq  20cf60 <_ZN4core4sync6atomic11AtomicUsize4load17h398adaff26cbfc12E>
  20c64d:	48 89 04 24          	mov    %rax,(%rsp)
  20c651:	eb 09                	jmp    20c65c <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0xdc>
    }
}
  20c653:	f6 44 24 57 01       	testb  $0x1,0x57(%rsp)
  20c658:	75 62                	jne    20c6bc <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0x13c>
  20c65a:	eb 52                	jmp    20c6ae <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0x12e>
  20c65c:	48 8b 04 24          	mov    (%rsp),%rax
            while STATE.load(Ordering::SeqCst) == INITIALIZING {
  20c660:	48 83 f8 01          	cmp    $0x1,%rax
  20c664:	74 07                	je     20c66d <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0xed>
            Err(SetLoggerError(()))
  20c666:	c6 44 24 2f 01       	movb   $0x1,0x2f(%rsp)
  20c66b:	eb e6                	jmp    20c653 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0xd3>
                std::sync::atomic::spin_loop_hint();
  20c66d:	e8 ce 0a 00 00       	callq  20d140 <_ZN4core4sync6atomic14spin_loop_hint17h742933097364dcc1E>
  20c672:	eb c3                	jmp    20c637 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0xb7>
  20c674:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20c679:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
                LOGGER = make_logger();
  20c67e:	48 89 0d 13 85 00 00 	mov    %rcx,0x8513(%rip)        # 214b98 <_ZN3log6LOGGER17h679c6780ecb58a85E>
  20c685:	48 89 05 14 85 00 00 	mov    %rax,0x8514(%rip)        # 214ba0 <_ZN3log6LOGGER17h679c6780ecb58a85E+0x8>
            STATE.store(INITIALIZED, Ordering::SeqCst);
  20c68c:	c6 44 24 55 04       	movb   $0x4,0x55(%rsp)
  20c691:	48 8d 3d 48 e6 00 00 	lea    0xe648(%rip),%rdi        # 21ace0 <_ZN3log5STATE17hb7f15395e9efabeeE>
  20c698:	be 02 00 00 00       	mov    $0x2,%esi
  20c69d:	0f b6 54 24 55       	movzbl 0x55(%rsp),%edx
  20c6a2:	e8 f9 08 00 00       	callq  20cfa0 <_ZN4core4sync6atomic11AtomicUsize5store17hb6254738bd03a8d4E>
            Ok(())
  20c6a7:	c6 44 24 2f 00       	movb   $0x0,0x2f(%rsp)
  20c6ac:	eb a5                	jmp    20c653 <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0xd3>
}
  20c6ae:	8a 44 24 2f          	mov    0x2f(%rsp),%al
  20c6b2:	24 01                	and    $0x1,%al
  20c6b4:	0f b6 c0             	movzbl %al,%eax
  20c6b7:	48 83 c4 68          	add    $0x68,%rsp
  20c6bb:	c3                   	retq   
  20c6bc:	eb f0                	jmp    20c6ae <_ZN3log16set_logger_inner17haef7a3c86b15c794E+0x12e>
  20c6be:	cc                   	int3   
  20c6bf:	cc                   	int3   

000000000020c6c0 <_ZN3log6logger17hb619d971bb0802d6E>:
impl error::Error for ParseLevelError {}

/// Returns a reference to the logger.
///
/// If a logger has not been set, a no-op implementation is returned.
pub fn logger() -> &'static dyn Log {
  20c6c0:	48 83 ec 28          	sub    $0x28,%rsp
    if STATE.load(Ordering::SeqCst) != INITIALIZED {
  20c6c4:	c6 44 24 27 04       	movb   $0x4,0x27(%rsp)
  20c6c9:	48 8d 3d 10 e6 00 00 	lea    0xe610(%rip),%rdi        # 21ace0 <_ZN3log5STATE17hb7f15395e9efabeeE>
  20c6d0:	0f b6 74 24 27       	movzbl 0x27(%rsp),%esi
  20c6d5:	e8 86 08 00 00       	callq  20cf60 <_ZN4core4sync6atomic11AtomicUsize4load17h398adaff26cbfc12E>
  20c6da:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20c6df:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20c6e4:	48 83 f8 02          	cmp    $0x2,%rax
  20c6e8:	75 1a                	jne    20c704 <_ZN3log6logger17hb619d971bb0802d6E+0x44>
        static NOP: NopLogger = NopLogger;
        &NOP
    } else {
        unsafe { LOGGER }
  20c6ea:	48 8b 0d a7 84 00 00 	mov    0x84a7(%rip),%rcx        # 214b98 <_ZN3log6LOGGER17h679c6780ecb58a85E>
  20c6f1:	48 8b 05 a8 84 00 00 	mov    0x84a8(%rip),%rax        # 214ba0 <_ZN3log6LOGGER17h679c6780ecb58a85E+0x8>
  20c6f8:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  20c6fd:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    if STATE.load(Ordering::SeqCst) != INITIALIZED {
  20c702:	eb 18                	jmp    20c71c <_ZN3log6logger17hb619d971bb0802d6E+0x5c>
        &NOP
  20c704:	48 8d 05 e8 49 ff ff 	lea    -0xb618(%rip),%rax        # 2010f3 <_ZN3log6logger3NOP17ha8b888e78aa907e8E>
  20c70b:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20c710:	48 8d 05 19 6e 00 00 	lea    0x6e19(%rip),%rax        # 213530 <memset+0x1c50>
  20c717:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    if STATE.load(Ordering::SeqCst) != INITIALIZED {
  20c71c:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20c721:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
    }
}
  20c726:	48 83 c4 28          	add    $0x28,%rsp
  20c72a:	c3                   	retq   
  20c72b:	cc                   	int3   
  20c72c:	cc                   	int3   
  20c72d:	cc                   	int3   
  20c72e:	cc                   	int3   
  20c72f:	cc                   	int3   

000000000020c730 <_ZN3log17__private_api_log17ha4b636ffcba62793E>:

// WARNING: this is not part of the crate's public API and is subject to change at any time
#[doc(hidden)]
pub fn __private_api_log(
  20c730:	48 81 ec 38 02 00 00 	sub    $0x238,%rsp
  20c737:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  20c73c:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  20c741:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  20c746:	48 89 b4 24 f0 01 00 	mov    %rsi,0x1f0(%rsp)
  20c74d:	00 
  20c74e:	48 89 94 24 f8 01 00 	mov    %rdx,0x1f8(%rsp)
  20c755:	00 
    args: fmt::Arguments,
    level: Level,
    &(target, module_path, file, line): &(&str, &'static str, &'static str, u32),
  20c756:	48 8b 0a             	mov    (%rdx),%rcx
  20c759:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  20c75e:	48 8b 42 08          	mov    0x8(%rdx),%rax
  20c762:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  20c767:	48 89 8c 24 00 02 00 	mov    %rcx,0x200(%rsp)
  20c76e:	00 
  20c76f:	48 89 84 24 08 02 00 	mov    %rax,0x208(%rsp)
  20c776:	00 
  20c777:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  20c77b:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  20c780:	48 8b 42 18          	mov    0x18(%rdx),%rax
  20c784:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  20c789:	48 89 8c 24 10 02 00 	mov    %rcx,0x210(%rsp)
  20c790:	00 
  20c791:	48 89 84 24 18 02 00 	mov    %rax,0x218(%rsp)
  20c798:	00 
  20c799:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
  20c79d:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
  20c7a2:	48 8b 42 28          	mov    0x28(%rdx),%rax
  20c7a6:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  20c7ab:	48 89 8c 24 20 02 00 	mov    %rcx,0x220(%rsp)
  20c7b2:	00 
  20c7b3:	48 89 84 24 28 02 00 	mov    %rax,0x228(%rsp)
  20c7ba:	00 
  20c7bb:	8b 42 30             	mov    0x30(%rdx),%eax
  20c7be:	89 84 24 84 00 00 00 	mov    %eax,0x84(%rsp)
  20c7c5:	89 84 24 34 02 00 00 	mov    %eax,0x234(%rsp)
) {
    logger().log(
  20c7cc:	e8 ef fe ff ff       	callq  20c6c0 <_ZN3log6logger17hb619d971bb0802d6E>
  20c7d1:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  20c7d8:	00 
  20c7d9:	48 89 94 24 90 00 00 	mov    %rdx,0x90(%rsp)
  20c7e0:	00 
        &Record::builder()
  20c7e1:	48 8d bc 24 18 01 00 	lea    0x118(%rsp),%rdi
  20c7e8:	00 
  20c7e9:	e8 82 f9 ff ff       	callq  20c170 <_ZN3log6Record7builder17h05e0ba0ce2be0210E>
  20c7ee:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
            .args(args)
  20c7f3:	48 8d bc 24 98 01 00 	lea    0x198(%rsp),%rdi
  20c7fa:	00 
  20c7fb:	ba 30 00 00 00       	mov    $0x30,%edx
  20c800:	e8 bb 50 00 00       	callq  2118c0 <memcpy>
        &Record::builder()
  20c805:	48 8d bc 24 18 01 00 	lea    0x118(%rsp),%rdi
  20c80c:	00 
  20c80d:	48 8d b4 24 98 01 00 	lea    0x198(%rsp),%rsi
  20c814:	00 
  20c815:	e8 c6 fa ff ff       	callq  20c2e0 <_ZN3log13RecordBuilder4args17h2b585606cd819bcfE>
  20c81a:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20c81f:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  20c824:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  20c829:	e8 f2 fa ff ff       	callq  20c320 <_ZN3log13RecordBuilder5level17h9d775aec8976dd36E>
  20c82e:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20c833:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  20c838:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  20c83d:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  20c842:	e8 f9 fa ff ff       	callq  20c340 <_ZN3log13RecordBuilder6target17h4a341ee0d2618e5aE>
  20c847:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20c84c:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  20c851:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  20c856:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
            .level(level)
            .target(target)
            .module_path_static(Some(module_path))
  20c85b:	48 89 8c 24 c8 01 00 	mov    %rcx,0x1c8(%rsp)
  20c862:	00 
  20c863:	48 89 84 24 d0 01 00 	mov    %rax,0x1d0(%rsp)
  20c86a:	00 
        &Record::builder()
  20c86b:	48 8b b4 24 c8 01 00 	mov    0x1c8(%rsp),%rsi
  20c872:	00 
  20c873:	48 8b 94 24 d0 01 00 	mov    0x1d0(%rsp),%rdx
  20c87a:	00 
  20c87b:	e8 f0 fa ff ff       	callq  20c370 <_ZN3log13RecordBuilder18module_path_static17hd557922a918e7806E>
  20c880:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20c885:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  20c88a:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  20c88f:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
            .file_static(Some(file))
  20c894:	48 89 8c 24 d8 01 00 	mov    %rcx,0x1d8(%rsp)
  20c89b:	00 
  20c89c:	48 89 84 24 e0 01 00 	mov    %rax,0x1e0(%rsp)
  20c8a3:	00 
        &Record::builder()
  20c8a4:	48 8b b4 24 d8 01 00 	mov    0x1d8(%rsp),%rsi
  20c8ab:	00 
  20c8ac:	48 8b 94 24 e0 01 00 	mov    0x1e0(%rsp),%rdx
  20c8b3:	00 
  20c8b4:	e8 07 fb ff ff       	callq  20c3c0 <_ZN3log13RecordBuilder11file_static17h60389474d26d77e5E>
  20c8b9:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20c8be:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  20c8c3:	8b 84 24 84 00 00 00 	mov    0x84(%rsp),%eax
            .line(Some(line))
  20c8ca:	89 84 24 ec 01 00 00 	mov    %eax,0x1ec(%rsp)
  20c8d1:	c7 84 24 e8 01 00 00 	movl   $0x1,0x1e8(%rsp)
  20c8d8:	01 00 00 00 
        &Record::builder()
  20c8dc:	8b b4 24 e8 01 00 00 	mov    0x1e8(%rsp),%esi
  20c8e3:	8b 94 24 ec 01 00 00 	mov    0x1ec(%rsp),%edx
  20c8ea:	e8 21 fb ff ff       	callq  20c410 <_ZN3log13RecordBuilder4line17h0be5a6fb4e296bd0E>
  20c8ef:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20c8f4:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  20c8f9:	48 8d bc 24 98 00 00 	lea    0x98(%rsp),%rdi
  20c900:	00 
  20c901:	e8 2a fb ff ff       	callq  20c430 <_ZN3log13RecordBuilder5build17hf5ee0b9e001b8f8aE>
  20c906:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  20c90d:	00 
  20c90e:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  20c915:	00 
    logger().log(
  20c916:	48 8d b4 24 98 00 00 	lea    0x98(%rsp),%rsi
  20c91d:	00 
  20c91e:	ff 50 28             	callq  *0x28(%rax)
            .build(),
    );
}
  20c921:	48 81 c4 38 02 00 00 	add    $0x238,%rsp
  20c928:	c3                   	retq   
  20c929:	cc                   	int3   
  20c92a:	cc                   	int3   
  20c92b:	cc                   	int3   
  20c92c:	cc                   	int3   
  20c92d:	cc                   	int3   
  20c92e:	cc                   	int3   
  20c92f:	cc                   	int3   

000000000020c930 <_ZN3log14MaybeStaticStr6Static17h2a13efcf84fb5a6eE>:
    Static(&'static str),
  20c930:	48 83 ec 10          	sub    $0x10,%rsp
  20c934:	48 89 f8             	mov    %rdi,%rax
  20c937:	48 89 34 24          	mov    %rsi,(%rsp)
  20c93b:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  20c940:	48 89 77 08          	mov    %rsi,0x8(%rdi)
  20c944:	48 89 57 10          	mov    %rdx,0x10(%rdi)
  20c948:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
  20c94f:	48 83 c4 10          	add    $0x10,%rsp
  20c953:	c3                   	retq   
  20c954:	cc                   	int3   
  20c955:	cc                   	int3   
  20c956:	cc                   	int3   
  20c957:	cc                   	int3   
  20c958:	cc                   	int3   
  20c959:	cc                   	int3   
  20c95a:	cc                   	int3   
  20c95b:	cc                   	int3   
  20c95c:	cc                   	int3   
  20c95d:	cc                   	int3   
  20c95e:	cc                   	int3   
  20c95f:	cc                   	int3   

000000000020c960 <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h99629025648234daE>:
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
  20c960:	50                   	push   %rax
  20c961:	48 89 f8             	mov    %rdi,%rax
  20c964:	48 89 34 24          	mov    %rsi,(%rsp)
  20c968:	48 8b 0e             	mov    (%rsi),%rcx
  20c96b:	48 89 0f             	mov    %rcx,(%rdi)
  20c96e:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
  20c972:	48 89 4f 08          	mov    %rcx,0x8(%rdi)
  20c976:	48 8b 4e 10          	mov    0x10(%rsi),%rcx
  20c97a:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
  20c97e:	59                   	pop    %rcx
  20c97f:	c3                   	retq   

000000000020c980 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hfd38e2f26efc21d5E>:
#[derive(Clone, Debug)]
  20c980:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
  20c987:	48 89 f0             	mov    %rsi,%rax
  20c98a:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20c98f:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20c994:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  20c99b:	00 
    metadata: Metadata<'a>,
  20c99c:	48 89 c6             	mov    %rax,%rsi
  20c99f:	48 89 b4 24 c0 00 00 	mov    %rsi,0xc0(%rsp)
  20c9a6:	00 
    args: fmt::Arguments<'a>,
  20c9a7:	48 89 c1             	mov    %rax,%rcx
  20c9aa:	48 83 c1 18          	add    $0x18,%rcx
  20c9ae:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  20c9b3:	48 89 8c 24 c8 00 00 	mov    %rcx,0xc8(%rsp)
  20c9ba:	00 
    module_path: Option<MaybeStaticStr<'a>>,
  20c9bb:	48 89 c1             	mov    %rax,%rcx
  20c9be:	48 83 c1 48          	add    $0x48,%rcx
  20c9c2:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  20c9c7:	48 89 8c 24 d0 00 00 	mov    %rcx,0xd0(%rsp)
  20c9ce:	00 
    file: Option<MaybeStaticStr<'a>>,
  20c9cf:	48 89 c1             	mov    %rax,%rcx
  20c9d2:	48 83 c1 60          	add    $0x60,%rcx
  20c9d6:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  20c9db:	48 89 8c 24 d8 00 00 	mov    %rcx,0xd8(%rsp)
  20c9e2:	00 
    line: Option<u32>,
  20c9e3:	48 83 c0 78          	add    $0x78,%rax
  20c9e7:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20c9ec:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  20c9f3:	00 
    metadata: Metadata<'a>,
  20c9f4:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  20c9f9:	e8 e2 00 00 00       	callq  20cae0 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h97158d329926fdb9E>
  20c9fe:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    args: fmt::Arguments<'a>,
  20ca03:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  20ca08:	e8 63 0c 00 00       	callq  20d670 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h2fdb52da88f27f2eE>
  20ca0d:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
    module_path: Option<MaybeStaticStr<'a>>,
  20ca12:	48 8d bc 24 88 00 00 	lea    0x88(%rsp),%rdi
  20ca19:	00 
  20ca1a:	e8 41 04 00 00       	callq  20ce60 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd254bb6399fbdd6fE>
  20ca1f:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
    file: Option<MaybeStaticStr<'a>>,
  20ca24:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  20ca2b:	00 
  20ca2c:	e8 2f 04 00 00       	callq  20ce60 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd254bb6399fbdd6fE>
  20ca31:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
    line: Option<u32>,
  20ca36:	e8 c5 03 00 00       	callq  20ce00 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h624f3ce99c4c40daE>
  20ca3b:	89 44 24 08          	mov    %eax,0x8(%rsp)
  20ca3f:	89 54 24 0c          	mov    %edx,0xc(%rsp)
  20ca43:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
#[derive(Clone, Debug)]
  20ca48:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20ca4d:	48 89 07             	mov    %rax,(%rdi)
  20ca50:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  20ca55:	48 89 47 08          	mov    %rax,0x8(%rdi)
  20ca59:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  20ca5e:	48 89 47 10          	mov    %rax,0x10(%rdi)
  20ca62:	48 83 c7 18          	add    $0x18,%rdi
  20ca66:	48 8d 74 24 58       	lea    0x58(%rsp),%rsi
  20ca6b:	ba 30 00 00 00       	mov    $0x30,%edx
  20ca70:	e8 4b 4e 00 00       	callq  2118c0 <memcpy>
  20ca75:	8b 74 24 08          	mov    0x8(%rsp),%esi
  20ca79:	8b 54 24 0c          	mov    0xc(%rsp),%edx
  20ca7d:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20ca82:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20ca87:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  20ca8e:	00 
  20ca8f:	48 89 79 48          	mov    %rdi,0x48(%rcx)
  20ca93:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  20ca9a:	00 
  20ca9b:	48 89 79 50          	mov    %rdi,0x50(%rcx)
  20ca9f:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
  20caa6:	00 
  20caa7:	48 89 79 58          	mov    %rdi,0x58(%rcx)
  20caab:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
  20cab2:	00 
  20cab3:	48 89 79 60          	mov    %rdi,0x60(%rcx)
  20cab7:	48 8b bc 24 a8 00 00 	mov    0xa8(%rsp),%rdi
  20cabe:	00 
  20cabf:	48 89 79 68          	mov    %rdi,0x68(%rcx)
  20cac3:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
  20caca:	00 
  20cacb:	48 89 79 70          	mov    %rdi,0x70(%rcx)
  20cacf:	89 71 78             	mov    %esi,0x78(%rcx)
  20cad2:	89 51 7c             	mov    %edx,0x7c(%rcx)
  20cad5:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
  20cadc:	c3                   	retq   
  20cadd:	cc                   	int3   
  20cade:	cc                   	int3   
  20cadf:	cc                   	int3   

000000000020cae0 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h97158d329926fdb9E>:
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
  20cae0:	48 83 ec 48          	sub    $0x48,%rsp
  20cae4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20cae9:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20caee:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
    level: Level,
  20caf3:	48 89 f7             	mov    %rsi,%rdi
  20caf6:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
    target: &'a str,
  20cafb:	48 83 c6 08          	add    $0x8,%rsi
  20caff:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  20cb04:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
    level: Level,
  20cb09:	e8 a2 f5 ff ff       	callq  20c0b0 <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17h64195f908f525ecbE>
  20cb0e:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20cb13:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
    target: &'a str,
  20cb18:	e8 13 0c 00 00       	callq  20d730 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h112bbff21e0b9246E>
  20cb1d:	48 89 04 24          	mov    %rax,(%rsp)
  20cb21:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  20cb26:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20cb2b:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20cb30:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  20cb35:	48 8b 34 24          	mov    (%rsp),%rsi
  20cb39:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
  20cb3e:	48 89 39             	mov    %rdi,(%rcx)
  20cb41:	48 89 71 08          	mov    %rsi,0x8(%rcx)
  20cb45:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  20cb49:	48 83 c4 48          	add    $0x48,%rsp
  20cb4d:	c3                   	retq   
  20cb4e:	cc                   	int3   
  20cb4f:	cc                   	int3   

000000000020cb50 <_ZN4core4iter6traits8iterator8Iterator6copied17hc9ec77e1a1303f3eE>:
    ///
    /// assert_eq!(v_copied, vec![1, 2, 3]);
    /// assert_eq!(v_map, vec![1, 2, 3]);
    /// ```
    #[stable(feature = "iter_copied", since = "1.36.0")]
    fn copied<'a, T: 'a>(self) -> Copied<Self>
  20cb50:	48 83 ec 28          	sub    $0x28,%rsp
  20cb54:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20cb59:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    where
        Self: Sized + Iterator<Item = &'a T>,
        T: Copy,
    {
        Copied::new(self)
  20cb5e:	e8 1d 01 00 00       	callq  20cc80 <_ZN4core4iter8adapters6copied15Copied$LT$I$GT$3new17h37c3c3fdc2f5ac39E>
  20cb63:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20cb68:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  20cb6d:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  20cb72:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  20cb77:	48 83 c4 28          	add    $0x28,%rsp
  20cb7b:	c3                   	retq   
  20cb7c:	cc                   	int3   
  20cb7d:	cc                   	int3   
  20cb7e:	cc                   	int3   
  20cb7f:	cc                   	int3   

000000000020cb80 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h08383ff7264b0d64E>:
#[stable(feature = "rust1", since = "1.0.0")]
unsafe impl<T: Sync> Send for Iter<'_, T> {}

impl<'a, T> Iter<'a, T> {
    #[inline]
    pub(super) fn new(slice: &'a [T]) -> Self {
  20cb80:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  20cb87:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  20cb8c:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  20cb91:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
        let ptr = slice.as_ptr();
  20cb96:	e8 45 01 00 00       	callq  20cce0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h1efe546be252147fE>
  20cb9b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20cba0:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  20cba5:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
        // SAFETY: Similar to `IterMut::new`.
        unsafe {
            assume(!ptr.is_null());
  20cbaa:	e8 c1 0b 00 00       	callq  20d770 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h1bffe517e0fb2d88E>

            let end = if mem::size_of::<T>() == 0 {
  20cbaf:	eb 00                	jmp    20cbb1 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h08383ff7264b0d64E+0x31>
  20cbb1:	b8 01 00 00 00       	mov    $0x1,%eax
  20cbb6:	48 83 f8 00          	cmp    $0x0,%rax
  20cbba:	75 32                	jne    20cbee <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h08383ff7264b0d64E+0x6e>
  20cbbc:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  20cbc1:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20cbc6:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  20cbcb:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  20cbd0:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  20cbd5:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
    pub const fn wrapping_offset(self, count: isize) -> *const T
    where
        T: Sized,
    {
        // SAFETY: the `arith_offset` intrinsic has no prerequisites to be called.
        unsafe { intrinsics::arith_offset(self, count) }
  20cbda:	48 01 c8             	add    %rcx,%rax
  20cbdd:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  20cbe2:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  20cbe7:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
                (ptr as *const u8).wrapping_add(slice.len()) as *const T
  20cbec:	eb 55                	jmp    20cc43 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h08383ff7264b0d64E+0xc3>
  20cbee:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  20cbf3:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20cbf8:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  20cbff:	00 
  20cc00:	48 89 8c 24 88 00 00 	mov    %rcx,0x88(%rsp)
  20cc07:	00 
  20cc08:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  20cc0f:	00 
  20cc10:	48 89 8c 24 98 00 00 	mov    %rcx,0x98(%rsp)
  20cc17:	00 
        unsafe { intrinsics::offset(self, count) }
  20cc18:	48 01 c8             	add    %rcx,%rax
  20cc1b:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  20cc22:	00 
  20cc23:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  20cc2a:	00 
            } else {
                ptr.add(slice.len())
  20cc2b:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            let end = if mem::size_of::<T>() == 0 {
  20cc30:	eb 00                	jmp    20cc32 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h08383ff7264b0d64E+0xb2>
  20cc32:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
            };

            Self { ptr: NonNull::new_unchecked(ptr as *mut T), end, _marker: PhantomData }
  20cc37:	e8 c4 00 00 00       	callq  20cd00 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h528848c04cfca7adE>
  20cc3c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20cc41:	eb 0c                	jmp    20cc4f <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h08383ff7264b0d64E+0xcf>
  20cc43:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
                (ptr as *const u8).wrapping_add(slice.len()) as *const T
  20cc48:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
            let end = if mem::size_of::<T>() == 0 {
  20cc4d:	eb e3                	jmp    20cc32 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h08383ff7264b0d64E+0xb2>
  20cc4f:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Self { ptr: NonNull::new_unchecked(ptr as *mut T), end, _marker: PhantomData }
  20cc54:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20cc59:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  20cc5e:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
        }
    }
  20cc63:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  20cc68:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  20cc6d:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  20cc74:	c3                   	retq   
  20cc75:	cc                   	int3   
  20cc76:	cc                   	int3   
  20cc77:	cc                   	int3   
  20cc78:	cc                   	int3   
  20cc79:	cc                   	int3   
  20cc7a:	cc                   	int3   
  20cc7b:	cc                   	int3   
  20cc7c:	cc                   	int3   
  20cc7d:	cc                   	int3   
  20cc7e:	cc                   	int3   
  20cc7f:	cc                   	int3   

000000000020cc80 <_ZN4core4iter8adapters6copied15Copied$LT$I$GT$3new17h37c3c3fdc2f5ac39E>:
    pub(in crate::iter) fn new(it: I) -> Copied<I> {
  20cc80:	48 83 ec 20          	sub    $0x20,%rsp
  20cc84:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20cc89:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
        Copied { it }
  20cc8e:	48 89 3c 24          	mov    %rdi,(%rsp)
  20cc92:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    }
  20cc97:	48 8b 04 24          	mov    (%rsp),%rax
  20cc9b:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  20cca0:	48 83 c4 20          	add    $0x20,%rsp
  20cca4:	c3                   	retq   
  20cca5:	cc                   	int3   
  20cca6:	cc                   	int3   
  20cca7:	cc                   	int3   
  20cca8:	cc                   	int3   
  20cca9:	cc                   	int3   
  20ccaa:	cc                   	int3   
  20ccab:	cc                   	int3   
  20ccac:	cc                   	int3   
  20ccad:	cc                   	int3   
  20ccae:	cc                   	int3   
  20ccaf:	cc                   	int3   

000000000020ccb0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17he41657a4f47f5768E>:
    /// assert_eq!(iterator.next(), Some(&4));
    /// assert_eq!(iterator.next(), None);
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[inline]
    pub fn iter(&self) -> Iter<'_, T> {
  20ccb0:	48 83 ec 28          	sub    $0x28,%rsp
  20ccb4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20ccb9:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
        Iter::new(self)
  20ccbe:	e8 bd fe ff ff       	callq  20cb80 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h08383ff7264b0d64E>
  20ccc3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20ccc8:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  20cccd:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  20ccd2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  20ccd7:	48 83 c4 28          	add    $0x28,%rsp
  20ccdb:	c3                   	retq   
  20ccdc:	cc                   	int3   
  20ccdd:	cc                   	int3   
  20ccde:	cc                   	int3   
  20ccdf:	cc                   	int3   

000000000020cce0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h1efe546be252147fE>:
    pub const fn as_ptr(&self) -> *const T {
  20cce0:	48 83 ec 10          	sub    $0x10,%rsp
  20cce4:	48 89 f8             	mov    %rdi,%rax
  20cce7:	48 89 04 24          	mov    %rax,(%rsp)
  20cceb:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    }
  20ccf0:	48 83 c4 10          	add    $0x10,%rsp
  20ccf4:	c3                   	retq   
  20ccf5:	cc                   	int3   
  20ccf6:	cc                   	int3   
  20ccf7:	cc                   	int3   
  20ccf8:	cc                   	int3   
  20ccf9:	cc                   	int3   
  20ccfa:	cc                   	int3   
  20ccfb:	cc                   	int3   
  20ccfc:	cc                   	int3   
  20ccfd:	cc                   	int3   
  20ccfe:	cc                   	int3   
  20ccff:	cc                   	int3   

000000000020cd00 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h528848c04cfca7adE>:
    /// let ptr = unsafe { NonNull::<u32>::new_unchecked(std::ptr::null_mut()) };
    /// ```
    #[stable(feature = "nonnull", since = "1.25.0")]
    #[rustc_const_stable(feature = "const_nonnull_new_unchecked", since = "1.25.0")]
    #[inline]
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
  20cd00:	48 83 ec 10          	sub    $0x10,%rsp
  20cd04:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
        // SAFETY: the caller must guarantee that `ptr` is non-null.
        unsafe { NonNull { pointer: ptr as _ } }
  20cd09:	48 89 3c 24          	mov    %rdi,(%rsp)
    }
  20cd0d:	48 8b 04 24          	mov    (%rsp),%rax
  20cd11:	48 83 c4 10          	add    $0x10,%rsp
  20cd15:	c3                   	retq   
  20cd16:	cc                   	int3   
  20cd17:	cc                   	int3   
  20cd18:	cc                   	int3   
  20cd19:	cc                   	int3   
  20cd1a:	cc                   	int3   
  20cd1b:	cc                   	int3   
  20cd1c:	cc                   	int3   
  20cd1d:	cc                   	int3   
  20cd1e:	cc                   	int3   
  20cd1f:	cc                   	int3   

000000000020cd20 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h4370c7a5de12ae4cE>:
    /// ```
    #[stable(feature = "nonnull", since = "1.25.0")]
    #[rustc_const_stable(feature = "const_nonnull_as_ptr", since = "1.32.0")]
    #[must_use]
    #[inline]
    pub const fn as_ptr(self) -> *mut T {
  20cd20:	50                   	push   %rax
  20cd21:	48 89 f8             	mov    %rdi,%rax
  20cd24:	48 89 04 24          	mov    %rax,(%rsp)
        self.pointer as *mut T
    }
  20cd28:	59                   	pop    %rcx
  20cd29:	c3                   	retq   
  20cd2a:	cc                   	int3   
  20cd2b:	cc                   	int3   
  20cd2c:	cc                   	int3   
  20cd2d:	cc                   	int3   
  20cd2e:	cc                   	int3   
  20cd2f:	cc                   	int3   

000000000020cd30 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17heacc4301b8f7343dE>:
    fn into_iter(self) -> I {
  20cd30:	48 83 ec 10          	sub    $0x10,%rsp
  20cd34:	48 89 f2             	mov    %rsi,%rdx
  20cd37:	48 89 f8             	mov    %rdi,%rax
  20cd3a:	48 89 04 24          	mov    %rax,(%rsp)
  20cd3e:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    }
  20cd43:	48 83 c4 10          	add    $0x10,%rsp
  20cd47:	c3                   	retq   
  20cd48:	cc                   	int3   
  20cd49:	cc                   	int3   
  20cd4a:	cc                   	int3   
  20cd4b:	cc                   	int3   
  20cd4c:	cc                   	int3   
  20cd4d:	cc                   	int3   
  20cd4e:	cc                   	int3   
  20cd4f:	cc                   	int3   

000000000020cd50 <_ZN4core6option15Option$LT$T$GT$3map17hb5a6e0461aae5bdfE>:
    pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Option<U> {
  20cd50:	48 83 ec 68          	sub    $0x68,%rsp
  20cd54:	48 89 3c 24          	mov    %rdi,(%rsp)
  20cd58:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20cd5d:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20cd62:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
        match self {
  20cd67:	c6 44 24 4f 00       	movb   $0x0,0x4f(%rsp)
  20cd6c:	c6 44 24 4f 01       	movb   $0x1,0x4f(%rsp)
  20cd71:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20cd76:	48 85 c0             	test   %rax,%rax
  20cd79:	0f 95 c0             	setne  %al
  20cd7c:	0f b6 c0             	movzbl %al,%eax
  20cd7f:	74 06                	je     20cd87 <_ZN4core6option15Option$LT$T$GT$3map17hb5a6e0461aae5bdfE+0x37>
  20cd81:	eb 00                	jmp    20cd83 <_ZN4core6option15Option$LT$T$GT$3map17hb5a6e0461aae5bdfE+0x33>
  20cd83:	eb 0f                	jmp    20cd94 <_ZN4core6option15Option$LT$T$GT$3map17hb5a6e0461aae5bdfE+0x44>
  20cd85:	0f 0b                	ud2    
  20cd87:	48 8b 04 24          	mov    (%rsp),%rax
            None => None,
  20cd8b:	48 c7 00 02 00 00 00 	movq   $0x2,(%rax)
  20cd92:	eb 55                	jmp    20cde9 <_ZN4core6option15Option$LT$T$GT$3map17hb5a6e0461aae5bdfE+0x99>
            Some(x) => Some(f(x)),
  20cd94:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20cd99:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20cd9e:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  20cda3:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  20cda8:	c6 44 24 4f 00       	movb   $0x0,0x4f(%rsp)
  20cdad:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  20cdb2:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20cdb7:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  20cdbc:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  20cdc1:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  20cdc6:	e8 d5 08 00 00       	callq  20d6a0 <_ZN4core3ops8function6FnOnce9call_once17h0c90e123d39df5d5E>
  20cdcb:	48 8b 04 24          	mov    (%rsp),%rax
  20cdcf:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  20cdd4:	48 89 08             	mov    %rcx,(%rax)
  20cdd7:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  20cddc:	48 89 48 08          	mov    %rcx,0x8(%rax)
  20cde0:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  20cde5:	48 89 48 10          	mov    %rcx,0x10(%rax)
    }
  20cde9:	f6 44 24 4f 01       	testb  $0x1,0x4f(%rsp)
  20cdee:	75 0a                	jne    20cdfa <_ZN4core6option15Option$LT$T$GT$3map17hb5a6e0461aae5bdfE+0xaa>
  20cdf0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20cdf5:	48 83 c4 68          	add    $0x68,%rsp
  20cdf9:	c3                   	retq   
  20cdfa:	eb f4                	jmp    20cdf0 <_ZN4core6option15Option$LT$T$GT$3map17hb5a6e0461aae5bdfE+0xa0>
  20cdfc:	cc                   	int3   
  20cdfd:	cc                   	int3   
  20cdfe:	cc                   	int3   
  20cdff:	cc                   	int3   

000000000020ce00 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h624f3ce99c4c40daE>:
/////////////////////////////////////////////////////////////////////////////

#[stable(feature = "rust1", since = "1.0.0")]
impl<T: Clone> Clone for Option<T> {
    #[inline]
    fn clone(&self) -> Self {
  20ce00:	48 83 ec 28          	sub    $0x28,%rsp
  20ce04:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20ce09:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
        match self {
  20ce0e:	8b 07                	mov    (%rdi),%eax
  20ce10:	48 85 c0             	test   %rax,%rax
  20ce13:	74 06                	je     20ce1b <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h624f3ce99c4c40daE+0x1b>
  20ce15:	eb 00                	jmp    20ce17 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h624f3ce99c4c40daE+0x17>
  20ce17:	eb 0c                	jmp    20ce25 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h624f3ce99c4c40daE+0x25>
  20ce19:	0f 0b                	ud2    
            Some(x) => Some(x.clone()),
            None => None,
  20ce1b:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%rsp)
  20ce22:	00 
  20ce23:	eb 27                	jmp    20ce4c <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h624f3ce99c4c40daE+0x4c>
  20ce25:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
            Some(x) => Some(x.clone()),
  20ce2a:	48 83 c7 04          	add    $0x4,%rdi
  20ce2e:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  20ce33:	e8 e8 08 00 00       	callq  20d720 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17hbe92553b6f6f95caE>
  20ce38:	89 44 24 04          	mov    %eax,0x4(%rsp)
  20ce3c:	8b 44 24 04          	mov    0x4(%rsp),%eax
  20ce40:	89 44 24 14          	mov    %eax,0x14(%rsp)
  20ce44:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%rsp)
  20ce4b:	00 
        }
    }
  20ce4c:	8b 44 24 10          	mov    0x10(%rsp),%eax
  20ce50:	8b 54 24 14          	mov    0x14(%rsp),%edx
  20ce54:	48 83 c4 28          	add    $0x28,%rsp
  20ce58:	c3                   	retq   
  20ce59:	cc                   	int3   
  20ce5a:	cc                   	int3   
  20ce5b:	cc                   	int3   
  20ce5c:	cc                   	int3   
  20ce5d:	cc                   	int3   
  20ce5e:	cc                   	int3   
  20ce5f:	cc                   	int3   

000000000020ce60 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd254bb6399fbdd6fE>:
    fn clone(&self) -> Self {
  20ce60:	48 83 ec 48          	sub    $0x48,%rsp
  20ce64:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  20ce69:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20ce6e:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20ce73:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
        match self {
  20ce78:	48 8b 06             	mov    (%rsi),%rax
  20ce7b:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
  20ce7f:	0f 95 c0             	setne  %al
  20ce82:	0f b6 c0             	movzbl %al,%eax
  20ce85:	74 06                	je     20ce8d <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd254bb6399fbdd6fE+0x2d>
  20ce87:	eb 00                	jmp    20ce89 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd254bb6399fbdd6fE+0x29>
  20ce89:	eb 10                	jmp    20ce9b <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd254bb6399fbdd6fE+0x3b>
  20ce8b:	0f 0b                	ud2    
  20ce8d:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
            None => None,
  20ce92:	48 c7 00 02 00 00 00 	movq   $0x2,(%rax)
  20ce99:	eb 33                	jmp    20cece <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd254bb6399fbdd6fE+0x6e>
  20ce9b:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
            Some(x) => Some(x.clone()),
  20cea0:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  20cea5:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  20ceaa:	e8 b1 fa ff ff       	callq  20c960 <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h99629025648234daE>
  20ceaf:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20ceb4:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  20ceb9:	48 89 08             	mov    %rcx,(%rax)
  20cebc:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  20cec1:	48 89 48 08          	mov    %rcx,0x8(%rax)
  20cec5:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  20ceca:	48 89 48 10          	mov    %rcx,0x10(%rax)
  20cece:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    }
  20ced3:	48 83 c4 48          	add    $0x48,%rsp
  20ced7:	c3                   	retq   
  20ced8:	cc                   	int3   
  20ced9:	cc                   	int3   
  20ceda:	cc                   	int3   
  20cedb:	cc                   	int3   
  20cedc:	cc                   	int3   
  20cedd:	cc                   	int3   
  20cede:	cc                   	int3   
  20cedf:	cc                   	int3   

000000000020cee0 <_ZN4core4sync6atomic11AtomicUsize16compare_exchange17he87cbcb88a12dc83E>:
            pub fn compare_exchange(&self,
  20cee0:	48 83 ec 58          	sub    $0x58,%rsp
  20cee4:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  20cee9:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  20ceee:	44 88 c0             	mov    %r8b,%al
  20cef1:	88 44 24 26          	mov    %al,0x26(%rsp)
  20cef5:	88 4c 24 27          	mov    %cl,0x27(%rsp)
  20cef9:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  20cefe:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20cf03:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
  20cf08:	88 4c 24 4e          	mov    %cl,0x4e(%rsp)
  20cf0c:	88 44 24 4f          	mov    %al,0x4f(%rsp)
  20cf10:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20cf15:	48 89 7c 24 50       	mov    %rdi,0x50(%rsp)
  20cf1a:	8a 44 24 26          	mov    0x26(%rsp),%al
  20cf1e:	8a 4c 24 27          	mov    0x27(%rsp),%cl
  20cf22:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  20cf27:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  20cf2c:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
                unsafe { atomic_compare_exchange(self.v.get(), current, new, success, failure) }
  20cf31:	0f b6 c9             	movzbl %cl,%ecx
  20cf34:	44 0f b6 c0          	movzbl %al,%r8d
  20cf38:	e8 13 02 00 00       	callq  20d150 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE>
  20cf3d:	48 89 04 24          	mov    %rax,(%rsp)
  20cf41:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  20cf46:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  20cf4b:	48 8b 04 24          	mov    (%rsp),%rax
            }
  20cf4f:	48 83 c4 58          	add    $0x58,%rsp
  20cf53:	c3                   	retq   
  20cf54:	cc                   	int3   
  20cf55:	cc                   	int3   
  20cf56:	cc                   	int3   
  20cf57:	cc                   	int3   
  20cf58:	cc                   	int3   
  20cf59:	cc                   	int3   
  20cf5a:	cc                   	int3   
  20cf5b:	cc                   	int3   
  20cf5c:	cc                   	int3   
  20cf5d:	cc                   	int3   
  20cf5e:	cc                   	int3   
  20cf5f:	cc                   	int3   

000000000020cf60 <_ZN4core4sync6atomic11AtomicUsize4load17h398adaff26cbfc12E>:
            pub fn load(&self, order: Ordering) -> $int_type {
  20cf60:	48 83 ec 38          	sub    $0x38,%rsp
  20cf64:	40 88 f0             	mov    %sil,%al
  20cf67:	88 44 24 17          	mov    %al,0x17(%rsp)
  20cf6b:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  20cf70:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  20cf74:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20cf79:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  20cf7e:	8a 44 24 17          	mov    0x17(%rsp),%al
  20cf82:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                unsafe { atomic_load(self.v.get(), order) }
  20cf87:	0f b6 f0             	movzbl %al,%esi
  20cf8a:	e8 51 00 00 00       	callq  20cfe0 <_ZN4core4sync6atomic11atomic_load17h039649f7f192edf8E>
  20cf8f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20cf94:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            }
  20cf99:	48 83 c4 38          	add    $0x38,%rsp
  20cf9d:	c3                   	retq   
  20cf9e:	cc                   	int3   
  20cf9f:	cc                   	int3   

000000000020cfa0 <_ZN4core4sync6atomic11AtomicUsize5store17hb6254738bd03a8d4E>:
            pub fn store(&self, val: $int_type, order: Ordering) {
  20cfa0:	48 83 ec 38          	sub    $0x38,%rsp
  20cfa4:	48 89 34 24          	mov    %rsi,(%rsp)
  20cfa8:	88 d0                	mov    %dl,%al
  20cfaa:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20cfae:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20cfb3:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  20cfb8:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  20cfbc:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20cfc1:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  20cfc6:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20cfca:	48 8b 34 24          	mov    (%rsp),%rsi
  20cfce:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                unsafe { atomic_store(self.v.get(), val, order); }
  20cfd3:	0f b6 d0             	movzbl %al,%edx
  20cfd6:	e8 b5 00 00 00       	callq  20d090 <_ZN4core4sync6atomic12atomic_store17h62c662d0c0903d58E>
            }
  20cfdb:	48 83 c4 38          	add    $0x38,%rsp
  20cfdf:	c3                   	retq   

000000000020cfe0 <_ZN4core4sync6atomic11atomic_load17h039649f7f192edf8E>:
unsafe fn atomic_load<T: Copy>(dst: *const T, order: Ordering) -> T {
  20cfe0:	48 83 ec 28          	sub    $0x28,%rsp
  20cfe4:	48 89 3c 24          	mov    %rdi,(%rsp)
  20cfe8:	40 88 f0             	mov    %sil,%al
  20cfeb:	88 44 24 17          	mov    %al,0x17(%rsp)
  20cfef:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
        match order {
  20cff4:	0f b6 44 24 17       	movzbl 0x17(%rsp),%eax
  20cff9:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20cffe:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20d003:	48 8d 0d ea 40 ff ff 	lea    -0xbf16(%rip),%rcx        # 2010f4 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x1>
  20d00a:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  20d00e:	48 01 c8             	add    %rcx,%rax
  20d011:	ff e0                	jmpq   *%rax
  20d013:	0f 0b                	ud2    
  20d015:	48 8b 04 24          	mov    (%rsp),%rax
            Relaxed => intrinsics::atomic_load_relaxed(dst),
  20d019:	48 8b 00             	mov    (%rax),%rax
  20d01c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20d021:	eb 5c                	jmp    20d07f <_ZN4core4sync6atomic11atomic_load17h039649f7f192edf8E+0x9f>
            Release => panic!("there is no such thing as a release load"),
  20d023:	48 8d 3d af 41 ff ff 	lea    -0xbe51(%rip),%rdi        # 2011d9 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0xe6>
  20d02a:	48 8d 15 c7 65 00 00 	lea    0x65c7(%rip),%rdx        # 2135f8 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x90>
  20d031:	be 28 00 00 00       	mov    $0x28,%esi
  20d036:	e8 55 1e 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20d03b:	0f 0b                	ud2    
  20d03d:	48 8b 04 24          	mov    (%rsp),%rax
            Acquire => intrinsics::atomic_load_acq(dst),
  20d041:	48 8b 00             	mov    (%rax),%rax
  20d044:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20d049:	eb 32                	jmp    20d07d <_ZN4core4sync6atomic11atomic_load17h039649f7f192edf8E+0x9d>
            AcqRel => panic!("there is no such thing as an acquire/release load"),
  20d04b:	48 8d 3d de 40 ff ff 	lea    -0xbf22(%rip),%rdi        # 201130 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x3d>
  20d052:	48 8d 15 87 65 00 00 	lea    0x6587(%rip),%rdx        # 2135e0 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x78>
  20d059:	be 31 00 00 00       	mov    $0x31,%esi
  20d05e:	e8 2d 1e 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20d063:	0f 0b                	ud2    
  20d065:	48 8b 04 24          	mov    (%rsp),%rax
            SeqCst => intrinsics::atomic_load(dst),
  20d069:	48 8b 00             	mov    (%rax),%rax
  20d06c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20d071:	eb 00                	jmp    20d073 <_ZN4core4sync6atomic11atomic_load17h039649f7f192edf8E+0x93>
}
  20d073:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20d078:	48 83 c4 28          	add    $0x28,%rsp
  20d07c:	c3                   	retq   
            Acquire => intrinsics::atomic_load_acq(dst),
  20d07d:	eb f4                	jmp    20d073 <_ZN4core4sync6atomic11atomic_load17h039649f7f192edf8E+0x93>
            Relaxed => intrinsics::atomic_load_relaxed(dst),
  20d07f:	eb f2                	jmp    20d073 <_ZN4core4sync6atomic11atomic_load17h039649f7f192edf8E+0x93>
  20d081:	cc                   	int3   
  20d082:	cc                   	int3   
  20d083:	cc                   	int3   
  20d084:	cc                   	int3   
  20d085:	cc                   	int3   
  20d086:	cc                   	int3   
  20d087:	cc                   	int3   
  20d088:	cc                   	int3   
  20d089:	cc                   	int3   
  20d08a:	cc                   	int3   
  20d08b:	cc                   	int3   
  20d08c:	cc                   	int3   
  20d08d:	cc                   	int3   
  20d08e:	cc                   	int3   
  20d08f:	cc                   	int3   

000000000020d090 <_ZN4core4sync6atomic12atomic_store17h62c662d0c0903d58E>:
unsafe fn atomic_store<T: Copy>(dst: *mut T, val: T, order: Ordering) {
  20d090:	48 83 ec 38          	sub    $0x38,%rsp
  20d094:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  20d099:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20d09e:	88 d0                	mov    %dl,%al
  20d0a0:	88 44 24 27          	mov    %al,0x27(%rsp)
  20d0a4:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20d0a9:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        match order {
  20d0ae:	0f b6 44 24 27       	movzbl 0x27(%rsp),%eax
  20d0b3:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20d0b8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20d0bd:	48 8d 0d 44 40 ff ff 	lea    -0xbfbc(%rip),%rcx        # 201108 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x15>
  20d0c4:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  20d0c8:	48 01 c8             	add    %rcx,%rax
  20d0cb:	ff e0                	jmpq   *%rax
  20d0cd:	0f 0b                	ud2    
  20d0cf:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20d0d4:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
  20d0d9:	48 89 08             	mov    %rcx,(%rax)
  20d0dc:	eb 59                	jmp    20d137 <_ZN4core4sync6atomic12atomic_store17h62c662d0c0903d58E+0xa7>
  20d0de:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20d0e3:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
            Release => intrinsics::atomic_store_rel(dst, val),
  20d0e8:	48 89 08             	mov    %rcx,(%rax)
  20d0eb:	eb 48                	jmp    20d135 <_ZN4core4sync6atomic12atomic_store17h62c662d0c0903d58E+0xa5>
            Acquire => panic!("there is no such thing as an acquire store"),
  20d0ed:	48 8d 3d 3f 41 ff ff 	lea    -0xbec1(%rip),%rdi        # 201233 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x140>
  20d0f4:	48 8d 15 2d 65 00 00 	lea    0x652d(%rip),%rdx        # 213628 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0xc0>
  20d0fb:	be 2a 00 00 00       	mov    $0x2a,%esi
  20d100:	e8 8b 1d 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20d105:	0f 0b                	ud2    
            AcqRel => panic!("there is no such thing as an acquire/release store"),
  20d107:	48 8d 3d f3 40 ff ff 	lea    -0xbf0d(%rip),%rdi        # 201201 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x10e>
  20d10e:	48 8d 15 fb 64 00 00 	lea    0x64fb(%rip),%rdx        # 213610 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0xa8>
  20d115:	be 32 00 00 00       	mov    $0x32,%esi
  20d11a:	e8 71 1d 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20d11f:	0f 0b                	ud2    
  20d121:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20d126:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
            SeqCst => intrinsics::atomic_store(dst, val),
  20d12b:	48 87 01             	xchg   %rax,(%rcx)
  20d12e:	eb 00                	jmp    20d130 <_ZN4core4sync6atomic12atomic_store17h62c662d0c0903d58E+0xa0>
}
  20d130:	48 83 c4 38          	add    $0x38,%rsp
  20d134:	c3                   	retq   
            Release => intrinsics::atomic_store_rel(dst, val),
  20d135:	eb f9                	jmp    20d130 <_ZN4core4sync6atomic12atomic_store17h62c662d0c0903d58E+0xa0>
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
  20d137:	eb f7                	jmp    20d130 <_ZN4core4sync6atomic12atomic_store17h62c662d0c0903d58E+0xa0>
  20d139:	cc                   	int3   
  20d13a:	cc                   	int3   
  20d13b:	cc                   	int3   
  20d13c:	cc                   	int3   
  20d13d:	cc                   	int3   
  20d13e:	cc                   	int3   
  20d13f:	cc                   	int3   

000000000020d140 <_ZN4core4sync6atomic14spin_loop_hint17h742933097364dcc1E>:
pub fn spin_loop_hint() {
  20d140:	50                   	push   %rax
    spin_loop()
  20d141:	e8 ca 05 00 00       	callq  20d710 <_ZN4core4hint9spin_loop17h7257070c9ed1ffcaE>
}
  20d146:	58                   	pop    %rax
  20d147:	c3                   	retq   
  20d148:	cc                   	int3   
  20d149:	cc                   	int3   
  20d14a:	cc                   	int3   
  20d14b:	cc                   	int3   
  20d14c:	cc                   	int3   
  20d14d:	cc                   	int3   
  20d14e:	cc                   	int3   
  20d14f:	cc                   	int3   

000000000020d150 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE>:
unsafe fn atomic_compare_exchange<T: Copy>(
  20d150:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  20d157:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  20d15c:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20d161:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  20d166:	44 88 c0             	mov    %r8b,%al
  20d169:	48 89 7c 24 78       	mov    %rdi,0x78(%rsp)
  20d16e:	48 89 b4 24 80 00 00 	mov    %rsi,0x80(%rsp)
  20d175:	00 
  20d176:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
  20d17d:	00 
  20d17e:	88 8c 24 96 00 00 00 	mov    %cl,0x96(%rsp)
  20d185:	88 84 24 97 00 00 00 	mov    %al,0x97(%rsp)
        match (success, failure) {
  20d18c:	88 4c 24 70          	mov    %cl,0x70(%rsp)
  20d190:	88 44 24 71          	mov    %al,0x71(%rsp)
  20d194:	0f b6 44 24 70       	movzbl 0x70(%rsp),%eax
  20d199:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20d19e:	48 83 e8 04          	sub    $0x4,%rax
  20d1a2:	77 15                	ja     20d1b9 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x69>
  20d1a4:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  20d1a9:	48 8d 0d 6c 3f ff ff 	lea    -0xc094(%rip),%rcx        # 20111c <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x29>
  20d1b0:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  20d1b4:	48 01 c8             	add    %rcx,%rax
  20d1b7:	ff e0                	jmpq   *%rax
  20d1b9:	0f b6 44 24 71       	movzbl 0x71(%rsp),%eax
  20d1be:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20d1c3:	48 83 e8 01          	sub    $0x1,%rax
  20d1c7:	0f 84 74 02 00 00    	je     20d441 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x2f1>
  20d1cd:	eb 00                	jmp    20d1cf <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x7f>
  20d1cf:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  20d1d4:	48 83 e8 03          	sub    $0x3,%rax
  20d1d8:	0f 84 7d 02 00 00    	je     20d45b <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x30b>
  20d1de:	e9 44 02 00 00       	jmpq   20d427 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x2d7>
  20d1e3:	0f b6 44 24 71       	movzbl 0x71(%rsp),%eax
  20d1e8:	48 83 f8 00          	cmp    $0x0,%rax
  20d1ec:	0f 84 0e 02 00 00    	je     20d400 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x2b0>
  20d1f2:	eb c5                	jmp    20d1b9 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x69>
  20d1f4:	0f b6 44 24 71       	movzbl 0x71(%rsp),%eax
  20d1f9:	48 83 f8 00          	cmp    $0x0,%rax
  20d1fd:	0f 84 d3 01 00 00    	je     20d3d6 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x286>
  20d203:	eb b4                	jmp    20d1b9 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x69>
  20d205:	0f b6 44 24 71       	movzbl 0x71(%rsp),%eax
  20d20a:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20d20f:	48 85 c0             	test   %rax,%rax
  20d212:	0f 84 68 01 00 00    	je     20d380 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x230>
  20d218:	eb 00                	jmp    20d21a <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0xca>
  20d21a:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20d21f:	48 83 e8 02          	sub    $0x2,%rax
  20d223:	0f 84 7e 01 00 00    	je     20d3a7 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x257>
  20d229:	eb 8e                	jmp    20d1b9 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x69>
  20d22b:	0f b6 44 24 71       	movzbl 0x71(%rsp),%eax
  20d230:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20d235:	48 85 c0             	test   %rax,%rax
  20d238:	0f 84 ec 00 00 00    	je     20d32a <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1da>
  20d23e:	eb 00                	jmp    20d240 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0xf0>
  20d240:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20d245:	48 83 e8 02          	sub    $0x2,%rax
  20d249:	0f 84 02 01 00 00    	je     20d351 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x201>
  20d24f:	e9 65 ff ff ff       	jmpq   20d1b9 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x69>
  20d254:	0f b6 44 24 71       	movzbl 0x71(%rsp),%eax
  20d259:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20d25e:	48 85 c0             	test   %rax,%rax
  20d261:	74 1f                	je     20d282 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x132>
  20d263:	eb 00                	jmp    20d265 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x115>
  20d265:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20d26a:	48 83 e8 02          	sub    $0x2,%rax
  20d26e:	74 39                	je     20d2a9 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x159>
  20d270:	eb 00                	jmp    20d272 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x122>
  20d272:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20d277:	48 83 e8 04          	sub    $0x4,%rax
  20d27b:	74 53                	je     20d2d0 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x180>
  20d27d:	e9 37 ff ff ff       	jmpq   20d1b9 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x69>
  20d282:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  20d287:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  20d28c:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            (SeqCst, Relaxed) => intrinsics::atomic_cxchg_failrelaxed(dst, old, new),
  20d291:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
  20d296:	48 89 c1             	mov    %rax,%rcx
  20d299:	0f 94 c0             	sete   %al
  20d29c:	24 01                	and    $0x1,%al
  20d29e:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  20d2a3:	88 44 24 68          	mov    %al,0x68(%rsp)
  20d2a7:	eb 7f                	jmp    20d328 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1d8>
  20d2a9:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  20d2ae:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  20d2b3:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            (SeqCst, Acquire) => intrinsics::atomic_cxchg_failacq(dst, old, new),
  20d2b8:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
  20d2bd:	48 89 c1             	mov    %rax,%rcx
  20d2c0:	0f 94 c0             	sete   %al
  20d2c3:	24 01                	and    $0x1,%al
  20d2c5:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  20d2ca:	88 44 24 68          	mov    %al,0x68(%rsp)
  20d2ce:	eb 56                	jmp    20d326 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1d6>
  20d2d0:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  20d2d5:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  20d2da:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            (SeqCst, SeqCst) => intrinsics::atomic_cxchg(dst, old, new),
  20d2df:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
  20d2e4:	48 89 c1             	mov    %rax,%rcx
  20d2e7:	0f 94 c0             	sete   %al
  20d2ea:	24 01                	and    $0x1,%al
  20d2ec:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  20d2f1:	88 44 24 68          	mov    %al,0x68(%rsp)
  20d2f5:	eb 00                	jmp    20d2f7 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1a7>
    let (val, ok) = unsafe {
  20d2f7:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  20d2fc:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20d301:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  20d308:	00 
  20d309:	8a 44 24 68          	mov    0x68(%rsp),%al
  20d30d:	88 c1                	mov    %al,%cl
  20d30f:	80 e1 01             	and    $0x1,%cl
  20d312:	88 8c 24 a7 00 00 00 	mov    %cl,0xa7(%rsp)
    if ok { Ok(val) } else { Err(val) }
  20d319:	a8 01                	test   $0x1,%al
  20d31b:	0f 85 6e 01 00 00    	jne    20d48f <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x33f>
  20d321:	e9 54 01 00 00       	jmpq   20d47a <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x32a>
            (SeqCst, Acquire) => intrinsics::atomic_cxchg_failacq(dst, old, new),
  20d326:	eb cf                	jmp    20d2f7 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1a7>
            (SeqCst, Relaxed) => intrinsics::atomic_cxchg_failrelaxed(dst, old, new),
  20d328:	eb cd                	jmp    20d2f7 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1a7>
  20d32a:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  20d32f:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  20d334:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_failrelaxed(dst, old, new),
  20d339:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
  20d33e:	48 89 c1             	mov    %rax,%rcx
  20d341:	0f 94 c0             	sete   %al
  20d344:	24 01                	and    $0x1,%al
  20d346:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  20d34b:	88 44 24 68          	mov    %al,0x68(%rsp)
  20d34f:	eb 2a                	jmp    20d37b <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x22b>
  20d351:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  20d356:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  20d35b:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            (AcqRel, Acquire) => intrinsics::atomic_cxchg_acqrel(dst, old, new),
  20d360:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
  20d365:	48 89 c1             	mov    %rax,%rcx
  20d368:	0f 94 c0             	sete   %al
  20d36b:	24 01                	and    $0x1,%al
  20d36d:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  20d372:	88 44 24 68          	mov    %al,0x68(%rsp)
  20d376:	e9 7c ff ff ff       	jmpq   20d2f7 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1a7>
            (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_failrelaxed(dst, old, new),
  20d37b:	e9 77 ff ff ff       	jmpq   20d2f7 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1a7>
  20d380:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  20d385:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  20d38a:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            (Acquire, Relaxed) => intrinsics::atomic_cxchg_acq_failrelaxed(dst, old, new),
  20d38f:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
  20d394:	48 89 c1             	mov    %rax,%rcx
  20d397:	0f 94 c0             	sete   %al
  20d39a:	24 01                	and    $0x1,%al
  20d39c:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  20d3a1:	88 44 24 68          	mov    %al,0x68(%rsp)
  20d3a5:	eb 2a                	jmp    20d3d1 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x281>
  20d3a7:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  20d3ac:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  20d3b1:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            (Acquire, Acquire) => intrinsics::atomic_cxchg_acq(dst, old, new),
  20d3b6:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
  20d3bb:	48 89 c1             	mov    %rax,%rcx
  20d3be:	0f 94 c0             	sete   %al
  20d3c1:	24 01                	and    $0x1,%al
  20d3c3:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  20d3c8:	88 44 24 68          	mov    %al,0x68(%rsp)
  20d3cc:	e9 26 ff ff ff       	jmpq   20d2f7 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1a7>
            (Acquire, Relaxed) => intrinsics::atomic_cxchg_acq_failrelaxed(dst, old, new),
  20d3d1:	e9 21 ff ff ff       	jmpq   20d2f7 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1a7>
  20d3d6:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  20d3db:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  20d3e0:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            (Release, Relaxed) => intrinsics::atomic_cxchg_rel(dst, old, new),
  20d3e5:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
  20d3ea:	48 89 c1             	mov    %rax,%rcx
  20d3ed:	0f 94 c0             	sete   %al
  20d3f0:	24 01                	and    $0x1,%al
  20d3f2:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  20d3f7:	88 44 24 68          	mov    %al,0x68(%rsp)
  20d3fb:	e9 f7 fe ff ff       	jmpq   20d2f7 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1a7>
  20d400:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  20d405:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  20d40a:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
            (Relaxed, Relaxed) => intrinsics::atomic_cxchg_relaxed(dst, old, new),
  20d40f:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
  20d414:	48 89 c1             	mov    %rax,%rcx
  20d417:	0f 94 c0             	sete   %al
  20d41a:	24 01                	and    $0x1,%al
  20d41c:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  20d421:	88 44 24 68          	mov    %al,0x68(%rsp)
  20d425:	eb 4e                	jmp    20d475 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x325>
            _ => panic!("a failure ordering can't be stronger than a success ordering"),
  20d427:	48 8d 3d 2f 3e ff ff 	lea    -0xc1d1(%rip),%rdi        # 20125d <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x16a>
  20d42e:	48 8d 15 0b 62 00 00 	lea    0x620b(%rip),%rdx        # 213640 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0xd8>
  20d435:	be 3c 00 00 00       	mov    $0x3c,%esi
  20d43a:	e8 51 1a 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20d43f:	0f 0b                	ud2    
            (_, Release) => panic!("there is no such thing as a release failure ordering"),
  20d441:	48 8d 3d 8e 3e ff ff 	lea    -0xc172(%rip),%rdi        # 2012d6 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x1e3>
  20d448:	48 8d 15 21 62 00 00 	lea    0x6221(%rip),%rdx        # 213670 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x108>
  20d44f:	be 34 00 00 00       	mov    $0x34,%esi
  20d454:	e8 37 1a 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20d459:	0f 0b                	ud2    
            (_, AcqRel) => panic!("there is no such thing as an acquire/release failure ordering"),
  20d45b:	48 8d 3d 37 3e ff ff 	lea    -0xc1c9(%rip),%rdi        # 201299 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x1a6>
  20d462:	48 8d 15 ef 61 00 00 	lea    0x61ef(%rip),%rdx        # 213658 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0xf0>
  20d469:	be 3d 00 00 00       	mov    $0x3d,%esi
  20d46e:	e8 1d 1a 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20d473:	0f 0b                	ud2    
            (Relaxed, Relaxed) => intrinsics::atomic_cxchg_relaxed(dst, old, new),
  20d475:	e9 7d fe ff ff       	jmpq   20d2f7 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x1a7>
  20d47a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    if ok { Ok(val) } else { Err(val) }
  20d47f:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  20d484:	48 c7 44 24 50 01 00 	movq   $0x1,0x50(%rsp)
  20d48b:	00 00 
  20d48d:	eb 13                	jmp    20d4a2 <_ZN4core4sync6atomic23atomic_compare_exchange17hc751f7dbd11783fdE+0x352>
  20d48f:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20d494:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  20d499:	48 c7 44 24 50 00 00 	movq   $0x0,0x50(%rsp)
  20d4a0:	00 00 
}
  20d4a2:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  20d4a7:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  20d4ac:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  20d4b3:	c3                   	retq   
  20d4b4:	cc                   	int3   
  20d4b5:	cc                   	int3   
  20d4b6:	cc                   	int3   
  20d4b7:	cc                   	int3   
  20d4b8:	cc                   	int3   
  20d4b9:	cc                   	int3   
  20d4ba:	cc                   	int3   
  20d4bb:	cc                   	int3   
  20d4bc:	cc                   	int3   
  20d4bd:	cc                   	int3   
  20d4be:	cc                   	int3   
  20d4bf:	cc                   	int3   

000000000020d4c0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3fa8054ddf20da4cE>:
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
  20d4c0:	48 83 ec 18          	sub    $0x18,%rsp
  20d4c4:	48 89 f2             	mov    %rsi,%rdx
  20d4c7:	48 89 f8             	mov    %rdi,%rax
  20d4ca:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20d4cf:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  20d4d4:	48 8b 38             	mov    (%rax),%rdi
  20d4d7:	48 8b 70 08          	mov    0x8(%rax),%rsi
  20d4db:	e8 e0 38 00 00       	callq  210dc0 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E>
  20d4e0:	88 44 24 07          	mov    %al,0x7(%rsp)
  20d4e4:	8a 44 24 07          	mov    0x7(%rsp),%al
  20d4e8:	24 01                	and    $0x1,%al
  20d4ea:	0f b6 c0             	movzbl %al,%eax
  20d4ed:	48 83 c4 18          	add    $0x18,%rsp
  20d4f1:	c3                   	retq   
  20d4f2:	cc                   	int3   
  20d4f3:	cc                   	int3   
  20d4f4:	cc                   	int3   
  20d4f5:	cc                   	int3   
  20d4f6:	cc                   	int3   
  20d4f7:	cc                   	int3   
  20d4f8:	cc                   	int3   
  20d4f9:	cc                   	int3   
  20d4fa:	cc                   	int3   
  20d4fb:	cc                   	int3   
  20d4fc:	cc                   	int3   
  20d4fd:	cc                   	int3   
  20d4fe:	cc                   	int3   
  20d4ff:	cc                   	int3   

000000000020d500 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h72ffccc9870a62adE>:
  20d500:	48 83 ec 18          	sub    $0x18,%rsp
  20d504:	48 89 f2             	mov    %rsi,%rdx
  20d507:	48 89 f8             	mov    %rdi,%rax
  20d50a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20d50f:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  20d514:	48 8b 38             	mov    (%rax),%rdi
  20d517:	48 8b 70 08          	mov    0x8(%rax),%rsi
  20d51b:	e8 60 3e 00 00       	callq  211380 <_ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17hb2e2fad0044fdf34E>
  20d520:	88 44 24 07          	mov    %al,0x7(%rsp)
  20d524:	8a 44 24 07          	mov    0x7(%rsp),%al
  20d528:	24 01                	and    $0x1,%al
  20d52a:	0f b6 c0             	movzbl %al,%eax
  20d52d:	48 83 c4 18          	add    $0x18,%rsp
  20d531:	c3                   	retq   
  20d532:	cc                   	int3   
  20d533:	cc                   	int3   
  20d534:	cc                   	int3   
  20d535:	cc                   	int3   
  20d536:	cc                   	int3   
  20d537:	cc                   	int3   
  20d538:	cc                   	int3   
  20d539:	cc                   	int3   
  20d53a:	cc                   	int3   
  20d53b:	cc                   	int3   
  20d53c:	cc                   	int3   
  20d53d:	cc                   	int3   
  20d53e:	cc                   	int3   
  20d53f:	cc                   	int3   

000000000020d540 <_ZN4core3fmt10ArgumentV13new17hd157b7d17257c7eaE>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
  20d540:	48 83 ec 48          	sub    $0x48,%rsp
  20d544:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20d549:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20d54e:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
  20d553:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  20d558:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  20d55d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20d562:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20d567:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20d56c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  20d571:	48 89 04 24          	mov    %rax,(%rsp)
  20d575:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20d57a:	48 8b 0c 24          	mov    (%rsp),%rcx
  20d57e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20d583:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    }
  20d588:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20d58d:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  20d592:	48 83 c4 48          	add    $0x48,%rsp
  20d596:	c3                   	retq   
  20d597:	cc                   	int3   
  20d598:	cc                   	int3   
  20d599:	cc                   	int3   
  20d59a:	cc                   	int3   
  20d59b:	cc                   	int3   
  20d59c:	cc                   	int3   
  20d59d:	cc                   	int3   
  20d59e:	cc                   	int3   
  20d59f:	cc                   	int3   

000000000020d5a0 <_ZN4core3fmt9Arguments6new_v117h95f460802f9138bdE>:
    pub const fn new_v1(pieces: &'a [&'static str], args: &'a [ArgumentV1<'a>]) -> Arguments<'a> {
  20d5a0:	48 83 ec 68          	sub    $0x68,%rsp
  20d5a4:	4c 89 04 24          	mov    %r8,(%rsp)
  20d5a8:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  20d5ad:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  20d5b2:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  20d5b7:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  20d5bc:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20d5c1:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
  20d5c6:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  20d5cb:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  20d5d0:	4c 89 44 24 60       	mov    %r8,0x60(%rsp)
        if pieces.len() < args.len() || pieces.len() > args.len() + 1 {
  20d5d5:	4c 39 c2             	cmp    %r8,%rdx
  20d5d8:	72 1b                	jb     20d5f5 <_ZN4core3fmt9Arguments6new_v117h95f460802f9138bdE+0x55>
  20d5da:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20d5df:	48 8b 0c 24          	mov    (%rsp),%rcx
  20d5e3:	48 83 c1 01          	add    $0x1,%rcx
  20d5e7:	48 39 c8             	cmp    %rcx,%rax
  20d5ea:	0f 97 c0             	seta   %al
  20d5ed:	24 01                	and    $0x1,%al
  20d5ef:	88 44 24 37          	mov    %al,0x37(%rsp)
  20d5f3:	eb 05                	jmp    20d5fa <_ZN4core3fmt9Arguments6new_v117h95f460802f9138bdE+0x5a>
  20d5f5:	c6 44 24 37 01       	movb   $0x1,0x37(%rsp)
  20d5fa:	f6 44 24 37 01       	testb  $0x1,0x37(%rsp)
  20d5ff:	75 4c                	jne    20d64d <_ZN4core3fmt9Arguments6new_v117h95f460802f9138bdE+0xad>
  20d601:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  20d606:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  20d60b:	48 8b 14 24          	mov    (%rsp),%rdx
  20d60f:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  20d614:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  20d619:	4c 8b 44 24 18       	mov    0x18(%rsp),%r8
        Arguments { pieces, fmt: None, args }
  20d61e:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
  20d625:	00 00 
  20d627:	4c 89 01             	mov    %r8,(%rcx)
  20d62a:	48 89 79 08          	mov    %rdi,0x8(%rcx)
  20d62e:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
  20d633:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  20d638:	4c 89 41 10          	mov    %r8,0x10(%rcx)
  20d63c:	48 89 79 18          	mov    %rdi,0x18(%rcx)
  20d640:	48 89 71 20          	mov    %rsi,0x20(%rcx)
  20d644:	48 89 51 28          	mov    %rdx,0x28(%rcx)
    }
  20d648:	48 83 c4 68          	add    $0x68,%rsp
  20d64c:	c3                   	retq   
            panic!("invalid args");
  20d64d:	48 8d 3d b6 3c ff ff 	lea    -0xc34a(%rip),%rdi        # 20130a <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x217>
  20d654:	48 8d 15 2d 60 00 00 	lea    0x602d(%rip),%rdx        # 213688 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x120>
  20d65b:	be 0c 00 00 00       	mov    $0xc,%esi
  20d660:	e8 2b 18 00 00       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20d665:	0f 0b                	ud2    
  20d667:	cc                   	int3   
  20d668:	cc                   	int3   
  20d669:	cc                   	int3   
  20d66a:	cc                   	int3   
  20d66b:	cc                   	int3   
  20d66c:	cc                   	int3   
  20d66d:	cc                   	int3   
  20d66e:	cc                   	int3   
  20d66f:	cc                   	int3   

000000000020d670 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h2fdb52da88f27f2eE>:
#[derive(Copy, Clone)]
  20d670:	48 83 ec 18          	sub    $0x18,%rsp
  20d674:	48 89 f8             	mov    %rdi,%rax
  20d677:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20d67c:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20d681:	ba 30 00 00 00       	mov    $0x30,%edx
  20d686:	e8 35 42 00 00       	callq  2118c0 <memcpy>
  20d68b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20d690:	48 83 c4 18          	add    $0x18,%rsp
  20d694:	c3                   	retq   
  20d695:	cc                   	int3   
  20d696:	cc                   	int3   
  20d697:	cc                   	int3   
  20d698:	cc                   	int3   
  20d699:	cc                   	int3   
  20d69a:	cc                   	int3   
  20d69b:	cc                   	int3   
  20d69c:	cc                   	int3   
  20d69d:	cc                   	int3   
  20d69e:	cc                   	int3   
  20d69f:	cc                   	int3   

000000000020d6a0 <_ZN4core3ops8function6FnOnce9call_once17h0c90e123d39df5d5E>:
  20d6a0:	48 83 ec 28          	sub    $0x28,%rsp
  20d6a4:	48 89 f8             	mov    %rdi,%rax
  20d6a7:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20d6ac:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20d6b1:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  20d6b6:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  20d6bb:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  20d6c0:	e8 6b f2 ff ff       	callq  20c930 <_ZN3log14MaybeStaticStr6Static17h2a13efcf84fb5a6eE>
  20d6c5:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20d6ca:	48 83 c4 28          	add    $0x28,%rsp
  20d6ce:	c3                   	retq   
  20d6cf:	cc                   	int3   

000000000020d6d0 <_ZN4core3ptr35drop_in_place$LT$log..NopLogger$GT$17heb548e4daff7e4f7E>:
  20d6d0:	50                   	push   %rax
  20d6d1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20d6d5:	58                   	pop    %rax
  20d6d6:	c3                   	retq   
  20d6d7:	cc                   	int3   
  20d6d8:	cc                   	int3   
  20d6d9:	cc                   	int3   
  20d6da:	cc                   	int3   
  20d6db:	cc                   	int3   
  20d6dc:	cc                   	int3   
  20d6dd:	cc                   	int3   
  20d6de:	cc                   	int3   
  20d6df:	cc                   	int3   

000000000020d6e0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17ha8a0c6207e83f0f9E>:
    /// differences, and it should also not be stabilized before we have a better understanding
    /// of this issue.
    #[unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
    #[rustc_const_unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
    #[inline]
    pub const fn guaranteed_eq(self, other: *mut T) -> bool
  20d6e0:	48 83 ec 20          	sub    $0x20,%rsp
  20d6e4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20d6e9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
    where
        T: Sized,
    {
        intrinsics::ptr_guaranteed_eq(self as *const _, other as *const _)
  20d6ee:	48 39 f7             	cmp    %rsi,%rdi
  20d6f1:	0f 94 c0             	sete   %al
  20d6f4:	24 01                	and    $0x1,%al
  20d6f6:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  20d6fa:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  20d6fe:	88 44 24 07          	mov    %al,0x7(%rsp)
  20d702:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  20d706:	24 01                	and    $0x1,%al
  20d708:	0f b6 c0             	movzbl %al,%eax
  20d70b:	48 83 c4 20          	add    $0x20,%rsp
  20d70f:	c3                   	retq   

000000000020d710 <_ZN4core4hint9spin_loop17h7257070c9ed1ffcaE>:
  20d710:	c3                   	retq   
  20d711:	cc                   	int3   
  20d712:	cc                   	int3   
  20d713:	cc                   	int3   
  20d714:	cc                   	int3   
  20d715:	cc                   	int3   
  20d716:	cc                   	int3   
  20d717:	cc                   	int3   
  20d718:	cc                   	int3   
  20d719:	cc                   	int3   
  20d71a:	cc                   	int3   
  20d71b:	cc                   	int3   
  20d71c:	cc                   	int3   
  20d71d:	cc                   	int3   
  20d71e:	cc                   	int3   
  20d71f:	cc                   	int3   

000000000020d720 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17hbe92553b6f6f95caE>:
                    fn clone(&self) -> Self {
  20d720:	50                   	push   %rax
  20d721:	48 89 3c 24          	mov    %rdi,(%rsp)
                        *self
  20d725:	8b 07                	mov    (%rdi),%eax
                    }
  20d727:	59                   	pop    %rcx
  20d728:	c3                   	retq   
  20d729:	cc                   	int3   
  20d72a:	cc                   	int3   
  20d72b:	cc                   	int3   
  20d72c:	cc                   	int3   
  20d72d:	cc                   	int3   
  20d72e:	cc                   	int3   
  20d72f:	cc                   	int3   

000000000020d730 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h112bbff21e0b9246E>:
    /// Shared references can be cloned, but mutable references *cannot*!
    #[stable(feature = "rust1", since = "1.0.0")]
    impl<T: ?Sized> Clone for &T {
        #[inline]
        #[rustc_diagnostic_item = "noop_method_clone"]
        fn clone(&self) -> Self {
  20d730:	50                   	push   %rax
  20d731:	48 89 3c 24          	mov    %rdi,(%rsp)
            *self
  20d735:	48 8b 07             	mov    (%rdi),%rax
  20d738:	48 8b 57 08          	mov    0x8(%rdi),%rdx
        }
  20d73c:	59                   	pop    %rcx
  20d73d:	c3                   	retq   
  20d73e:	cc                   	int3   
  20d73f:	cc                   	int3   

000000000020d740 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13guaranteed_eq17h34ebb992cc7e055fE>:
    /// differences, and it should also not be stabilized before we have a better understanding
    /// of this issue.
    #[unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
    #[rustc_const_unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
    #[inline]
    pub const fn guaranteed_eq(self, other: *const T) -> bool
  20d740:	48 83 ec 20          	sub    $0x20,%rsp
  20d744:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20d749:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
    where
        T: Sized,
    {
        intrinsics::ptr_guaranteed_eq(self, other)
  20d74e:	48 39 f7             	cmp    %rsi,%rdi
  20d751:	0f 94 c0             	sete   %al
  20d754:	24 01                	and    $0x1,%al
  20d756:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  20d75a:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  20d75e:	88 44 24 07          	mov    %al,0x7(%rsp)
  20d762:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  20d766:	24 01                	and    $0x1,%al
  20d768:	0f b6 c0             	movzbl %al,%eax
  20d76b:	48 83 c4 20          	add    $0x20,%rsp
  20d76f:	c3                   	retq   

000000000020d770 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h1bffe517e0fb2d88E>:
    pub const fn is_null(self) -> bool {
  20d770:	48 83 ec 18          	sub    $0x18,%rsp
  20d774:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20d779:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20d77e:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
        (self as *const u8).guaranteed_eq(null())
  20d783:	31 c0                	xor    %eax,%eax
  20d785:	89 c6                	mov    %eax,%esi
  20d787:	e8 b4 ff ff ff       	callq  20d740 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13guaranteed_eq17h34ebb992cc7e055fE>
  20d78c:	88 44 24 07          	mov    %al,0x7(%rsp)
  20d790:	8a 44 24 07          	mov    0x7(%rsp),%al
    }
  20d794:	24 01                	and    $0x1,%al
  20d796:	0f b6 c0             	movzbl %al,%eax
  20d799:	48 83 c4 18          	add    $0x18,%rsp
  20d79d:	c3                   	retq   
  20d79e:	cc                   	int3   
  20d79f:	cc                   	int3   

000000000020d7a0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h30a0f9f2c6a34554E>:
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
  20d7a0:	48 83 ec 18          	sub    $0x18,%rsp
  20d7a4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20d7a9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20d7ae:	48 8b 3f             	mov    (%rdi),%rdi
  20d7b1:	e8 7a 06 00 00       	callq  20de30 <_ZN76_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..fmt..Debug$GT$3fmt17h44e0ad51517e9e51E>
  20d7b6:	88 44 24 07          	mov    %al,0x7(%rsp)
  20d7ba:	8a 44 24 07          	mov    0x7(%rsp),%al
  20d7be:	24 01                	and    $0x1,%al
  20d7c0:	0f b6 c0             	movzbl %al,%eax
  20d7c3:	48 83 c4 18          	add    $0x18,%rsp
  20d7c7:	c3                   	retq   
  20d7c8:	cc                   	int3   
  20d7c9:	cc                   	int3   
  20d7ca:	cc                   	int3   
  20d7cb:	cc                   	int3   
  20d7cc:	cc                   	int3   
  20d7cd:	cc                   	int3   
  20d7ce:	cc                   	int3   
  20d7cf:	cc                   	int3   

000000000020d7d0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4cast17h487572e7f1786c72E>:
    pub const fn cast<U>(self) -> *const U {
  20d7d0:	50                   	push   %rax
  20d7d1:	48 89 f8             	mov    %rdi,%rax
  20d7d4:	48 89 04 24          	mov    %rax,(%rsp)
    }
  20d7d8:	59                   	pop    %rcx
  20d7d9:	c3                   	retq   
  20d7da:	cc                   	int3   
  20d7db:	cc                   	int3   
  20d7dc:	cc                   	int3   
  20d7dd:	cc                   	int3   
  20d7de:	cc                   	int3   
  20d7df:	cc                   	int3   

000000000020d7e0 <_ZN77_$LT$bootloader..boot_info..Optional$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hc593becf98cf1d0dE>:
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
  20d7e0:	48 83 ec 68          	sub    $0x68,%rsp
  20d7e4:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20d7e9:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  20d7ee:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
  20d7f3:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  20d7f8:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20d7fd:	8b 00                	mov    (%rax),%eax
  20d7ff:	48 85 c0             	test   %rax,%rax
  20d802:	74 06                	je     20d80a <_ZN77_$LT$bootloader..boot_info..Optional$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hc593becf98cf1d0dE+0x2a>
  20d804:	eb 00                	jmp    20d806 <_ZN77_$LT$bootloader..boot_info..Optional$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hc593becf98cf1d0dE+0x26>
  20d806:	eb 32                	jmp    20d83a <_ZN77_$LT$bootloader..boot_info..Optional$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hc593becf98cf1d0dE+0x5a>
  20d808:	0f 0b                	ud2    
  20d80a:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
    Some(T),
  20d80f:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20d814:	48 83 c0 08          	add    $0x8,%rax
  20d818:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20d81d:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
  20d822:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  20d827:	48 8d 15 52 38 ff ff 	lea    -0xc7ae(%rip),%rdx        # 201080 <_ZN9r3_kernel3cpu10exceptions3IDT17he44583177f5a1f5fE+0xf9>
  20d82e:	b9 04 00 00 00       	mov    $0x4,%ecx
  20d833:	e8 48 35 00 00       	callq  210d80 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>
  20d838:	eb 2a                	jmp    20d864 <_ZN77_$LT$bootloader..boot_info..Optional$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hc593becf98cf1d0dE+0x84>
  20d83a:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  20d83f:	48 8d 35 4a 38 ff ff 	lea    -0xc7b6(%rip),%rsi        # 201090 <_ZN9r3_kernel3cpu10exceptions3IDT17he44583177f5a1f5fE+0x109>
  20d846:	ba 04 00 00 00       	mov    $0x4,%edx
  20d84b:	e8 d0 34 00 00       	callq  210d20 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20d850:	24 01                	and    $0x1,%al
  20d852:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  20d856:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  20d85a:	24 01                	and    $0x1,%al
  20d85c:	0f b6 c0             	movzbl %al,%eax
  20d85f:	48 83 c4 68          	add    $0x68,%rsp
  20d863:	c3                   	retq   
  20d864:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20d869:	48 8d 4c 24 28       	lea    0x28(%rsp),%rcx
  20d86e:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
    Some(T),
  20d873:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20d878:	48 8d 74 24 40       	lea    0x40(%rsp),%rsi
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
  20d87d:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  20d882:	48 8d 15 17 5e 00 00 	lea    0x5e17(%rip),%rdx        # 2136a0 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x138>
  20d889:	e8 32 10 00 00       	callq  20e8c0 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>
  20d88e:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  20d893:	e8 98 11 00 00       	callq  20ea30 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>
  20d898:	24 01                	and    $0x1,%al
  20d89a:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  20d89e:	eb b6                	jmp    20d856 <_ZN77_$LT$bootloader..boot_info..Optional$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hc593becf98cf1d0dE+0x76>

000000000020d8a0 <_ZN4core3ptr28drop_in_place$LT$$RF$u32$GT$17h7ca190daa7803da4E>:
  20d8a0:	50                   	push   %rax
  20d8a1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20d8a5:	58                   	pop    %rax
  20d8a6:	c3                   	retq   
  20d8a7:	cc                   	int3   
  20d8a8:	cc                   	int3   
  20d8a9:	cc                   	int3   
  20d8aa:	cc                   	int3   
  20d8ab:	cc                   	int3   
  20d8ac:	cc                   	int3   
  20d8ad:	cc                   	int3   
  20d8ae:	cc                   	int3   
  20d8af:	cc                   	int3   

000000000020d8b0 <_ZN4core3ptr28drop_in_place$LT$$RF$u64$GT$17h6df45f2823794112E>:
  20d8b0:	50                   	push   %rax
  20d8b1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20d8b5:	58                   	pop    %rax
  20d8b6:	c3                   	retq   
  20d8b7:	cc                   	int3   
  20d8b8:	cc                   	int3   
  20d8b9:	cc                   	int3   
  20d8ba:	cc                   	int3   
  20d8bb:	cc                   	int3   
  20d8bc:	cc                   	int3   
  20d8bd:	cc                   	int3   
  20d8be:	cc                   	int3   
  20d8bf:	cc                   	int3   

000000000020d8c0 <_ZN4core3ptr64drop_in_place$LT$$RF$bootloader..boot_info..MemoryRegionKind$GT$17h091086770a55a35bE>:
  20d8c0:	50                   	push   %rax
  20d8c1:	48 89 3c 24          	mov    %rdi,(%rsp)
  20d8c5:	58                   	pop    %rax
  20d8c6:	c3                   	retq   
  20d8c7:	cc                   	int3   
  20d8c8:	cc                   	int3   
  20d8c9:	cc                   	int3   
  20d8ca:	cc                   	int3   
  20d8cb:	cc                   	int3   
  20d8cc:	cc                   	int3   
  20d8cd:	cc                   	int3   
  20d8ce:	cc                   	int3   
  20d8cf:	cc                   	int3   

000000000020d8d0 <_ZN4core3ptr20slice_from_raw_parts17h9096e389242d0606E>:
pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {
  20d8d0:	48 83 ec 38          	sub    $0x38,%rsp
  20d8d4:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  20d8d9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20d8de:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
    from_raw_parts(data.cast(), len)
  20d8e3:	e8 e8 fe ff ff       	callq  20d7d0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4cast17h487572e7f1786c72E>
  20d8e8:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20d8ed:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  20d8f2:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  20d8f7:	e8 74 00 00 00       	callq  20d970 <_ZN4core3ptr8metadata14from_raw_parts17hba60a34e9bddb8a9E>
  20d8fc:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20d901:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  20d906:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  20d90b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
  20d910:	48 83 c4 38          	add    $0x38,%rsp
  20d914:	c3                   	retq   
  20d915:	cc                   	int3   
  20d916:	cc                   	int3   
  20d917:	cc                   	int3   
  20d918:	cc                   	int3   
  20d919:	cc                   	int3   
  20d91a:	cc                   	int3   
  20d91b:	cc                   	int3   
  20d91c:	cc                   	int3   
  20d91d:	cc                   	int3   
  20d91e:	cc                   	int3   
  20d91f:	cc                   	int3   

000000000020d920 <_ZN4core3ptr24slice_from_raw_parts_mut17h0feb238084e3de0dE>:
pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
  20d920:	48 83 ec 38          	sub    $0x38,%rsp
  20d924:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20d929:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  20d92e:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  20d933:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  20d938:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20d93d:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  20d942:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    from_raw_parts_mut(data.cast(), len)
  20d947:	e8 64 00 00 00       	callq  20d9b0 <_ZN4core3ptr8metadata18from_raw_parts_mut17h6b5435f6b71c7afdE>
  20d94c:	48 89 04 24          	mov    %rax,(%rsp)
  20d950:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  20d955:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  20d95a:	48 8b 04 24          	mov    (%rsp),%rax
}
  20d95e:	48 83 c4 38          	add    $0x38,%rsp
  20d962:	c3                   	retq   
  20d963:	cc                   	int3   
  20d964:	cc                   	int3   
  20d965:	cc                   	int3   
  20d966:	cc                   	int3   
  20d967:	cc                   	int3   
  20d968:	cc                   	int3   
  20d969:	cc                   	int3   
  20d96a:	cc                   	int3   
  20d96b:	cc                   	int3   
  20d96c:	cc                   	int3   
  20d96d:	cc                   	int3   
  20d96e:	cc                   	int3   
  20d96f:	cc                   	int3   

000000000020d970 <_ZN4core3ptr8metadata14from_raw_parts17hba60a34e9bddb8a9E>:
///
/// [`slice::from_raw_parts`]: crate::slice::from_raw_parts
#[unstable(feature = "ptr_metadata", issue = "81513")]
#[rustc_const_unstable(feature = "ptr_metadata", issue = "81513")]
#[inline]
pub const fn from_raw_parts<T: ?Sized>(
  20d970:	48 83 ec 30          	sub    $0x30,%rsp
  20d974:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  20d979:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
    metadata: <T as Pointee>::Metadata,
) -> *const T {
    // SAFETY: Accessing the value from the `PtrRepr` union is safe since *const T
    // and PtrComponents<T> have the same memory layouts. Only std can make this
    // guarantee.
    unsafe { PtrRepr { components: PtrComponents { data_address, metadata } }.const_ptr }
  20d97e:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20d983:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  20d988:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20d98d:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20d992:	48 89 0c 24          	mov    %rcx,(%rsp)
  20d996:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20d99b:	48 8b 04 24          	mov    (%rsp),%rax
  20d99f:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
}
  20d9a4:	48 83 c4 30          	add    $0x30,%rsp
  20d9a8:	c3                   	retq   
  20d9a9:	cc                   	int3   
  20d9aa:	cc                   	int3   
  20d9ab:	cc                   	int3   
  20d9ac:	cc                   	int3   
  20d9ad:	cc                   	int3   
  20d9ae:	cc                   	int3   
  20d9af:	cc                   	int3   

000000000020d9b0 <_ZN4core3ptr8metadata18from_raw_parts_mut17h6b5435f6b71c7afdE>:
///
/// See the documentation of [`from_raw_parts`] for more details.
#[unstable(feature = "ptr_metadata", issue = "81513")]
#[rustc_const_unstable(feature = "ptr_metadata", issue = "81513")]
#[inline]
pub const fn from_raw_parts_mut<T: ?Sized>(
  20d9b0:	48 83 ec 30          	sub    $0x30,%rsp
  20d9b4:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  20d9b9:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
    metadata: <T as Pointee>::Metadata,
) -> *mut T {
    // SAFETY: Accessing the value from the `PtrRepr` union is safe since *const T
    // and PtrComponents<T> have the same memory layouts. Only std can make this
    // guarantee.
    unsafe { PtrRepr { components: PtrComponents { data_address, metadata } }.mut_ptr }
  20d9be:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20d9c3:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  20d9c8:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  20d9cd:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20d9d2:	48 89 0c 24          	mov    %rcx,(%rsp)
  20d9d6:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20d9db:	48 8b 04 24          	mov    (%rsp),%rax
  20d9df:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
}
  20d9e4:	48 83 c4 30          	add    $0x30,%rsp
  20d9e8:	c3                   	retq   
  20d9e9:	cc                   	int3   
  20d9ea:	cc                   	int3   
  20d9eb:	cc                   	int3   
  20d9ec:	cc                   	int3   
  20d9ed:	cc                   	int3   
  20d9ee:	cc                   	int3   
  20d9ef:	cc                   	int3   

000000000020d9f0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2a95e3f68e858f27E>:
  20d9f0:	48 83 ec 18          	sub    $0x18,%rsp
  20d9f4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20d9f9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20d9fe:	48 8b 3f             	mov    (%rdi),%rdi
  20da01:	e8 7a 00 00 00       	callq  20da80 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE>
  20da06:	88 44 24 07          	mov    %al,0x7(%rsp)
  20da0a:	8a 44 24 07          	mov    0x7(%rsp),%al
  20da0e:	24 01                	and    $0x1,%al
  20da10:	0f b6 c0             	movzbl %al,%eax
  20da13:	48 83 c4 18          	add    $0x18,%rsp
  20da17:	c3                   	retq   
  20da18:	cc                   	int3   
  20da19:	cc                   	int3   
  20da1a:	cc                   	int3   
  20da1b:	cc                   	int3   
  20da1c:	cc                   	int3   
  20da1d:	cc                   	int3   
  20da1e:	cc                   	int3   
  20da1f:	cc                   	int3   

000000000020da20 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4835aefd08962e6eE>:
  20da20:	48 83 ec 18          	sub    $0x18,%rsp
  20da24:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20da29:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20da2e:	48 8b 3f             	mov    (%rdi),%rdi
  20da31:	e8 aa 01 00 00       	callq  20dbe0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E>
  20da36:	88 44 24 07          	mov    %al,0x7(%rsp)
  20da3a:	8a 44 24 07          	mov    0x7(%rsp),%al
  20da3e:	24 01                	and    $0x1,%al
  20da40:	0f b6 c0             	movzbl %al,%eax
  20da43:	48 83 c4 18          	add    $0x18,%rsp
  20da47:	c3                   	retq   
  20da48:	cc                   	int3   
  20da49:	cc                   	int3   
  20da4a:	cc                   	int3   
  20da4b:	cc                   	int3   
  20da4c:	cc                   	int3   
  20da4d:	cc                   	int3   
  20da4e:	cc                   	int3   
  20da4f:	cc                   	int3   

000000000020da50 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4c907112cc167dadE>:
  20da50:	48 83 ec 18          	sub    $0x18,%rsp
  20da54:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20da59:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20da5e:	48 8b 3f             	mov    (%rdi),%rdi
  20da61:	e8 ca 00 00 00       	callq  20db30 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE>
  20da66:	88 44 24 07          	mov    %al,0x7(%rsp)
  20da6a:	8a 44 24 07          	mov    0x7(%rsp),%al
  20da6e:	24 01                	and    $0x1,%al
  20da70:	0f b6 c0             	movzbl %al,%eax
  20da73:	48 83 c4 18          	add    $0x18,%rsp
  20da77:	c3                   	retq   
  20da78:	cc                   	int3   
  20da79:	cc                   	int3   
  20da7a:	cc                   	int3   
  20da7b:	cc                   	int3   
  20da7c:	cc                   	int3   
  20da7d:	cc                   	int3   
  20da7e:	cc                   	int3   
  20da7f:	cc                   	int3   

000000000020da80 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE>:
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  20da80:	48 83 ec 38          	sub    $0x38,%rsp
  20da84:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20da89:	48 89 f8             	mov    %rdi,%rax
  20da8c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  20da91:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20da96:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20da9b:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
                if f.debug_lower_hex() {
  20daa0:	e8 9b 32 00 00       	callq  210d40 <_ZN4core3fmt9Formatter15debug_lower_hex17hb64b59229092e7f9E>
  20daa5:	88 44 24 26          	mov    %al,0x26(%rsp)
  20daa9:	8a 44 24 26          	mov    0x26(%rsp),%al
  20daad:	a8 01                	test   $0x1,%al
  20daaf:	75 12                	jne    20dac3 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE+0x43>
  20dab1:	eb 00                	jmp    20dab3 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE+0x33>
  20dab3:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                } else if f.debug_upper_hex() {
  20dab8:	e8 93 32 00 00       	callq  210d50 <_ZN4core3fmt9Formatter15debug_upper_hex17h1791008eaa6156e8E>
  20dabd:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20dac1:	eb 25                	jmp    20dae8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE+0x68>
  20dac3:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  20dac8:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::LowerHex::fmt(self, f)
  20dacd:	e8 be 05 00 00       	callq  20e090 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h3a23d2d6b1316581E>
  20dad2:	24 01                	and    $0x1,%al
  20dad4:	88 44 24 27          	mov    %al,0x27(%rsp)
                if f.debug_lower_hex() {
  20dad8:	eb 00                	jmp    20dada <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE+0x5a>
            }
  20dada:	8a 44 24 27          	mov    0x27(%rsp),%al
  20dade:	24 01                	and    $0x1,%al
  20dae0:	0f b6 c0             	movzbl %al,%eax
  20dae3:	48 83 c4 38          	add    $0x38,%rsp
  20dae7:	c3                   	retq   
  20dae8:	8a 44 24 0f          	mov    0xf(%rsp),%al
                } else if f.debug_upper_hex() {
  20daec:	a8 01                	test   $0x1,%al
  20daee:	75 19                	jne    20db09 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE+0x89>
  20daf0:	eb 00                	jmp    20daf2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE+0x72>
  20daf2:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  20daf7:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::Display::fmt(self, f)
  20dafc:	e8 4f 20 00 00       	callq  20fb50 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h175eee2b0554f36aE>
  20db01:	24 01                	and    $0x1,%al
  20db03:	88 44 24 27          	mov    %al,0x27(%rsp)
  20db07:	eb 19                	jmp    20db22 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE+0xa2>
  20db09:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  20db0e:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::UpperHex::fmt(self, f)
  20db13:	e8 18 06 00 00       	callq  20e130 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h0a0f68783d0d16dcE>
  20db18:	24 01                	and    $0x1,%al
  20db1a:	88 44 24 27          	mov    %al,0x27(%rsp)
                } else if f.debug_upper_hex() {
  20db1e:	eb 00                	jmp    20db20 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE+0xa0>
                if f.debug_lower_hex() {
  20db20:	eb b8                	jmp    20dada <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE+0x5a>
                } else if f.debug_upper_hex() {
  20db22:	eb fc                	jmp    20db20 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h0e92646d7d39ad9fE+0xa0>
  20db24:	cc                   	int3   
  20db25:	cc                   	int3   
  20db26:	cc                   	int3   
  20db27:	cc                   	int3   
  20db28:	cc                   	int3   
  20db29:	cc                   	int3   
  20db2a:	cc                   	int3   
  20db2b:	cc                   	int3   
  20db2c:	cc                   	int3   
  20db2d:	cc                   	int3   
  20db2e:	cc                   	int3   
  20db2f:	cc                   	int3   

000000000020db30 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE>:
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  20db30:	48 83 ec 38          	sub    $0x38,%rsp
  20db34:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20db39:	48 89 f8             	mov    %rdi,%rax
  20db3c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  20db41:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20db46:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20db4b:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
                if f.debug_lower_hex() {
  20db50:	e8 eb 31 00 00       	callq  210d40 <_ZN4core3fmt9Formatter15debug_lower_hex17hb64b59229092e7f9E>
  20db55:	88 44 24 26          	mov    %al,0x26(%rsp)
  20db59:	8a 44 24 26          	mov    0x26(%rsp),%al
  20db5d:	a8 01                	test   $0x1,%al
  20db5f:	75 12                	jne    20db73 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE+0x43>
  20db61:	eb 00                	jmp    20db63 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE+0x33>
  20db63:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                } else if f.debug_upper_hex() {
  20db68:	e8 e3 31 00 00       	callq  210d50 <_ZN4core3fmt9Formatter15debug_upper_hex17h1791008eaa6156e8E>
  20db6d:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20db71:	eb 25                	jmp    20db98 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE+0x68>
  20db73:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  20db78:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::LowerHex::fmt(self, f)
  20db7d:	e8 4e 06 00 00       	callq  20e1d0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17ha57d44e8df250fa1E>
  20db82:	24 01                	and    $0x1,%al
  20db84:	88 44 24 27          	mov    %al,0x27(%rsp)
                if f.debug_lower_hex() {
  20db88:	eb 00                	jmp    20db8a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE+0x5a>
            }
  20db8a:	8a 44 24 27          	mov    0x27(%rsp),%al
  20db8e:	24 01                	and    $0x1,%al
  20db90:	0f b6 c0             	movzbl %al,%eax
  20db93:	48 83 c4 38          	add    $0x38,%rsp
  20db97:	c3                   	retq   
  20db98:	8a 44 24 0f          	mov    0xf(%rsp),%al
                } else if f.debug_upper_hex() {
  20db9c:	a8 01                	test   $0x1,%al
  20db9e:	75 19                	jne    20dbb9 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE+0x89>
  20dba0:	eb 00                	jmp    20dba2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE+0x72>
  20dba2:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  20dba7:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::Display::fmt(self, f)
  20dbac:	e8 af 20 00 00       	callq  20fc60 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hf973cc24cacf6f18E>
  20dbb1:	24 01                	and    $0x1,%al
  20dbb3:	88 44 24 27          	mov    %al,0x27(%rsp)
  20dbb7:	eb 19                	jmp    20dbd2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE+0xa2>
  20dbb9:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  20dbbe:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::UpperHex::fmt(self, f)
  20dbc3:	e8 98 06 00 00       	callq  20e260 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7de6054e6342aea3E>
  20dbc8:	24 01                	and    $0x1,%al
  20dbca:	88 44 24 27          	mov    %al,0x27(%rsp)
                } else if f.debug_upper_hex() {
  20dbce:	eb 00                	jmp    20dbd0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE+0xa0>
                if f.debug_lower_hex() {
  20dbd0:	eb b8                	jmp    20db8a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE+0x5a>
                } else if f.debug_upper_hex() {
  20dbd2:	eb fc                	jmp    20dbd0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6c040ab7a25747fdE+0xa0>
  20dbd4:	cc                   	int3   
  20dbd5:	cc                   	int3   
  20dbd6:	cc                   	int3   
  20dbd7:	cc                   	int3   
  20dbd8:	cc                   	int3   
  20dbd9:	cc                   	int3   
  20dbda:	cc                   	int3   
  20dbdb:	cc                   	int3   
  20dbdc:	cc                   	int3   
  20dbdd:	cc                   	int3   
  20dbde:	cc                   	int3   
  20dbdf:	cc                   	int3   

000000000020dbe0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E>:
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  20dbe0:	48 83 ec 38          	sub    $0x38,%rsp
  20dbe4:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20dbe9:	48 89 f8             	mov    %rdi,%rax
  20dbec:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  20dbf1:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20dbf6:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20dbfb:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
                if f.debug_lower_hex() {
  20dc00:	e8 3b 31 00 00       	callq  210d40 <_ZN4core3fmt9Formatter15debug_lower_hex17hb64b59229092e7f9E>
  20dc05:	88 44 24 26          	mov    %al,0x26(%rsp)
  20dc09:	8a 44 24 26          	mov    0x26(%rsp),%al
  20dc0d:	a8 01                	test   $0x1,%al
  20dc0f:	75 12                	jne    20dc23 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E+0x43>
  20dc11:	eb 00                	jmp    20dc13 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E+0x33>
  20dc13:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
                } else if f.debug_upper_hex() {
  20dc18:	e8 33 31 00 00       	callq  210d50 <_ZN4core3fmt9Formatter15debug_upper_hex17h1791008eaa6156e8E>
  20dc1d:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20dc21:	eb 25                	jmp    20dc48 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E+0x68>
  20dc23:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  20dc28:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::LowerHex::fmt(self, f)
  20dc2d:	e8 be 06 00 00       	callq  20e2f0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17he8aeedb5ba5b6efdE>
  20dc32:	24 01                	and    $0x1,%al
  20dc34:	88 44 24 27          	mov    %al,0x27(%rsp)
                if f.debug_lower_hex() {
  20dc38:	eb 00                	jmp    20dc3a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E+0x5a>
            }
  20dc3a:	8a 44 24 27          	mov    0x27(%rsp),%al
  20dc3e:	24 01                	and    $0x1,%al
  20dc40:	0f b6 c0             	movzbl %al,%eax
  20dc43:	48 83 c4 38          	add    $0x38,%rsp
  20dc47:	c3                   	retq   
  20dc48:	8a 44 24 0f          	mov    0xf(%rsp),%al
                } else if f.debug_upper_hex() {
  20dc4c:	a8 01                	test   $0x1,%al
  20dc4e:	75 19                	jne    20dc69 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E+0x89>
  20dc50:	eb 00                	jmp    20dc52 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E+0x72>
  20dc52:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  20dc57:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::Display::fmt(self, f)
  20dc5c:	e8 2f 21 00 00       	callq  20fd90 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E>
  20dc61:	24 01                	and    $0x1,%al
  20dc63:	88 44 24 27          	mov    %al,0x27(%rsp)
  20dc67:	eb 19                	jmp    20dc82 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E+0xa2>
  20dc69:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  20dc6e:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
                    fmt::UpperHex::fmt(self, f)
  20dc73:	e8 18 07 00 00       	callq  20e390 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hf56a3534b31be474E>
  20dc78:	24 01                	and    $0x1,%al
  20dc7a:	88 44 24 27          	mov    %al,0x27(%rsp)
                } else if f.debug_upper_hex() {
  20dc7e:	eb 00                	jmp    20dc80 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E+0xa0>
                if f.debug_lower_hex() {
  20dc80:	eb b8                	jmp    20dc3a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E+0x5a>
                } else if f.debug_upper_hex() {
  20dc82:	eb fc                	jmp    20dc80 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h80507b6ddab4e421E+0xa0>
  20dc84:	cc                   	int3   
  20dc85:	cc                   	int3   
  20dc86:	cc                   	int3   
  20dc87:	cc                   	int3   
  20dc88:	cc                   	int3   
  20dc89:	cc                   	int3   
  20dc8a:	cc                   	int3   
  20dc8b:	cc                   	int3   
  20dc8c:	cc                   	int3   
  20dc8d:	cc                   	int3   
  20dc8e:	cc                   	int3   
  20dc8f:	cc                   	int3   

000000000020dc90 <_ZN80_$LT$bootloader..boot_info..MemoryRegions$u20$as$u20$core..ops..deref..Deref$GT$5deref17h83924d426b7efd36E>:
    fn deref(&self) -> &Self::Target {
  20dc90:	48 83 ec 18          	sub    $0x18,%rsp
  20dc94:	48 89 f8             	mov    %rdi,%rax
  20dc97:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        unsafe { slice::from_raw_parts(self.ptr, self.len) }
  20dc9c:	48 8b 38             	mov    (%rax),%rdi
  20dc9f:	48 8b 70 08          	mov    0x8(%rax),%rsi
  20dca3:	e8 b8 03 00 00       	callq  20e060 <_ZN4core5slice3raw14from_raw_parts17hc50cd890b5a44043E>
  20dca8:	48 89 04 24          	mov    %rax,(%rsp)
  20dcac:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  20dcb1:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  20dcb6:	48 8b 04 24          	mov    (%rsp),%rax
    }
  20dcba:	48 83 c4 18          	add    $0x18,%rsp
  20dcbe:	c3                   	retq   
  20dcbf:	cc                   	int3   

000000000020dcc0 <_ZN10bootloader9boot_info11FrameBuffer4info17h83684cd9a74a1065E>:
    pub fn info(&self) -> FrameBufferInfo {
  20dcc0:	48 83 ec 18          	sub    $0x18,%rsp
  20dcc4:	48 89 f8             	mov    %rdi,%rax
  20dcc7:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20dccc:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
        self.info
  20dcd1:	48 83 c6 10          	add    $0x10,%rsi
  20dcd5:	ba 30 00 00 00       	mov    $0x30,%edx
  20dcda:	e8 e1 3b 00 00       	callq  2118c0 <memcpy>
  20dcdf:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  20dce4:	48 83 c4 18          	add    $0x18,%rsp
  20dce8:	c3                   	retq   
  20dce9:	cc                   	int3   
  20dcea:	cc                   	int3   
  20dceb:	cc                   	int3   
  20dcec:	cc                   	int3   
  20dced:	cc                   	int3   
  20dcee:	cc                   	int3   
  20dcef:	cc                   	int3   

000000000020dcf0 <_ZN72_$LT$bootloader..boot_info..MemoryRegion$u20$as$u20$core..fmt..Debug$GT$3fmt17h7b7f29e9503f8715E>:
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  20dcf0:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  20dcf7:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20dcfc:	48 89 f8             	mov    %rdi,%rax
  20dcff:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  20dd04:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  20dd09:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
    pub start: u64,
  20dd0e:	48 89 c1             	mov    %rax,%rcx
  20dd11:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  20dd16:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
    pub end: u64,
  20dd1b:	48 89 c1             	mov    %rax,%rcx
  20dd1e:	48 83 c1 08          	add    $0x8,%rcx
  20dd22:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  20dd27:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
    pub kind: MemoryRegionKind,
  20dd2c:	48 83 c0 10          	add    $0x10,%rax
  20dd30:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20dd35:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  20dd3a:	48 8d 35 5b 36 ff ff 	lea    -0xc9a5(%rip),%rsi        # 20139c <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x2a9>
  20dd41:	ba 0c 00 00 00       	mov    $0xc,%edx
  20dd46:	e8 15 30 00 00       	callq  210d60 <_ZN4core3fmt9Formatter12debug_struct17h5d99847e6c2ca81bE>
  20dd4b:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
  20dd52:	00 
  20dd53:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  20dd5a:	00 
  20dd5b:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  20dd62:	00 
  20dd63:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20dd68:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  20dd6f:	00 
  20dd70:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20dd75:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  20dd7a:	48 8d 4c 24 30       	lea    0x30(%rsp),%rcx
  20dd7f:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
  20dd86:	00 
    pub start: u64,
  20dd87:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20dd8c:	48 8d 4c 24 40       	lea    0x40(%rsp),%rcx
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  20dd91:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  20dd96:	48 8d 35 0b 36 ff ff 	lea    -0xc9f5(%rip),%rsi        # 2013a8 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x2b5>
  20dd9d:	ba 05 00 00 00       	mov    $0x5,%edx
  20dda2:	4c 8d 05 17 59 00 00 	lea    0x5917(%rip),%r8        # 2136c0 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x158>
  20dda9:	e8 02 09 00 00       	callq  20e6b0 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  20ddae:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
    pub end: u64,
  20ddb3:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20ddb8:	48 8d 4c 24 48       	lea    0x48(%rsp),%rcx
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  20ddbd:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  20ddc2:	48 8d 35 e4 35 ff ff 	lea    -0xca1c(%rip),%rsi        # 2013ad <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x2ba>
  20ddc9:	ba 03 00 00 00       	mov    $0x3,%edx
  20ddce:	4c 8d 05 eb 58 00 00 	lea    0x58eb(%rip),%r8        # 2136c0 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x158>
  20ddd5:	e8 d6 08 00 00       	callq  20e6b0 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  20ddda:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    pub kind: MemoryRegionKind,
  20dddf:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  20dde4:	48 8d 4c 24 50       	lea    0x50(%rsp),%rcx
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  20dde9:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  20ddee:	48 8d 35 93 32 ff ff 	lea    -0xcd6d(%rip),%rsi        # 201088 <_ZN9r3_kernel3cpu10exceptions3IDT17he44583177f5a1f5fE+0x101>
  20ddf5:	ba 04 00 00 00       	mov    $0x4,%edx
  20ddfa:	4c 8d 05 df 58 00 00 	lea    0x58df(%rip),%r8        # 2136e0 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x178>
  20de01:	e8 aa 08 00 00       	callq  20e6b0 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>
  20de06:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  20de0b:	e8 60 0a 00 00       	callq  20e870 <_ZN4core3fmt8builders11DebugStruct6finish17hc529cf49026acc64E>
  20de10:	88 44 24 0f          	mov    %al,0xf(%rsp)
  20de14:	8a 44 24 0f          	mov    0xf(%rsp),%al
  20de18:	24 01                	and    $0x1,%al
  20de1a:	0f b6 c0             	movzbl %al,%eax
  20de1d:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  20de24:	c3                   	retq   
  20de25:	cc                   	int3   
  20de26:	cc                   	int3   
  20de27:	cc                   	int3   
  20de28:	cc                   	int3   
  20de29:	cc                   	int3   
  20de2a:	cc                   	int3   
  20de2b:	cc                   	int3   
  20de2c:	cc                   	int3   
  20de2d:	cc                   	int3   
  20de2e:	cc                   	int3   
  20de2f:	cc                   	int3   

000000000020de30 <_ZN76_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..fmt..Debug$GT$3fmt17h44e0ad51517e9e51E>:
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  20de30:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  20de37:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  20de3c:	48 89 7c 24 78       	mov    %rdi,0x78(%rsp)
  20de41:	48 89 b4 24 80 00 00 	mov    %rsi,0x80(%rsp)
  20de48:	00 
  20de49:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  20de4e:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  20de53:	8b 00                	mov    (%rax),%eax
  20de55:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20de5a:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20de5f:	48 8d 0d 26 35 ff ff 	lea    -0xcada(%rip),%rcx        # 20138c <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x299>
  20de66:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  20de6a:	48 01 c8             	add    %rcx,%rax
  20de6d:	ff e0                	jmpq   *%rax
  20de6f:	0f 0b                	ud2    
  20de71:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  20de76:	48 8d 35 53 35 ff ff 	lea    -0xcaad(%rip),%rsi        # 2013d0 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x2dd>
  20de7d:	ba 06 00 00 00       	mov    $0x6,%edx
  20de82:	e8 99 2e 00 00       	callq  210d20 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20de87:	24 01                	and    $0x1,%al
  20de89:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  20de8d:	e9 c2 00 00 00       	jmpq   20df54 <_ZN76_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..fmt..Debug$GT$3fmt17h44e0ad51517e9e51E+0x124>
  20de92:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  20de97:	48 8d 35 28 35 ff ff 	lea    -0xcad8(%rip),%rsi        # 2013c6 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x2d3>
  20de9e:	ba 0a 00 00 00       	mov    $0xa,%edx
  20dea3:	e8 78 2e 00 00       	callq  210d20 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20dea8:	24 01                	and    $0x1,%al
  20deaa:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  20deae:	e9 a1 00 00 00       	jmpq   20df54 <_ZN76_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..fmt..Debug$GT$3fmt17h44e0ad51517e9e51E+0x124>
  20deb3:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
    UnknownUefi(u32),
  20deb8:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  20debd:	48 83 c0 04          	add    $0x4,%rax
  20dec1:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20dec6:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  20decd:	00 
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  20dece:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  20ded3:	48 8d 15 e1 34 ff ff 	lea    -0xcb1f(%rip),%rdx        # 2013bb <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x2c8>
  20deda:	b9 0b 00 00 00       	mov    $0xb,%ecx
  20dedf:	e8 9c 2e 00 00       	callq  210d80 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>
  20dee4:	eb 7f                	jmp    20df65 <_ZN76_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..fmt..Debug$GT$3fmt17h44e0ad51517e9e51E+0x135>
  20dee6:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
    UnknownBios(u32),
  20deeb:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  20def0:	48 83 c0 04          	add    $0x4,%rax
  20def4:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20def9:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  20df00:	00 
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  20df01:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  20df06:	48 8d 15 a3 34 ff ff 	lea    -0xcb5d(%rip),%rdx        # 2013b0 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x2bd>
  20df0d:	b9 0b 00 00 00       	mov    $0xb,%ecx
  20df12:	e8 69 2e 00 00       	callq  210d80 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>
  20df17:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20df1c:	48 8d 4c 24 58       	lea    0x58(%rsp),%rcx
  20df21:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
  20df28:	00 
    UnknownBios(u32),
  20df29:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  20df2e:	48 8d 74 24 70       	lea    0x70(%rsp),%rsi
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  20df33:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  20df38:	48 8d 15 c1 57 00 00 	lea    0x57c1(%rip),%rdx        # 213700 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x198>
  20df3f:	e8 7c 09 00 00       	callq  20e8c0 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>
  20df44:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  20df49:	e8 e2 0a 00 00       	callq  20ea30 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>
  20df4e:	24 01                	and    $0x1,%al
  20df50:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  20df54:	8a 44 24 2f          	mov    0x2f(%rsp),%al
  20df58:	24 01                	and    $0x1,%al
  20df5a:	0f b6 c0             	movzbl %al,%eax
  20df5d:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  20df64:	c3                   	retq   
  20df65:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20df6a:	48 8d 4c 24 38       	lea    0x38(%rsp),%rcx
  20df6f:	48 89 8c 24 a0 00 00 	mov    %rcx,0xa0(%rsp)
  20df76:	00 
    UnknownUefi(u32),
  20df77:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  20df7c:	48 8d 74 24 50       	lea    0x50(%rsp),%rsi
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
  20df81:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  20df86:	48 8d 15 73 57 00 00 	lea    0x5773(%rip),%rdx        # 213700 <_ZN3log15LOG_LEVEL_NAMES17hfba214540a7f7621E+0x198>
  20df8d:	e8 2e 09 00 00       	callq  20e8c0 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>
  20df92:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  20df97:	e8 94 0a 00 00       	callq  20ea30 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>
  20df9c:	24 01                	and    $0x1,%al
  20df9e:	88 44 24 2f          	mov    %al,0x2f(%rsp)
  20dfa2:	eb b0                	jmp    20df54 <_ZN76_$LT$bootloader..boot_info..MemoryRegionKind$u20$as$u20$core..fmt..Debug$GT$3fmt17h44e0ad51517e9e51E+0x124>
  20dfa4:	cc                   	int3   
  20dfa5:	cc                   	int3   
  20dfa6:	cc                   	int3   
  20dfa7:	cc                   	int3   
  20dfa8:	cc                   	int3   
  20dfa9:	cc                   	int3   
  20dfaa:	cc                   	int3   
  20dfab:	cc                   	int3   
  20dfac:	cc                   	int3   
  20dfad:	cc                   	int3   
  20dfae:	cc                   	int3   
  20dfaf:	cc                   	int3   

000000000020dfb0 <_ZN71_$LT$bootloader..boot_info..PixelFormat$u20$as$u20$core..fmt..Debug$GT$3fmt17h5578b0ee4a9cb7edE>:
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
  20dfb0:	48 83 ec 38          	sub    $0x38,%rsp
  20dfb4:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  20dfb9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  20dfbe:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  20dfc3:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  20dfc8:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  20dfcd:	8b 00                	mov    (%rax),%eax
  20dfcf:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20dfd4:	48 85 c0             	test   %rax,%rax
  20dfd7:	74 13                	je     20dfec <_ZN71_$LT$bootloader..boot_info..PixelFormat$u20$as$u20$core..fmt..Debug$GT$3fmt17h5578b0ee4a9cb7edE+0x3c>
  20dfd9:	eb 00                	jmp    20dfdb <_ZN71_$LT$bootloader..boot_info..PixelFormat$u20$as$u20$core..fmt..Debug$GT$3fmt17h5578b0ee4a9cb7edE+0x2b>
  20dfdb:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  20dfe0:	48 83 e8 01          	sub    $0x1,%rax
  20dfe4:	74 24                	je     20e00a <_ZN71_$LT$bootloader..boot_info..PixelFormat$u20$as$u20$core..fmt..Debug$GT$3fmt17h5578b0ee4a9cb7edE+0x5a>
  20dfe6:	eb 00                	jmp    20dfe8 <_ZN71_$LT$bootloader..boot_info..PixelFormat$u20$as$u20$core..fmt..Debug$GT$3fmt17h5578b0ee4a9cb7edE+0x38>
  20dfe8:	eb 3e                	jmp    20e028 <_ZN71_$LT$bootloader..boot_info..PixelFormat$u20$as$u20$core..fmt..Debug$GT$3fmt17h5578b0ee4a9cb7edE+0x78>
  20dfea:	0f 0b                	ud2    
  20dfec:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20dff1:	48 8d 35 e3 33 ff ff 	lea    -0xcc1d(%rip),%rsi        # 2013db <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x2e8>
  20dff8:	ba 03 00 00 00       	mov    $0x3,%edx
  20dffd:	e8 1e 2d 00 00       	callq  210d20 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20e002:	24 01                	and    $0x1,%al
  20e004:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  20e008:	eb 3a                	jmp    20e044 <_ZN71_$LT$bootloader..boot_info..PixelFormat$u20$as$u20$core..fmt..Debug$GT$3fmt17h5578b0ee4a9cb7edE+0x94>
  20e00a:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20e00f:	48 8d 35 c2 33 ff ff 	lea    -0xcc3e(%rip),%rsi        # 2013d8 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x2e5>
  20e016:	ba 03 00 00 00       	mov    $0x3,%edx
  20e01b:	e8 00 2d 00 00       	callq  210d20 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20e020:	24 01                	and    $0x1,%al
  20e022:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  20e026:	eb 1c                	jmp    20e044 <_ZN71_$LT$bootloader..boot_info..PixelFormat$u20$as$u20$core..fmt..Debug$GT$3fmt17h5578b0ee4a9cb7edE+0x94>
  20e028:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  20e02d:	48 8d 35 a2 33 ff ff 	lea    -0xcc5e(%rip),%rsi        # 2013d6 <_ZN3log6logger3NOP17ha8b888e78aa907e8E+0x2e3>
  20e034:	ba 02 00 00 00       	mov    $0x2,%edx
  20e039:	e8 e2 2c 00 00       	callq  210d20 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>
  20e03e:	24 01                	and    $0x1,%al
  20e040:	88 44 24 1f          	mov    %al,0x1f(%rsp)
  20e044:	8a 44 24 1f          	mov    0x1f(%rsp),%al
  20e048:	24 01                	and    $0x1,%al
  20e04a:	0f b6 c0             	movzbl %al,%eax
  20e04d:	48 83 c4 38          	add    $0x38,%rsp
  20e051:	c3                   	retq   
  20e052:	cc                   	int3   
  20e053:	cc                   	int3   
  20e054:	cc                   	int3   
  20e055:	cc                   	int3   
  20e056:	cc                   	int3   
  20e057:	cc                   	int3   
  20e058:	cc                   	int3   
  20e059:	cc                   	int3   
  20e05a:	cc                   	int3   
  20e05b:	cc                   	int3   
  20e05c:	cc                   	int3   
  20e05d:	cc                   	int3   
  20e05e:	cc                   	int3   
  20e05f:	cc                   	int3   

000000000020e060 <_ZN4core5slice3raw14from_raw_parts17hc50cd890b5a44043E>:
///
/// [valid]: ptr#safety
/// [`NonNull::dangling()`]: ptr::NonNull::dangling
#[inline]
#[stable(feature = "rust1", since = "1.0.0")]
pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {
  20e060:	48 83 ec 28          	sub    $0x28,%rsp
  20e064:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20e069:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    debug_assert!(
        mem::size_of::<T>().saturating_mul(len) <= isize::MAX as usize,
        "attempt to create slice covering at least half the address space"
    );
    // SAFETY: the caller must uphold the safety contract for `from_raw_parts`.
    unsafe { &*ptr::slice_from_raw_parts(data, len) }
  20e06e:	e8 5d f8 ff ff       	callq  20d8d0 <_ZN4core3ptr20slice_from_raw_parts17h9096e389242d0606E>
  20e073:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20e078:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  20e07d:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  20e082:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
}
  20e087:	48 83 c4 28          	add    $0x28,%rsp
  20e08b:	c3                   	retq   
  20e08c:	cc                   	int3   
  20e08d:	cc                   	int3   
  20e08e:	cc                   	int3   
  20e08f:	cc                   	int3   

000000000020e090 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h3a23d2d6b1316581E>:
  20e090:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  20e097:	0f b7 07             	movzwl (%rdi),%eax
  20e09a:	4c 8d 84 24 88 00 00 	lea    0x88(%rsp),%r8
  20e0a1:	00 
  20e0a2:	45 31 c9             	xor    %r9d,%r9d
  20e0a5:	41 ba 30 00 00 00    	mov    $0x30,%r10d
  20e0ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  20e0b0:	0f b7 d0             	movzwl %ax,%edx
  20e0b3:	89 d0                	mov    %edx,%eax
  20e0b5:	c1 e8 04             	shr    $0x4,%eax
  20e0b8:	89 d1                	mov    %edx,%ecx
  20e0ba:	80 e1 0f             	and    $0xf,%cl
  20e0bd:	80 f9 0a             	cmp    $0xa,%cl
  20e0c0:	bf 57 00 00 00       	mov    $0x57,%edi
  20e0c5:	41 0f 42 fa          	cmovb  %r10d,%edi
  20e0c9:	40 00 cf             	add    %cl,%dil
  20e0cc:	41 88 78 ff          	mov    %dil,-0x1(%r8)
  20e0d0:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  20e0d4:	49 83 c1 01          	add    $0x1,%r9
  20e0d8:	66 83 fa 0f          	cmp    $0xf,%dx
  20e0dc:	77 d2                	ja     20e0b0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h3a23d2d6b1316581E+0x20>
  20e0de:	bf 80 00 00 00       	mov    $0x80,%edi
  20e0e3:	4c 29 cf             	sub    %r9,%rdi
  20e0e6:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  20e0ed:	73 21                	jae    20e110 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h3a23d2d6b1316581E+0x80>
  20e0ef:	48 8d 15 5c 33 ff ff 	lea    -0xcca4(%rip),%rdx        # 201452 <anon.362945bbc83444f50f486d206938f0d7.3.llvm.10057850355689647526>
  20e0f6:	b9 02 00 00 00       	mov    $0x2,%ecx
  20e0fb:	48 89 f7             	mov    %rsi,%rdi
  20e0fe:	be 01 00 00 00       	mov    $0x1,%esi
  20e103:	e8 78 24 00 00       	callq  210580 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  20e108:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  20e10f:	c3                   	retq   
  20e110:	48 8d 15 09 56 00 00 	lea    0x5609(%rip),%rdx        # 213720 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526>
  20e117:	be 80 00 00 00       	mov    $0x80,%esi
  20e11c:	e8 6f 10 00 00       	callq  20f190 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  20e121:	0f 0b                	ud2    
  20e123:	cc                   	int3   
  20e124:	cc                   	int3   
  20e125:	cc                   	int3   
  20e126:	cc                   	int3   
  20e127:	cc                   	int3   
  20e128:	cc                   	int3   
  20e129:	cc                   	int3   
  20e12a:	cc                   	int3   
  20e12b:	cc                   	int3   
  20e12c:	cc                   	int3   
  20e12d:	cc                   	int3   
  20e12e:	cc                   	int3   
  20e12f:	cc                   	int3   

000000000020e130 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h0a0f68783d0d16dcE>:
  20e130:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  20e137:	0f b7 07             	movzwl (%rdi),%eax
  20e13a:	4c 8d 84 24 88 00 00 	lea    0x88(%rsp),%r8
  20e141:	00 
  20e142:	45 31 c9             	xor    %r9d,%r9d
  20e145:	41 ba 30 00 00 00    	mov    $0x30,%r10d
  20e14b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  20e150:	0f b7 d0             	movzwl %ax,%edx
  20e153:	89 d0                	mov    %edx,%eax
  20e155:	c1 e8 04             	shr    $0x4,%eax
  20e158:	89 d1                	mov    %edx,%ecx
  20e15a:	80 e1 0f             	and    $0xf,%cl
  20e15d:	80 f9 0a             	cmp    $0xa,%cl
  20e160:	bf 37 00 00 00       	mov    $0x37,%edi
  20e165:	41 0f 42 fa          	cmovb  %r10d,%edi
  20e169:	40 00 cf             	add    %cl,%dil
  20e16c:	41 88 78 ff          	mov    %dil,-0x1(%r8)
  20e170:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  20e174:	49 83 c1 01          	add    $0x1,%r9
  20e178:	66 83 fa 0f          	cmp    $0xf,%dx
  20e17c:	77 d2                	ja     20e150 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h0a0f68783d0d16dcE+0x20>
  20e17e:	bf 80 00 00 00       	mov    $0x80,%edi
  20e183:	4c 29 cf             	sub    %r9,%rdi
  20e186:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  20e18d:	73 21                	jae    20e1b0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h0a0f68783d0d16dcE+0x80>
  20e18f:	48 8d 15 bc 32 ff ff 	lea    -0xcd44(%rip),%rdx        # 201452 <anon.362945bbc83444f50f486d206938f0d7.3.llvm.10057850355689647526>
  20e196:	b9 02 00 00 00       	mov    $0x2,%ecx
  20e19b:	48 89 f7             	mov    %rsi,%rdi
  20e19e:	be 01 00 00 00       	mov    $0x1,%esi
  20e1a3:	e8 d8 23 00 00       	callq  210580 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  20e1a8:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  20e1af:	c3                   	retq   
  20e1b0:	48 8d 15 69 55 00 00 	lea    0x5569(%rip),%rdx        # 213720 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526>
  20e1b7:	be 80 00 00 00       	mov    $0x80,%esi
  20e1bc:	e8 cf 0f 00 00       	callq  20f190 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  20e1c1:	0f 0b                	ud2    
  20e1c3:	cc                   	int3   
  20e1c4:	cc                   	int3   
  20e1c5:	cc                   	int3   
  20e1c6:	cc                   	int3   
  20e1c7:	cc                   	int3   
  20e1c8:	cc                   	int3   
  20e1c9:	cc                   	int3   
  20e1ca:	cc                   	int3   
  20e1cb:	cc                   	int3   
  20e1cc:	cc                   	int3   
  20e1cd:	cc                   	int3   
  20e1ce:	cc                   	int3   
  20e1cf:	cc                   	int3   

000000000020e1d0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17ha57d44e8df250fa1E>:
  20e1d0:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  20e1d7:	8b 07                	mov    (%rdi),%eax
  20e1d9:	4c 8d 84 24 88 00 00 	lea    0x88(%rsp),%r8
  20e1e0:	00 
  20e1e1:	45 31 c9             	xor    %r9d,%r9d
  20e1e4:	41 ba 30 00 00 00    	mov    $0x30,%r10d
  20e1ea:	89 c2                	mov    %eax,%edx
  20e1ec:	0f 1f 40 00          	nopl   0x0(%rax)
  20e1f0:	c1 ea 04             	shr    $0x4,%edx
  20e1f3:	89 c1                	mov    %eax,%ecx
  20e1f5:	80 e1 0f             	and    $0xf,%cl
  20e1f8:	80 f9 0a             	cmp    $0xa,%cl
  20e1fb:	bf 57 00 00 00       	mov    $0x57,%edi
  20e200:	41 0f 42 fa          	cmovb  %r10d,%edi
  20e204:	40 00 cf             	add    %cl,%dil
  20e207:	41 88 78 ff          	mov    %dil,-0x1(%r8)
  20e20b:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  20e20f:	49 83 c1 01          	add    $0x1,%r9
  20e213:	83 f8 0f             	cmp    $0xf,%eax
  20e216:	89 d0                	mov    %edx,%eax
  20e218:	77 d6                	ja     20e1f0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17ha57d44e8df250fa1E+0x20>
  20e21a:	bf 80 00 00 00       	mov    $0x80,%edi
  20e21f:	4c 29 cf             	sub    %r9,%rdi
  20e222:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  20e229:	73 21                	jae    20e24c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17ha57d44e8df250fa1E+0x7c>
  20e22b:	48 8d 15 20 32 ff ff 	lea    -0xcde0(%rip),%rdx        # 201452 <anon.362945bbc83444f50f486d206938f0d7.3.llvm.10057850355689647526>
  20e232:	b9 02 00 00 00       	mov    $0x2,%ecx
  20e237:	48 89 f7             	mov    %rsi,%rdi
  20e23a:	be 01 00 00 00       	mov    $0x1,%esi
  20e23f:	e8 3c 23 00 00       	callq  210580 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  20e244:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  20e24b:	c3                   	retq   
  20e24c:	48 8d 15 cd 54 00 00 	lea    0x54cd(%rip),%rdx        # 213720 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526>
  20e253:	be 80 00 00 00       	mov    $0x80,%esi
  20e258:	e8 33 0f 00 00       	callq  20f190 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  20e25d:	0f 0b                	ud2    
  20e25f:	cc                   	int3   

000000000020e260 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7de6054e6342aea3E>:
  20e260:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  20e267:	8b 07                	mov    (%rdi),%eax
  20e269:	4c 8d 84 24 88 00 00 	lea    0x88(%rsp),%r8
  20e270:	00 
  20e271:	45 31 c9             	xor    %r9d,%r9d
  20e274:	41 ba 30 00 00 00    	mov    $0x30,%r10d
  20e27a:	89 c2                	mov    %eax,%edx
  20e27c:	0f 1f 40 00          	nopl   0x0(%rax)
  20e280:	c1 ea 04             	shr    $0x4,%edx
  20e283:	89 c1                	mov    %eax,%ecx
  20e285:	80 e1 0f             	and    $0xf,%cl
  20e288:	80 f9 0a             	cmp    $0xa,%cl
  20e28b:	bf 37 00 00 00       	mov    $0x37,%edi
  20e290:	41 0f 42 fa          	cmovb  %r10d,%edi
  20e294:	40 00 cf             	add    %cl,%dil
  20e297:	41 88 78 ff          	mov    %dil,-0x1(%r8)
  20e29b:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  20e29f:	49 83 c1 01          	add    $0x1,%r9
  20e2a3:	83 f8 0f             	cmp    $0xf,%eax
  20e2a6:	89 d0                	mov    %edx,%eax
  20e2a8:	77 d6                	ja     20e280 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7de6054e6342aea3E+0x20>
  20e2aa:	bf 80 00 00 00       	mov    $0x80,%edi
  20e2af:	4c 29 cf             	sub    %r9,%rdi
  20e2b2:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  20e2b9:	73 21                	jae    20e2dc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7de6054e6342aea3E+0x7c>
  20e2bb:	48 8d 15 90 31 ff ff 	lea    -0xce70(%rip),%rdx        # 201452 <anon.362945bbc83444f50f486d206938f0d7.3.llvm.10057850355689647526>
  20e2c2:	b9 02 00 00 00       	mov    $0x2,%ecx
  20e2c7:	48 89 f7             	mov    %rsi,%rdi
  20e2ca:	be 01 00 00 00       	mov    $0x1,%esi
  20e2cf:	e8 ac 22 00 00       	callq  210580 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  20e2d4:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  20e2db:	c3                   	retq   
  20e2dc:	48 8d 15 3d 54 00 00 	lea    0x543d(%rip),%rdx        # 213720 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526>
  20e2e3:	be 80 00 00 00       	mov    $0x80,%esi
  20e2e8:	e8 a3 0e 00 00       	callq  20f190 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  20e2ed:	0f 0b                	ud2    
  20e2ef:	cc                   	int3   

000000000020e2f0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17he8aeedb5ba5b6efdE>:
  20e2f0:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  20e2f7:	48 8b 07             	mov    (%rdi),%rax
  20e2fa:	4c 8d 84 24 88 00 00 	lea    0x88(%rsp),%r8
  20e301:	00 
  20e302:	45 31 c9             	xor    %r9d,%r9d
  20e305:	41 ba 30 00 00 00    	mov    $0x30,%r10d
  20e30b:	48 89 c2             	mov    %rax,%rdx
  20e30e:	66 90                	xchg   %ax,%ax
  20e310:	48 c1 ea 04          	shr    $0x4,%rdx
  20e314:	89 c1                	mov    %eax,%ecx
  20e316:	80 e1 0f             	and    $0xf,%cl
  20e319:	80 f9 0a             	cmp    $0xa,%cl
  20e31c:	bf 57 00 00 00       	mov    $0x57,%edi
  20e321:	41 0f 42 fa          	cmovb  %r10d,%edi
  20e325:	40 00 cf             	add    %cl,%dil
  20e328:	41 88 78 ff          	mov    %dil,-0x1(%r8)
  20e32c:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  20e330:	49 83 c1 01          	add    $0x1,%r9
  20e334:	48 83 f8 0f          	cmp    $0xf,%rax
  20e338:	48 89 d0             	mov    %rdx,%rax
  20e33b:	77 d3                	ja     20e310 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17he8aeedb5ba5b6efdE+0x20>
  20e33d:	bf 80 00 00 00       	mov    $0x80,%edi
  20e342:	4c 29 cf             	sub    %r9,%rdi
  20e345:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  20e34c:	73 21                	jae    20e36f <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17he8aeedb5ba5b6efdE+0x7f>
  20e34e:	48 8d 15 fd 30 ff ff 	lea    -0xcf03(%rip),%rdx        # 201452 <anon.362945bbc83444f50f486d206938f0d7.3.llvm.10057850355689647526>
  20e355:	b9 02 00 00 00       	mov    $0x2,%ecx
  20e35a:	48 89 f7             	mov    %rsi,%rdi
  20e35d:	be 01 00 00 00       	mov    $0x1,%esi
  20e362:	e8 19 22 00 00       	callq  210580 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  20e367:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  20e36e:	c3                   	retq   
  20e36f:	48 8d 15 aa 53 00 00 	lea    0x53aa(%rip),%rdx        # 213720 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526>
  20e376:	be 80 00 00 00       	mov    $0x80,%esi
  20e37b:	e8 10 0e 00 00       	callq  20f190 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  20e380:	0f 0b                	ud2    
  20e382:	cc                   	int3   
  20e383:	cc                   	int3   
  20e384:	cc                   	int3   
  20e385:	cc                   	int3   
  20e386:	cc                   	int3   
  20e387:	cc                   	int3   
  20e388:	cc                   	int3   
  20e389:	cc                   	int3   
  20e38a:	cc                   	int3   
  20e38b:	cc                   	int3   
  20e38c:	cc                   	int3   
  20e38d:	cc                   	int3   
  20e38e:	cc                   	int3   
  20e38f:	cc                   	int3   

000000000020e390 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hf56a3534b31be474E>:
  20e390:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  20e397:	48 8b 07             	mov    (%rdi),%rax
  20e39a:	4c 8d 84 24 88 00 00 	lea    0x88(%rsp),%r8
  20e3a1:	00 
  20e3a2:	45 31 c9             	xor    %r9d,%r9d
  20e3a5:	41 ba 30 00 00 00    	mov    $0x30,%r10d
  20e3ab:	48 89 c2             	mov    %rax,%rdx
  20e3ae:	66 90                	xchg   %ax,%ax
  20e3b0:	48 c1 ea 04          	shr    $0x4,%rdx
  20e3b4:	89 c1                	mov    %eax,%ecx
  20e3b6:	80 e1 0f             	and    $0xf,%cl
  20e3b9:	80 f9 0a             	cmp    $0xa,%cl
  20e3bc:	bf 37 00 00 00       	mov    $0x37,%edi
  20e3c1:	41 0f 42 fa          	cmovb  %r10d,%edi
  20e3c5:	40 00 cf             	add    %cl,%dil
  20e3c8:	41 88 78 ff          	mov    %dil,-0x1(%r8)
  20e3cc:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  20e3d0:	49 83 c1 01          	add    $0x1,%r9
  20e3d4:	48 83 f8 0f          	cmp    $0xf,%rax
  20e3d8:	48 89 d0             	mov    %rdx,%rax
  20e3db:	77 d3                	ja     20e3b0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hf56a3534b31be474E+0x20>
  20e3dd:	bf 80 00 00 00       	mov    $0x80,%edi
  20e3e2:	4c 29 cf             	sub    %r9,%rdi
  20e3e5:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  20e3ec:	73 21                	jae    20e40f <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hf56a3534b31be474E+0x7f>
  20e3ee:	48 8d 15 5d 30 ff ff 	lea    -0xcfa3(%rip),%rdx        # 201452 <anon.362945bbc83444f50f486d206938f0d7.3.llvm.10057850355689647526>
  20e3f5:	b9 02 00 00 00       	mov    $0x2,%ecx
  20e3fa:	48 89 f7             	mov    %rsi,%rdi
  20e3fd:	be 01 00 00 00       	mov    $0x1,%esi
  20e402:	e8 79 21 00 00       	callq  210580 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  20e407:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  20e40e:	c3                   	retq   
  20e40f:	48 8d 15 0a 53 00 00 	lea    0x530a(%rip),%rdx        # 213720 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526>
  20e416:	be 80 00 00 00       	mov    $0x80,%esi
  20e41b:	e8 70 0d 00 00       	callq  20f190 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  20e420:	0f 0b                	ud2    
  20e422:	cc                   	int3   
  20e423:	cc                   	int3   
  20e424:	cc                   	int3   
  20e425:	cc                   	int3   
  20e426:	cc                   	int3   
  20e427:	cc                   	int3   
  20e428:	cc                   	int3   
  20e429:	cc                   	int3   
  20e42a:	cc                   	int3   
  20e42b:	cc                   	int3   
  20e42c:	cc                   	int3   
  20e42d:	cc                   	int3   
  20e42e:	cc                   	int3   
  20e42f:	cc                   	int3   

000000000020e430 <_ZN4core3ptr25drop_in_place$LT$char$GT$17h7170306f6109ec38E.llvm.142292087146638061>:
  20e430:	c3                   	retq   
  20e431:	cc                   	int3   
  20e432:	cc                   	int3   
  20e433:	cc                   	int3   
  20e434:	cc                   	int3   
  20e435:	cc                   	int3   
  20e436:	cc                   	int3   
  20e437:	cc                   	int3   
  20e438:	cc                   	int3   
  20e439:	cc                   	int3   
  20e43a:	cc                   	int3   
  20e43b:	cc                   	int3   
  20e43c:	cc                   	int3   
  20e43d:	cc                   	int3   
  20e43e:	cc                   	int3   
  20e43f:	cc                   	int3   

000000000020e440 <_ZN4core6result13unwrap_failed17h381730a58d62d12fE>:
  20e440:	48 83 ec 78          	sub    $0x78,%rsp
  20e444:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20e449:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20e44e:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  20e453:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  20e458:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  20e45d:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20e462:	48 8d 05 37 34 00 00 	lea    0x3437(%rip),%rax        # 2118a0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17heacd4ee5f6ef5e5fE>
  20e469:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20e46e:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  20e473:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20e478:	48 8d 05 91 33 00 00 	lea    0x3391(%rip),%rax        # 211810 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0f1c2c822df607e7E>
  20e47f:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20e484:	48 8d 05 ad 52 00 00 	lea    0x52ad(%rip),%rax        # 213738 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526+0x18>
  20e48b:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20e490:	48 c7 44 24 50 02 00 	movq   $0x2,0x50(%rsp)
  20e497:	00 00 
  20e499:	48 c7 44 24 58 00 00 	movq   $0x0,0x58(%rsp)
  20e4a0:	00 00 
  20e4a2:	48 8d 44 24 28       	lea    0x28(%rsp),%rax
  20e4a7:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  20e4ac:	48 c7 44 24 70 02 00 	movq   $0x2,0x70(%rsp)
  20e4b3:	00 00 
  20e4b5:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
  20e4ba:	4c 89 c6             	mov    %r8,%rsi
  20e4bd:	e8 9e 0a 00 00       	callq  20ef60 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  20e4c2:	0f 0b                	ud2    
  20e4c4:	cc                   	int3   
  20e4c5:	cc                   	int3   
  20e4c6:	cc                   	int3   
  20e4c7:	cc                   	int3   
  20e4c8:	cc                   	int3   
  20e4c9:	cc                   	int3   
  20e4ca:	cc                   	int3   
  20e4cb:	cc                   	int3   
  20e4cc:	cc                   	int3   
  20e4cd:	cc                   	int3   
  20e4ce:	cc                   	int3   
  20e4cf:	cc                   	int3   

000000000020e4d0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>:
  20e4d0:	55                   	push   %rbp
  20e4d1:	41 57                	push   %r15
  20e4d3:	41 56                	push   %r14
  20e4d5:	41 55                	push   %r13
  20e4d7:	41 54                	push   %r12
  20e4d9:	53                   	push   %rbx
  20e4da:	50                   	push   %rax
  20e4db:	48 85 d2             	test   %rdx,%rdx
  20e4de:	0f 84 83 01 00 00    	je     20e667 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x197>
  20e4e4:	49 89 d5             	mov    %rdx,%r13
  20e4e7:	49 89 f6             	mov    %rsi,%r14
  20e4ea:	48 8b 6f 10          	mov    0x10(%rdi),%rbp
  20e4ee:	4c 8b 3f             	mov    (%rdi),%r15
  20e4f1:	48 8b 47 08          	mov    0x8(%rdi),%rax
  20e4f5:	48 89 04 24          	mov    %rax,(%rsp)
  20e4f9:	eb 2d                	jmp    20e528 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x58>
  20e4fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  20e500:	4c 89 ff             	mov    %r15,%rdi
  20e503:	4c 89 f6             	mov    %r14,%rsi
  20e506:	31 d2                	xor    %edx,%edx
  20e508:	48 8b 04 24          	mov    (%rsp),%rax
  20e50c:	ff 50 18             	callq  *0x18(%rax)
  20e50f:	bb 00 00 00 00       	mov    $0x0,%ebx
  20e514:	84 c0                	test   %al,%al
  20e516:	0f 85 47 01 00 00    	jne    20e663 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x193>
  20e51c:	49 01 de             	add    %rbx,%r14
  20e51f:	49 29 dd             	sub    %rbx,%r13
  20e522:	0f 84 3f 01 00 00    	je     20e667 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x197>
  20e528:	80 7d 00 00          	cmpb   $0x0,0x0(%rbp)
  20e52c:	74 1e                	je     20e54c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x7c>
  20e52e:	ba 04 00 00 00       	mov    $0x4,%edx
  20e533:	4c 89 ff             	mov    %r15,%rdi
  20e536:	48 8d 35 3b 2b ff ff 	lea    -0xd4c5(%rip),%rsi        # 201078 <_ZN9r3_kernel3cpu10exceptions3IDT17he44583177f5a1f5fE+0xf1>
  20e53d:	48 8b 04 24          	mov    (%rsp),%rax
  20e541:	ff 50 18             	callq  *0x18(%rax)
  20e544:	84 c0                	test   %al,%al
  20e546:	0f 85 17 01 00 00    	jne    20e663 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x193>
  20e54c:	45 31 e4             	xor    %r12d,%r12d
  20e54f:	4c 89 e8             	mov    %r13,%rax
  20e552:	4b 8d 34 26          	lea    (%r14,%r12,1),%rsi
  20e556:	48 83 f8 10          	cmp    $0x10,%rax
  20e55a:	72 24                	jb     20e580 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0xb0>
  20e55c:	0f 1f 40 00          	nopl   0x0(%rax)
  20e560:	bf 0a 00 00 00       	mov    $0xa,%edi
  20e565:	48 89 c2             	mov    %rax,%rdx
  20e568:	e8 c3 14 00 00       	callq  20fa30 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E>
  20e56d:	48 83 f8 01          	cmp    $0x1,%rax
  20e571:	74 4d                	je     20e5c0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0xf0>
  20e573:	e9 88 00 00 00       	jmpq   20e600 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x130>
  20e578:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  20e57f:	00 
  20e580:	31 d2                	xor    %edx,%edx
  20e582:	48 85 c0             	test   %rax,%rax
  20e585:	74 1b                	je     20e5a2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0xd2>
  20e587:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  20e58e:	00 00 
  20e590:	80 3c 16 0a          	cmpb   $0xa,(%rsi,%rdx,1)
  20e594:	74 1a                	je     20e5b0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0xe0>
  20e596:	48 83 c2 01          	add    $0x1,%rdx
  20e59a:	48 39 d0             	cmp    %rdx,%rax
  20e59d:	75 f1                	jne    20e590 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0xc0>
  20e59f:	48 89 c2             	mov    %rax,%rdx
  20e5a2:	31 c0                	xor    %eax,%eax
  20e5a4:	48 83 f8 01          	cmp    $0x1,%rax
  20e5a8:	74 16                	je     20e5c0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0xf0>
  20e5aa:	eb 54                	jmp    20e600 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x130>
  20e5ac:	0f 1f 40 00          	nopl   0x0(%rax)
  20e5b0:	b8 01 00 00 00       	mov    $0x1,%eax
  20e5b5:	48 83 f8 01          	cmp    $0x1,%rax
  20e5b9:	75 45                	jne    20e600 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x130>
  20e5bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  20e5c0:	49 01 d4             	add    %rdx,%r12
  20e5c3:	4c 89 e3             	mov    %r12,%rbx
  20e5c6:	48 ff c3             	inc    %rbx
  20e5c9:	74 0c                	je     20e5d7 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x107>
  20e5cb:	49 39 dd             	cmp    %rbx,%r13
  20e5ce:	72 07                	jb     20e5d7 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x107>
  20e5d0:	43 80 3c 26 0a       	cmpb   $0xa,(%r14,%r12,1)
  20e5d5:	74 66                	je     20e63d <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x16d>
  20e5d7:	4c 89 e8             	mov    %r13,%rax
  20e5da:	48 29 d8             	sub    %rbx,%rax
  20e5dd:	72 21                	jb     20e600 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x130>
  20e5df:	49 89 dc             	mov    %rbx,%r12
  20e5e2:	4b 8d 34 26          	lea    (%r14,%r12,1),%rsi
  20e5e6:	48 83 f8 10          	cmp    $0x10,%rax
  20e5ea:	72 94                	jb     20e580 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0xb0>
  20e5ec:	e9 6f ff ff ff       	jmpq   20e560 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x90>
  20e5f1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  20e5f8:	00 00 00 
  20e5fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  20e600:	c6 45 00 00          	movb   $0x0,0x0(%rbp)
  20e604:	4c 89 eb             	mov    %r13,%rbx
  20e607:	4d 85 ed             	test   %r13,%r13
  20e60a:	0f 84 f0 fe ff ff    	je     20e500 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x30>
  20e610:	49 39 dd             	cmp    %rbx,%r13
  20e613:	76 31                	jbe    20e646 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x176>
  20e615:	41 80 3c 1e bf       	cmpb   $0xbf,(%r14,%rbx,1)
  20e61a:	7e 5c                	jle    20e678 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x1a8>
  20e61c:	4c 89 ff             	mov    %r15,%rdi
  20e61f:	4c 89 f6             	mov    %r14,%rsi
  20e622:	48 89 da             	mov    %rbx,%rdx
  20e625:	48 8b 04 24          	mov    (%rsp),%rax
  20e629:	ff 50 18             	callq  *0x18(%rax)
  20e62c:	84 c0                	test   %al,%al
  20e62e:	75 33                	jne    20e663 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x193>
  20e630:	41 80 3c 1e bf       	cmpb   $0xbf,(%r14,%rbx,1)
  20e635:	0f 8f e1 fe ff ff    	jg     20e51c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x4c>
  20e63b:	eb 54                	jmp    20e691 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x1c1>
  20e63d:	c6 45 00 01          	movb   $0x1,0x0(%rbp)
  20e641:	49 39 dd             	cmp    %rbx,%r13
  20e644:	77 cf                	ja     20e615 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x145>
  20e646:	75 30                	jne    20e678 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x1a8>
  20e648:	4c 89 ff             	mov    %r15,%rdi
  20e64b:	4c 89 f6             	mov    %r14,%rsi
  20e64e:	4c 89 ea             	mov    %r13,%rdx
  20e651:	48 8b 04 24          	mov    (%rsp),%rax
  20e655:	ff 50 18             	callq  *0x18(%rax)
  20e658:	4c 89 eb             	mov    %r13,%rbx
  20e65b:	84 c0                	test   %al,%al
  20e65d:	0f 84 b9 fe ff ff    	je     20e51c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x4c>
  20e663:	b0 01                	mov    $0x1,%al
  20e665:	eb 02                	jmp    20e669 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE+0x199>
  20e667:	31 c0                	xor    %eax,%eax
  20e669:	48 83 c4 08          	add    $0x8,%rsp
  20e66d:	5b                   	pop    %rbx
  20e66e:	41 5c                	pop    %r12
  20e670:	41 5d                	pop    %r13
  20e672:	41 5e                	pop    %r14
  20e674:	41 5f                	pop    %r15
  20e676:	5d                   	pop    %rbp
  20e677:	c3                   	retq   
  20e678:	4c 8d 05 d9 50 00 00 	lea    0x50d9(%rip),%r8        # 213758 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526+0x38>
  20e67f:	4c 89 f7             	mov    %r14,%rdi
  20e682:	4c 89 ee             	mov    %r13,%rsi
  20e685:	31 d2                	xor    %edx,%edx
  20e687:	48 89 d9             	mov    %rbx,%rcx
  20e68a:	e8 31 18 00 00       	callq  20fec0 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E>
  20e68f:	0f 0b                	ud2    
  20e691:	4c 8d 05 d8 50 00 00 	lea    0x50d8(%rip),%r8        # 213770 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526+0x50>
  20e698:	4c 89 f7             	mov    %r14,%rdi
  20e69b:	4c 89 ee             	mov    %r13,%rsi
  20e69e:	48 89 da             	mov    %rbx,%rdx
  20e6a1:	4c 89 e9             	mov    %r13,%rcx
  20e6a4:	e8 17 18 00 00       	callq  20fec0 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E>
  20e6a9:	0f 0b                	ud2    
  20e6ab:	cc                   	int3   
  20e6ac:	cc                   	int3   
  20e6ad:	cc                   	int3   
  20e6ae:	cc                   	int3   
  20e6af:	cc                   	int3   

000000000020e6b0 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E>:
  20e6b0:	55                   	push   %rbp
  20e6b1:	41 57                	push   %r15
  20e6b3:	41 56                	push   %r14
  20e6b5:	41 55                	push   %r13
  20e6b7:	41 54                	push   %r12
  20e6b9:	53                   	push   %rbx
  20e6ba:	48 83 ec 68          	sub    $0x68,%rsp
  20e6be:	48 89 fb             	mov    %rdi,%rbx
  20e6c1:	41 b4 01             	mov    $0x1,%r12b
  20e6c4:	80 7f 08 00          	cmpb   $0x0,0x8(%rdi)
  20e6c8:	74 1a                	je     20e6e4 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0x34>
  20e6ca:	44 88 63 08          	mov    %r12b,0x8(%rbx)
  20e6ce:	c6 43 09 01          	movb   $0x1,0x9(%rbx)
  20e6d2:	48 89 d8             	mov    %rbx,%rax
  20e6d5:	48 83 c4 68          	add    $0x68,%rsp
  20e6d9:	5b                   	pop    %rbx
  20e6da:	41 5c                	pop    %r12
  20e6dc:	41 5d                	pop    %r13
  20e6de:	41 5e                	pop    %r14
  20e6e0:	41 5f                	pop    %r15
  20e6e2:	5d                   	pop    %rbp
  20e6e3:	c3                   	retq   
  20e6e4:	49 89 cf             	mov    %rcx,%r15
  20e6e7:	49 89 d5             	mov    %rdx,%r13
  20e6ea:	49 89 f6             	mov    %rsi,%r14
  20e6ed:	48 8b 2b             	mov    (%rbx),%rbp
  20e6f0:	8b 45 30             	mov    0x30(%rbp),%eax
  20e6f3:	8a 4b 09             	mov    0x9(%rbx),%cl
  20e6f6:	a8 04                	test   $0x4,%al
  20e6f8:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  20e6fd:	75 73                	jne    20e772 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0xc2>
  20e6ff:	31 d2                	xor    %edx,%edx
  20e701:	84 c9                	test   %cl,%cl
  20e703:	48 8d 05 94 2e ff ff 	lea    -0xd16c(%rip),%rax        # 20159e <anon.8c5785e28e68a0869ce162bce53fbf2c.27.llvm.142292087146638061>
  20e70a:	48 8d 35 8b 2e ff ff 	lea    -0xd175(%rip),%rsi        # 20159c <anon.8c5785e28e68a0869ce162bce53fbf2c.26.llvm.142292087146638061>
  20e711:	48 0f 44 f0          	cmove  %rax,%rsi
  20e715:	0f 94 c2             	sete   %dl
  20e718:	48 83 ca 02          	or     $0x2,%rdx
  20e71c:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
  20e720:	48 8b 45 28          	mov    0x28(%rbp),%rax
  20e724:	ff 50 18             	callq  *0x18(%rax)
  20e727:	84 c0                	test   %al,%al
  20e729:	75 9f                	jne    20e6ca <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0x1a>
  20e72b:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
  20e72f:	48 8b 45 28          	mov    0x28(%rbp),%rax
  20e733:	4c 89 f6             	mov    %r14,%rsi
  20e736:	4c 89 ea             	mov    %r13,%rdx
  20e739:	ff 50 18             	callq  *0x18(%rax)
  20e73c:	84 c0                	test   %al,%al
  20e73e:	75 8a                	jne    20e6ca <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0x1a>
  20e740:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
  20e744:	48 8b 45 28          	mov    0x28(%rbp),%rax
  20e748:	48 8d 35 cd 2d ff ff 	lea    -0xd233(%rip),%rsi        # 20151c <anon.8c5785e28e68a0869ce162bce53fbf2c.18.llvm.142292087146638061>
  20e74f:	ba 02 00 00 00       	mov    $0x2,%edx
  20e754:	ff 50 18             	callq  *0x18(%rax)
  20e757:	84 c0                	test   %al,%al
  20e759:	0f 85 6b ff ff ff    	jne    20e6ca <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0x1a>
  20e75f:	4c 89 ff             	mov    %r15,%rdi
  20e762:	48 89 ee             	mov    %rbp,%rsi
  20e765:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20e76a:	ff 50 18             	callq  *0x18(%rax)
  20e76d:	e9 f5 00 00 00       	jmpq   20e867 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0x1b7>
  20e772:	84 c9                	test   %cl,%cl
  20e774:	75 22                	jne    20e798 <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0xe8>
  20e776:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
  20e77a:	48 8b 45 28          	mov    0x28(%rbp),%rax
  20e77e:	48 8d 35 12 2e ff ff 	lea    -0xd1ee(%rip),%rsi        # 201597 <anon.8c5785e28e68a0869ce162bce53fbf2c.24.llvm.142292087146638061>
  20e785:	ba 03 00 00 00       	mov    $0x3,%edx
  20e78a:	ff 50 18             	callq  *0x18(%rax)
  20e78d:	84 c0                	test   %al,%al
  20e78f:	0f 85 35 ff ff ff    	jne    20e6ca <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0x1a>
  20e795:	8b 45 30             	mov    0x30(%rbp),%eax
  20e798:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  20e79d:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
  20e7a1:	48 8b 55 28          	mov    0x28(%rbp),%rdx
  20e7a5:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  20e7aa:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  20e7af:	48 8d 4c 24 07       	lea    0x7(%rsp),%rcx
  20e7b4:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  20e7b9:	8b 4d 34             	mov    0x34(%rbp),%ecx
  20e7bc:	8a 55 38             	mov    0x38(%rbp),%dl
  20e7bf:	48 8b 75 00          	mov    0x0(%rbp),%rsi
  20e7c3:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
  20e7c7:	4c 8b 45 10          	mov    0x10(%rbp),%r8
  20e7cb:	48 8b 6d 18          	mov    0x18(%rbp),%rbp
  20e7cf:	89 44 24 58          	mov    %eax,0x58(%rsp)
  20e7d3:	89 4c 24 5c          	mov    %ecx,0x5c(%rsp)
  20e7d7:	88 54 24 60          	mov    %dl,0x60(%rsp)
  20e7db:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  20e7e0:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  20e7e5:	4c 89 44 24 38       	mov    %r8,0x38(%rsp)
  20e7ea:	48 89 6c 24 40       	mov    %rbp,0x40(%rsp)
  20e7ef:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  20e7f4:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  20e7f9:	48 8d 05 88 52 00 00 	lea    0x5288(%rip),%rax        # 213a88 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467>
  20e800:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  20e805:	4c 89 f6             	mov    %r14,%rsi
  20e808:	4c 89 ea             	mov    %r13,%rdx
  20e80b:	e8 c0 fc ff ff       	callq  20e4d0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  20e810:	84 c0                	test   %al,%al
  20e812:	0f 85 b2 fe ff ff    	jne    20e6ca <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0x1a>
  20e818:	48 8d 35 fd 2c ff ff 	lea    -0xd303(%rip),%rsi        # 20151c <anon.8c5785e28e68a0869ce162bce53fbf2c.18.llvm.142292087146638061>
  20e81f:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  20e824:	ba 02 00 00 00       	mov    $0x2,%edx
  20e829:	e8 a2 fc ff ff       	callq  20e4d0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  20e82e:	84 c0                	test   %al,%al
  20e830:	0f 85 94 fe ff ff    	jne    20e6ca <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0x1a>
  20e836:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  20e83b:	4c 89 ff             	mov    %r15,%rdi
  20e83e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  20e843:	ff 50 18             	callq  *0x18(%rax)
  20e846:	84 c0                	test   %al,%al
  20e848:	0f 85 7c fe ff ff    	jne    20e6ca <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0x1a>
  20e84e:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  20e853:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  20e858:	48 8d 35 3b 2d ff ff 	lea    -0xd2c5(%rip),%rsi        # 20159a <anon.8c5785e28e68a0869ce162bce53fbf2c.25.llvm.142292087146638061>
  20e85f:	ba 02 00 00 00       	mov    $0x2,%edx
  20e864:	ff 50 18             	callq  *0x18(%rax)
  20e867:	41 89 c4             	mov    %eax,%r12d
  20e86a:	e9 5b fe ff ff       	jmpq   20e6ca <_ZN4core3fmt8builders11DebugStruct5field17h33771043526642b6E+0x1a>
  20e86f:	cc                   	int3   

000000000020e870 <_ZN4core3fmt8builders11DebugStruct6finish17hc529cf49026acc64E>:
  20e870:	53                   	push   %rbx
  20e871:	80 7f 09 00          	cmpb   $0x0,0x9(%rdi)
  20e875:	8a 47 08             	mov    0x8(%rdi),%al
  20e878:	74 42                	je     20e8bc <_ZN4core3fmt8builders11DebugStruct6finish17hc529cf49026acc64E+0x4c>
  20e87a:	48 89 fb             	mov    %rdi,%rbx
  20e87d:	84 c0                	test   %al,%al
  20e87f:	b0 01                	mov    $0x1,%al
  20e881:	75 36                	jne    20e8b9 <_ZN4core3fmt8builders11DebugStruct6finish17hc529cf49026acc64E+0x49>
  20e883:	48 8b 03             	mov    (%rbx),%rax
  20e886:	f6 40 30 04          	testb  $0x4,0x30(%rax)
  20e88a:	75 16                	jne    20e8a2 <_ZN4core3fmt8builders11DebugStruct6finish17hc529cf49026acc64E+0x32>
  20e88c:	48 8b 78 20          	mov    0x20(%rax),%rdi
  20e890:	48 8b 40 28          	mov    0x28(%rax),%rax
  20e894:	48 8d 35 07 2d ff ff 	lea    -0xd2f9(%rip),%rsi        # 2015a2 <anon.8c5785e28e68a0869ce162bce53fbf2c.32.llvm.142292087146638061>
  20e89b:	ba 02 00 00 00       	mov    $0x2,%edx
  20e8a0:	eb 14                	jmp    20e8b6 <_ZN4core3fmt8builders11DebugStruct6finish17hc529cf49026acc64E+0x46>
  20e8a2:	48 8b 78 20          	mov    0x20(%rax),%rdi
  20e8a6:	48 8b 40 28          	mov    0x28(%rax),%rax
  20e8aa:	48 8d 35 f0 2c ff ff 	lea    -0xd310(%rip),%rsi        # 2015a1 <anon.8c5785e28e68a0869ce162bce53fbf2c.29.llvm.142292087146638061>
  20e8b1:	ba 01 00 00 00       	mov    $0x1,%edx
  20e8b6:	ff 50 18             	callq  *0x18(%rax)
  20e8b9:	88 43 08             	mov    %al,0x8(%rbx)
  20e8bc:	5b                   	pop    %rbx
  20e8bd:	c3                   	retq   
  20e8be:	cc                   	int3   
  20e8bf:	cc                   	int3   

000000000020e8c0 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E>:
  20e8c0:	41 57                	push   %r15
  20e8c2:	41 56                	push   %r14
  20e8c4:	41 55                	push   %r13
  20e8c6:	41 54                	push   %r12
  20e8c8:	53                   	push   %rbx
  20e8c9:	48 83 ec 60          	sub    $0x60,%rsp
  20e8cd:	48 89 fb             	mov    %rdi,%rbx
  20e8d0:	80 7f 10 00          	cmpb   $0x0,0x10(%rdi)
  20e8d4:	74 22                	je     20e8f8 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E+0x38>
  20e8d6:	4c 8b 6b 08          	mov    0x8(%rbx),%r13
  20e8da:	b0 01                	mov    $0x1,%al
  20e8dc:	88 43 10             	mov    %al,0x10(%rbx)
  20e8df:	49 83 c5 01          	add    $0x1,%r13
  20e8e3:	4c 89 6b 08          	mov    %r13,0x8(%rbx)
  20e8e7:	48 89 d8             	mov    %rbx,%rax
  20e8ea:	48 83 c4 60          	add    $0x60,%rsp
  20e8ee:	5b                   	pop    %rbx
  20e8ef:	41 5c                	pop    %r12
  20e8f1:	41 5d                	pop    %r13
  20e8f3:	41 5e                	pop    %r14
  20e8f5:	41 5f                	pop    %r15
  20e8f7:	c3                   	retq   
  20e8f8:	49 89 d6             	mov    %rdx,%r14
  20e8fb:	49 89 f7             	mov    %rsi,%r15
  20e8fe:	4c 8b 23             	mov    (%rbx),%r12
  20e901:	4c 8b 6b 08          	mov    0x8(%rbx),%r13
  20e905:	41 8b 44 24 30       	mov    0x30(%r12),%eax
  20e90a:	a8 04                	test   $0x4,%al
  20e90c:	75 43                	jne    20e951 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E+0x91>
  20e90e:	31 c0                	xor    %eax,%eax
  20e910:	4d 85 ed             	test   %r13,%r13
  20e913:	0f 94 c0             	sete   %al
  20e916:	48 8d 0d 89 2c ff ff 	lea    -0xd377(%rip),%rcx        # 2015a6 <anon.8c5785e28e68a0869ce162bce53fbf2c.34.llvm.142292087146638061>
  20e91d:	48 8d 35 78 2c ff ff 	lea    -0xd388(%rip),%rsi        # 20159c <anon.8c5785e28e68a0869ce162bce53fbf2c.26.llvm.142292087146638061>
  20e924:	48 0f 44 f1          	cmove  %rcx,%rsi
  20e928:	ba 02 00 00 00       	mov    $0x2,%edx
  20e92d:	48 29 c2             	sub    %rax,%rdx
  20e930:	49 8b 7c 24 20       	mov    0x20(%r12),%rdi
  20e935:	49 8b 44 24 28       	mov    0x28(%r12),%rax
  20e93a:	ff 50 18             	callq  *0x18(%rax)
  20e93d:	89 c1                	mov    %eax,%ecx
  20e93f:	b0 01                	mov    $0x1,%al
  20e941:	84 c9                	test   %cl,%cl
  20e943:	75 97                	jne    20e8dc <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E+0x1c>
  20e945:	4c 89 ff             	mov    %r15,%rdi
  20e948:	4c 89 e6             	mov    %r12,%rsi
  20e94b:	41 ff 56 18          	callq  *0x18(%r14)
  20e94f:	eb 8b                	jmp    20e8dc <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E+0x1c>
  20e951:	4d 85 ed             	test   %r13,%r13
  20e954:	75 2c                	jne    20e982 <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E+0xc2>
  20e956:	49 8b 7c 24 20       	mov    0x20(%r12),%rdi
  20e95b:	49 8b 44 24 28       	mov    0x28(%r12),%rax
  20e960:	48 8d 35 3d 2c ff ff 	lea    -0xd3c3(%rip),%rsi        # 2015a4 <anon.8c5785e28e68a0869ce162bce53fbf2c.33.llvm.142292087146638061>
  20e967:	ba 02 00 00 00       	mov    $0x2,%edx
  20e96c:	ff 50 18             	callq  *0x18(%rax)
  20e96f:	84 c0                	test   %al,%al
  20e971:	74 0a                	je     20e97d <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E+0xbd>
  20e973:	b0 01                	mov    $0x1,%al
  20e975:	45 31 ed             	xor    %r13d,%r13d
  20e978:	e9 5f ff ff ff       	jmpq   20e8dc <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E+0x1c>
  20e97d:	41 8b 44 24 30       	mov    0x30(%r12),%eax
  20e982:	c6 44 24 07 01       	movb   $0x1,0x7(%rsp)
  20e987:	49 8b 4c 24 20       	mov    0x20(%r12),%rcx
  20e98c:	49 8b 54 24 28       	mov    0x28(%r12),%rdx
  20e991:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  20e996:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  20e99b:	48 8d 4c 24 07       	lea    0x7(%rsp),%rcx
  20e9a0:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  20e9a5:	41 8b 4c 24 34       	mov    0x34(%r12),%ecx
  20e9aa:	41 8a 54 24 38       	mov    0x38(%r12),%dl
  20e9af:	49 8b 34 24          	mov    (%r12),%rsi
  20e9b3:	49 8b 7c 24 08       	mov    0x8(%r12),%rdi
  20e9b8:	4d 8b 44 24 10       	mov    0x10(%r12),%r8
  20e9bd:	4d 8b 4c 24 18       	mov    0x18(%r12),%r9
  20e9c2:	89 44 24 38          	mov    %eax,0x38(%rsp)
  20e9c6:	89 4c 24 3c          	mov    %ecx,0x3c(%rsp)
  20e9ca:	88 54 24 40          	mov    %dl,0x40(%rsp)
  20e9ce:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  20e9d3:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  20e9d8:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
  20e9dd:	4c 89 4c 24 20       	mov    %r9,0x20(%rsp)
  20e9e2:	48 8d 44 24 48       	lea    0x48(%rsp),%rax
  20e9e7:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20e9ec:	48 8d 05 95 50 00 00 	lea    0x5095(%rip),%rax        # 213a88 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467>
  20e9f3:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20e9f8:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
  20e9fd:	4c 89 ff             	mov    %r15,%rdi
  20ea00:	41 ff 56 18          	callq  *0x18(%r14)
  20ea04:	84 c0                	test   %al,%al
  20ea06:	0f 85 ce fe ff ff    	jne    20e8da <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E+0x1a>
  20ea0c:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  20ea11:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  20ea16:	48 8d 35 7d 2b ff ff 	lea    -0xd483(%rip),%rsi        # 20159a <anon.8c5785e28e68a0869ce162bce53fbf2c.25.llvm.142292087146638061>
  20ea1d:	ba 02 00 00 00       	mov    $0x2,%edx
  20ea22:	ff 50 18             	callq  *0x18(%rax)
  20ea25:	e9 b2 fe ff ff       	jmpq   20e8dc <_ZN4core3fmt8builders10DebugTuple5field17h7e0c5705d7125d58E+0x1c>
  20ea2a:	cc                   	int3   
  20ea2b:	cc                   	int3   
  20ea2c:	cc                   	int3   
  20ea2d:	cc                   	int3   
  20ea2e:	cc                   	int3   
  20ea2f:	cc                   	int3   

000000000020ea30 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE>:
  20ea30:	55                   	push   %rbp
  20ea31:	53                   	push   %rbx
  20ea32:	50                   	push   %rax
  20ea33:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
  20ea37:	8a 47 10             	mov    0x10(%rdi),%al
  20ea3a:	48 85 c9             	test   %rcx,%rcx
  20ea3d:	74 5c                	je     20ea9b <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE+0x6b>
  20ea3f:	48 89 fb             	mov    %rdi,%rbx
  20ea42:	40 b5 01             	mov    $0x1,%bpl
  20ea45:	84 c0                	test   %al,%al
  20ea47:	75 4c                	jne    20ea95 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE+0x65>
  20ea49:	48 83 f9 01          	cmp    $0x1,%rcx
  20ea4d:	75 2a                	jne    20ea79 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE+0x49>
  20ea4f:	80 7b 11 00          	cmpb   $0x0,0x11(%rbx)
  20ea53:	74 24                	je     20ea79 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE+0x49>
  20ea55:	48 8b 03             	mov    (%rbx),%rax
  20ea58:	f6 40 30 04          	testb  $0x4,0x30(%rax)
  20ea5c:	75 1b                	jne    20ea79 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE+0x49>
  20ea5e:	48 8b 78 20          	mov    0x20(%rax),%rdi
  20ea62:	48 8b 40 28          	mov    0x28(%rax),%rax
  20ea66:	48 8d 35 3a 2b ff ff 	lea    -0xd4c6(%rip),%rsi        # 2015a7 <anon.8c5785e28e68a0869ce162bce53fbf2c.35.llvm.142292087146638061>
  20ea6d:	ba 01 00 00 00       	mov    $0x1,%edx
  20ea72:	ff 50 18             	callq  *0x18(%rax)
  20ea75:	84 c0                	test   %al,%al
  20ea77:	75 1c                	jne    20ea95 <_ZN4core3fmt8builders10DebugTuple6finish17h6a1f8b2eab7467deE+0x65>
  20ea79:	48 8b 03             	mov    (%rbx),%rax
  20ea7c:	48 8b 78 20          	mov    0x20(%rax),%rdi
  20ea80:	48 8b 40 28          	mov    0x28(%rax),%rax
  20ea84:	48 8d 35 1d 2b ff ff 	lea    -0xd4e3(%rip),%rsi        # 2015a8 <anon.8c5785e28e68a0869ce162bce53fbf2c.36.llvm.142292087146638061>
  20ea8b:	ba 01 00 00 00       	mov    $0x1,%edx
  20ea90:	ff 50 18             	callq  *0x18(%rax)
  20ea93:	89 c5                	mov    %eax,%ebp
  20ea95:	40 88 6b 10          	mov    %bpl,0x10(%rbx)
  20ea99:	89 e8                	mov    %ebp,%eax
  20ea9b:	48 83 c4 08          	add    $0x8,%rsp
  20ea9f:	5b                   	pop    %rbx
  20eaa0:	5d                   	pop    %rbp
  20eaa1:	c3                   	retq   
  20eaa2:	cc                   	int3   
  20eaa3:	cc                   	int3   
  20eaa4:	cc                   	int3   
  20eaa5:	cc                   	int3   
  20eaa6:	cc                   	int3   
  20eaa7:	cc                   	int3   
  20eaa8:	cc                   	int3   
  20eaa9:	cc                   	int3   
  20eaaa:	cc                   	int3   
  20eaab:	cc                   	int3   
  20eaac:	cc                   	int3   
  20eaad:	cc                   	int3   
  20eaae:	cc                   	int3   
  20eaaf:	cc                   	int3   

000000000020eab0 <_ZN4core3fmt5Write10write_char17ha17e656a64a90968E>:
  20eab0:	50                   	push   %rax
  20eab1:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%rsp)
  20eab8:	00 
  20eab9:	81 fe 80 00 00 00    	cmp    $0x80,%esi
  20eabf:	73 16                	jae    20ead7 <_ZN4core3fmt5Write10write_char17ha17e656a64a90968E+0x27>
  20eac1:	40 88 74 24 04       	mov    %sil,0x4(%rsp)
  20eac6:	ba 01 00 00 00       	mov    $0x1,%edx
  20eacb:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  20ead0:	e8 fb f9 ff ff       	callq  20e4d0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  20ead5:	59                   	pop    %rcx
  20ead6:	c3                   	retq   
  20ead7:	89 f0                	mov    %esi,%eax
  20ead9:	81 fe 00 08 00 00    	cmp    $0x800,%esi
  20eadf:	73 27                	jae    20eb08 <_ZN4core3fmt5Write10write_char17ha17e656a64a90968E+0x58>
  20eae1:	c1 e8 06             	shr    $0x6,%eax
  20eae4:	0c c0                	or     $0xc0,%al
  20eae6:	88 44 24 04          	mov    %al,0x4(%rsp)
  20eaea:	40 80 e6 3f          	and    $0x3f,%sil
  20eaee:	40 80 ce 80          	or     $0x80,%sil
  20eaf2:	40 88 74 24 05       	mov    %sil,0x5(%rsp)
  20eaf7:	ba 02 00 00 00       	mov    $0x2,%edx
  20eafc:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  20eb01:	e8 ca f9 ff ff       	callq  20e4d0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  20eb06:	59                   	pop    %rcx
  20eb07:	c3                   	retq   
  20eb08:	81 fe 00 00 01 00    	cmp    $0x10000,%esi
  20eb0e:	73 34                	jae    20eb44 <_ZN4core3fmt5Write10write_char17ha17e656a64a90968E+0x94>
  20eb10:	c1 e8 0c             	shr    $0xc,%eax
  20eb13:	0c e0                	or     $0xe0,%al
  20eb15:	88 44 24 04          	mov    %al,0x4(%rsp)
  20eb19:	89 f0                	mov    %esi,%eax
  20eb1b:	c1 e8 06             	shr    $0x6,%eax
  20eb1e:	24 3f                	and    $0x3f,%al
  20eb20:	0c 80                	or     $0x80,%al
  20eb22:	88 44 24 05          	mov    %al,0x5(%rsp)
  20eb26:	40 80 e6 3f          	and    $0x3f,%sil
  20eb2a:	40 80 ce 80          	or     $0x80,%sil
  20eb2e:	40 88 74 24 06       	mov    %sil,0x6(%rsp)
  20eb33:	ba 03 00 00 00       	mov    $0x3,%edx
  20eb38:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  20eb3d:	e8 8e f9 ff ff       	callq  20e4d0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  20eb42:	59                   	pop    %rcx
  20eb43:	c3                   	retq   
  20eb44:	c1 e8 12             	shr    $0x12,%eax
  20eb47:	0c f0                	or     $0xf0,%al
  20eb49:	88 44 24 04          	mov    %al,0x4(%rsp)
  20eb4d:	89 f0                	mov    %esi,%eax
  20eb4f:	c1 e8 0c             	shr    $0xc,%eax
  20eb52:	24 3f                	and    $0x3f,%al
  20eb54:	0c 80                	or     $0x80,%al
  20eb56:	88 44 24 05          	mov    %al,0x5(%rsp)
  20eb5a:	89 f0                	mov    %esi,%eax
  20eb5c:	c1 e8 06             	shr    $0x6,%eax
  20eb5f:	24 3f                	and    $0x3f,%al
  20eb61:	0c 80                	or     $0x80,%al
  20eb63:	88 44 24 06          	mov    %al,0x6(%rsp)
  20eb67:	40 80 e6 3f          	and    $0x3f,%sil
  20eb6b:	40 80 ce 80          	or     $0x80,%sil
  20eb6f:	40 88 74 24 07       	mov    %sil,0x7(%rsp)
  20eb74:	ba 04 00 00 00       	mov    $0x4,%edx
  20eb79:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  20eb7e:	e8 4d f9 ff ff       	callq  20e4d0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  20eb83:	59                   	pop    %rcx
  20eb84:	c3                   	retq   
  20eb85:	cc                   	int3   
  20eb86:	cc                   	int3   
  20eb87:	cc                   	int3   
  20eb88:	cc                   	int3   
  20eb89:	cc                   	int3   
  20eb8a:	cc                   	int3   
  20eb8b:	cc                   	int3   
  20eb8c:	cc                   	int3   
  20eb8d:	cc                   	int3   
  20eb8e:	cc                   	int3   
  20eb8f:	cc                   	int3   

000000000020eb90 <_ZN4core3fmt5Write9write_fmt17h3844688a471abbbcE>:
  20eb90:	48 83 ec 38          	sub    $0x38,%rsp
  20eb94:	48 89 3c 24          	mov    %rdi,(%rsp)
  20eb98:	48 8b 46 28          	mov    0x28(%rsi),%rax
  20eb9c:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20eba1:	48 8b 46 20          	mov    0x20(%rsi),%rax
  20eba5:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20ebaa:	48 8b 46 18          	mov    0x18(%rsi),%rax
  20ebae:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20ebb3:	48 8b 46 10          	mov    0x10(%rsi),%rax
  20ebb7:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20ebbc:	48 8b 06             	mov    (%rsi),%rax
  20ebbf:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
  20ebc3:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  20ebc8:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20ebcd:	48 8d 35 b4 4b 00 00 	lea    0x4bb4(%rip),%rsi        # 213788 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526+0x68>
  20ebd4:	48 89 e7             	mov    %rsp,%rdi
  20ebd7:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
  20ebdc:	e8 5f 17 00 00       	callq  210340 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE>
  20ebe1:	48 83 c4 38          	add    $0x38,%rsp
  20ebe5:	c3                   	retq   
  20ebe6:	cc                   	int3   
  20ebe7:	cc                   	int3   
  20ebe8:	cc                   	int3   
  20ebe9:	cc                   	int3   
  20ebea:	cc                   	int3   
  20ebeb:	cc                   	int3   
  20ebec:	cc                   	int3   
  20ebed:	cc                   	int3   
  20ebee:	cc                   	int3   
  20ebef:	cc                   	int3   

000000000020ebf0 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h8d11a5cbe002f1bcE>:
  20ebf0:	48 8b 3f             	mov    (%rdi),%rdi
  20ebf3:	e9 d8 f8 ff ff       	jmpq   20e4d0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  20ebf8:	cc                   	int3   
  20ebf9:	cc                   	int3   
  20ebfa:	cc                   	int3   
  20ebfb:	cc                   	int3   
  20ebfc:	cc                   	int3   
  20ebfd:	cc                   	int3   
  20ebfe:	cc                   	int3   
  20ebff:	cc                   	int3   

000000000020ec00 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17hff312ce6705fbd14E>:
  20ec00:	50                   	push   %rax
  20ec01:	48 8b 3f             	mov    (%rdi),%rdi
  20ec04:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%rsp)
  20ec0b:	00 
  20ec0c:	81 fe 80 00 00 00    	cmp    $0x80,%esi
  20ec12:	73 16                	jae    20ec2a <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17hff312ce6705fbd14E+0x2a>
  20ec14:	40 88 74 24 04       	mov    %sil,0x4(%rsp)
  20ec19:	ba 01 00 00 00       	mov    $0x1,%edx
  20ec1e:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  20ec23:	e8 a8 f8 ff ff       	callq  20e4d0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  20ec28:	59                   	pop    %rcx
  20ec29:	c3                   	retq   
  20ec2a:	89 f0                	mov    %esi,%eax
  20ec2c:	81 fe 00 08 00 00    	cmp    $0x800,%esi
  20ec32:	73 27                	jae    20ec5b <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17hff312ce6705fbd14E+0x5b>
  20ec34:	c1 e8 06             	shr    $0x6,%eax
  20ec37:	0c c0                	or     $0xc0,%al
  20ec39:	88 44 24 04          	mov    %al,0x4(%rsp)
  20ec3d:	40 80 e6 3f          	and    $0x3f,%sil
  20ec41:	40 80 ce 80          	or     $0x80,%sil
  20ec45:	40 88 74 24 05       	mov    %sil,0x5(%rsp)
  20ec4a:	ba 02 00 00 00       	mov    $0x2,%edx
  20ec4f:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  20ec54:	e8 77 f8 ff ff       	callq  20e4d0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  20ec59:	59                   	pop    %rcx
  20ec5a:	c3                   	retq   
  20ec5b:	81 fe 00 00 01 00    	cmp    $0x10000,%esi
  20ec61:	73 34                	jae    20ec97 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17hff312ce6705fbd14E+0x97>
  20ec63:	c1 e8 0c             	shr    $0xc,%eax
  20ec66:	0c e0                	or     $0xe0,%al
  20ec68:	88 44 24 04          	mov    %al,0x4(%rsp)
  20ec6c:	89 f0                	mov    %esi,%eax
  20ec6e:	c1 e8 06             	shr    $0x6,%eax
  20ec71:	24 3f                	and    $0x3f,%al
  20ec73:	0c 80                	or     $0x80,%al
  20ec75:	88 44 24 05          	mov    %al,0x5(%rsp)
  20ec79:	40 80 e6 3f          	and    $0x3f,%sil
  20ec7d:	40 80 ce 80          	or     $0x80,%sil
  20ec81:	40 88 74 24 06       	mov    %sil,0x6(%rsp)
  20ec86:	ba 03 00 00 00       	mov    $0x3,%edx
  20ec8b:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  20ec90:	e8 3b f8 ff ff       	callq  20e4d0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  20ec95:	59                   	pop    %rcx
  20ec96:	c3                   	retq   
  20ec97:	c1 e8 12             	shr    $0x12,%eax
  20ec9a:	0c f0                	or     $0xf0,%al
  20ec9c:	88 44 24 04          	mov    %al,0x4(%rsp)
  20eca0:	89 f0                	mov    %esi,%eax
  20eca2:	c1 e8 0c             	shr    $0xc,%eax
  20eca5:	24 3f                	and    $0x3f,%al
  20eca7:	0c 80                	or     $0x80,%al
  20eca9:	88 44 24 05          	mov    %al,0x5(%rsp)
  20ecad:	89 f0                	mov    %esi,%eax
  20ecaf:	c1 e8 06             	shr    $0x6,%eax
  20ecb2:	24 3f                	and    $0x3f,%al
  20ecb4:	0c 80                	or     $0x80,%al
  20ecb6:	88 44 24 06          	mov    %al,0x6(%rsp)
  20ecba:	40 80 e6 3f          	and    $0x3f,%sil
  20ecbe:	40 80 ce 80          	or     $0x80,%sil
  20ecc2:	40 88 74 24 07       	mov    %sil,0x7(%rsp)
  20ecc7:	ba 04 00 00 00       	mov    $0x4,%edx
  20eccc:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  20ecd1:	e8 fa f7 ff ff       	callq  20e4d0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hc9e2df978910ca0bE>
  20ecd6:	59                   	pop    %rcx
  20ecd7:	c3                   	retq   
  20ecd8:	cc                   	int3   
  20ecd9:	cc                   	int3   
  20ecda:	cc                   	int3   
  20ecdb:	cc                   	int3   
  20ecdc:	cc                   	int3   
  20ecdd:	cc                   	int3   
  20ecde:	cc                   	int3   
  20ecdf:	cc                   	int3   

000000000020ece0 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h2f268ff30ef8847bE>:
  20ece0:	48 83 ec 38          	sub    $0x38,%rsp
  20ece4:	48 8b 07             	mov    (%rdi),%rax
  20ece7:	48 89 04 24          	mov    %rax,(%rsp)
  20eceb:	48 8b 46 28          	mov    0x28(%rsi),%rax
  20ecef:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20ecf4:	48 8b 46 20          	mov    0x20(%rsi),%rax
  20ecf8:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20ecfd:	48 8b 46 18          	mov    0x18(%rsi),%rax
  20ed01:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20ed06:	48 8b 46 10          	mov    0x10(%rsi),%rax
  20ed0a:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20ed0f:	48 8b 06             	mov    (%rsi),%rax
  20ed12:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
  20ed16:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  20ed1b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20ed20:	48 8d 35 61 4a 00 00 	lea    0x4a61(%rip),%rsi        # 213788 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526+0x68>
  20ed27:	48 89 e7             	mov    %rsp,%rdi
  20ed2a:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
  20ed2f:	e8 0c 16 00 00       	callq  210340 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE>
  20ed34:	48 83 c4 38          	add    $0x38,%rsp
  20ed38:	c3                   	retq   
  20ed39:	cc                   	int3   
  20ed3a:	cc                   	int3   
  20ed3b:	cc                   	int3   
  20ed3c:	cc                   	int3   
  20ed3d:	cc                   	int3   
  20ed3e:	cc                   	int3   
  20ed3f:	cc                   	int3   

000000000020ed40 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E>:
  20ed40:	50                   	push   %rax
  20ed41:	41 89 f9             	mov    %edi,%r9d
  20ed44:	41 c1 e1 0b          	shl    $0xb,%r9d
  20ed48:	b9 20 00 00 00       	mov    $0x20,%ecx
  20ed4d:	31 c0                	xor    %eax,%eax
  20ed4f:	4c 8d 05 d6 28 ff ff 	lea    -0xd72a(%rip),%r8        # 20162c <_ZN4core7unicode12unicode_data15grapheme_extend17SHORT_OFFSET_RUNS17h68677736f581025fE.llvm.142292087146638061>
  20ed56:	ba 20 00 00 00       	mov    $0x20,%edx
  20ed5b:	eb 12                	jmp    20ed6f <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0x2f>
  20ed5d:	0f 1f 00             	nopl   (%rax)
  20ed60:	48 83 c1 01          	add    $0x1,%rcx
  20ed64:	48 89 c8             	mov    %rcx,%rax
  20ed67:	48 89 d1             	mov    %rdx,%rcx
  20ed6a:	48 29 c1             	sub    %rax,%rcx
  20ed6d:	76 25                	jbe    20ed94 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0x54>
  20ed6f:	48 d1 e9             	shr    %rcx
  20ed72:	48 01 c1             	add    %rax,%rcx
  20ed75:	41 8b 34 88          	mov    (%r8,%rcx,4),%esi
  20ed79:	c1 e6 0b             	shl    $0xb,%esi
  20ed7c:	44 39 ce             	cmp    %r9d,%esi
  20ed7f:	72 df                	jb     20ed60 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0x20>
  20ed81:	74 0a                	je     20ed8d <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0x4d>
  20ed83:	48 89 ca             	mov    %rcx,%rdx
  20ed86:	48 29 c1             	sub    %rax,%rcx
  20ed89:	77 e4                	ja     20ed6f <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0x2f>
  20ed8b:	eb 07                	jmp    20ed94 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0x54>
  20ed8d:	48 83 c1 01          	add    $0x1,%rcx
  20ed91:	48 89 c8             	mov    %rcx,%rax
  20ed94:	48 83 f8 1f          	cmp    $0x1f,%rax
  20ed98:	0f 87 a8 00 00 00    	ja     20ee46 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0x106>
  20ed9e:	41 b9 c3 02 00 00    	mov    $0x2c3,%r9d
  20eda4:	48 83 f8 1f          	cmp    $0x1f,%rax
  20eda8:	74 09                	je     20edb3 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0x73>
  20edaa:	45 8b 4c 80 04       	mov    0x4(%r8,%rax,4),%r9d
  20edaf:	49 c1 e9 15          	shr    $0x15,%r9
  20edb3:	31 d2                	xor    %edx,%edx
  20edb5:	48 89 c1             	mov    %rax,%rcx
  20edb8:	48 83 e9 01          	sub    $0x1,%rcx
  20edbc:	72 13                	jb     20edd1 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0x91>
  20edbe:	48 83 f9 20          	cmp    $0x20,%rcx
  20edc2:	0f 83 94 00 00 00    	jae    20ee5c <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0x11c>
  20edc8:	ba ff ff 1f 00       	mov    $0x1fffff,%edx
  20edcd:	41 23 14 88          	and    (%r8,%rcx,4),%edx
  20edd1:	41 8b 04 80          	mov    (%r8,%rax,4),%eax
  20edd5:	48 c1 e8 15          	shr    $0x15,%rax
  20edd9:	48 89 c1             	mov    %rax,%rcx
  20eddc:	48 f7 d1             	not    %rcx
  20eddf:	4c 01 c9             	add    %r9,%rcx
  20ede2:	74 48                	je     20ee2c <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0xec>
  20ede4:	29 d7                	sub    %edx,%edi
  20ede6:	48 3d c4 02 00 00    	cmp    $0x2c4,%rax
  20edec:	b9 c3 02 00 00       	mov    $0x2c3,%ecx
  20edf1:	48 0f 43 c8          	cmovae %rax,%rcx
  20edf5:	49 83 c1 ff          	add    $0xffffffffffffffff,%r9
  20edf9:	31 d2                	xor    %edx,%edx
  20edfb:	4c 8d 05 aa 28 ff ff 	lea    -0xd756(%rip),%r8        # 2016ac <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061>
  20ee02:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  20ee09:	00 00 00 
  20ee0c:	0f 1f 40 00          	nopl   0x0(%rax)
  20ee10:	48 39 c1             	cmp    %rax,%rcx
  20ee13:	74 1b                	je     20ee30 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0xf0>
  20ee15:	42 0f b6 34 00       	movzbl (%rax,%r8,1),%esi
  20ee1a:	01 f2                	add    %esi,%edx
  20ee1c:	39 fa                	cmp    %edi,%edx
  20ee1e:	77 0c                	ja     20ee2c <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0xec>
  20ee20:	48 83 c0 01          	add    $0x1,%rax
  20ee24:	49 39 c1             	cmp    %rax,%r9
  20ee27:	75 e7                	jne    20ee10 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E+0xd0>
  20ee29:	4c 89 c8             	mov    %r9,%rax
  20ee2c:	24 01                	and    $0x1,%al
  20ee2e:	59                   	pop    %rcx
  20ee2f:	c3                   	retq   
  20ee30:	48 8d 15 99 49 00 00 	lea    0x4999(%rip),%rdx        # 2137d0 <anon.8c5785e28e68a0869ce162bce53fbf2c.56.llvm.142292087146638061>
  20ee37:	be c3 02 00 00       	mov    $0x2c3,%esi
  20ee3c:	48 89 cf             	mov    %rcx,%rdi
  20ee3f:	e8 9c 00 00 00       	callq  20eee0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  20ee44:	0f 0b                	ud2    
  20ee46:	48 8d 15 6b 49 00 00 	lea    0x496b(%rip),%rdx        # 2137b8 <anon.8c5785e28e68a0869ce162bce53fbf2c.55.llvm.142292087146638061>
  20ee4d:	be 20 00 00 00       	mov    $0x20,%esi
  20ee52:	48 89 c7             	mov    %rax,%rdi
  20ee55:	e8 86 00 00 00       	callq  20eee0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  20ee5a:	0f 0b                	ud2    
  20ee5c:	48 8d 15 85 49 00 00 	lea    0x4985(%rip),%rdx        # 2137e8 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061>
  20ee63:	be 20 00 00 00       	mov    $0x20,%esi
  20ee68:	48 89 cf             	mov    %rcx,%rdi
  20ee6b:	e8 70 00 00 00       	callq  20eee0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>
  20ee70:	0f 0b                	ud2    
  20ee72:	cc                   	int3   
  20ee73:	cc                   	int3   
  20ee74:	cc                   	int3   
  20ee75:	cc                   	int3   
  20ee76:	cc                   	int3   
  20ee77:	cc                   	int3   
  20ee78:	cc                   	int3   
  20ee79:	cc                   	int3   
  20ee7a:	cc                   	int3   
  20ee7b:	cc                   	int3   
  20ee7c:	cc                   	int3   
  20ee7d:	cc                   	int3   
  20ee7e:	cc                   	int3   
  20ee7f:	cc                   	int3   

000000000020ee80 <_ZN4core3ptr28drop_in_place$LT$$RF$u64$GT$17h1ecee3ae2cf00d6eE.llvm.5832540808935662489>:
  20ee80:	c3                   	retq   
  20ee81:	cc                   	int3   
  20ee82:	cc                   	int3   
  20ee83:	cc                   	int3   
  20ee84:	cc                   	int3   
  20ee85:	cc                   	int3   
  20ee86:	cc                   	int3   
  20ee87:	cc                   	int3   
  20ee88:	cc                   	int3   
  20ee89:	cc                   	int3   
  20ee8a:	cc                   	int3   
  20ee8b:	cc                   	int3   
  20ee8c:	cc                   	int3   
  20ee8d:	cc                   	int3   
  20ee8e:	cc                   	int3   
  20ee8f:	cc                   	int3   

000000000020ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>:
  20ee90:	48 83 ec 48          	sub    $0x48,%rsp
  20ee94:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20ee99:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20ee9e:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  20eea3:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20eea8:	48 c7 44 24 20 01 00 	movq   $0x1,0x20(%rsp)
  20eeaf:	00 00 
  20eeb1:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  20eeb8:	00 00 
  20eeba:	48 8d 05 af 2a ff ff 	lea    -0xd551(%rip),%rax        # 201970 <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061+0x2c4>
  20eec1:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20eec6:	48 c7 44 24 40 00 00 	movq   $0x0,0x40(%rsp)
  20eecd:	00 00 
  20eecf:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  20eed4:	48 89 d6             	mov    %rdx,%rsi
  20eed7:	e8 84 00 00 00       	callq  20ef60 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  20eedc:	0f 0b                	ud2    
  20eede:	cc                   	int3   
  20eedf:	cc                   	int3   

000000000020eee0 <_ZN4core9panicking18panic_bounds_check17hf79d68bd70fd5de9E>:
  20eee0:	48 83 ec 68          	sub    $0x68,%rsp
  20eee4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20eee9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20eeee:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
  20eef3:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20eef8:	48 8b 05 19 4c 00 00 	mov    0x4c19(%rip),%rax        # 213b18 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x90>
  20eeff:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20ef04:	48 8d 4c 24 08       	lea    0x8(%rsp),%rcx
  20ef09:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  20ef0e:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20ef13:	48 8d 05 06 49 00 00 	lea    0x4906(%rip),%rax        # 213820 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x38>
  20ef1a:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20ef1f:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  20ef26:	00 00 
  20ef28:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  20ef2f:	00 00 
  20ef31:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  20ef36:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  20ef3b:	48 c7 44 24 60 02 00 	movq   $0x2,0x60(%rsp)
  20ef42:	00 00 
  20ef44:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  20ef49:	48 89 d6             	mov    %rdx,%rsi
  20ef4c:	e8 0f 00 00 00       	callq  20ef60 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  20ef51:	0f 0b                	ud2    
  20ef53:	cc                   	int3   
  20ef54:	cc                   	int3   
  20ef55:	cc                   	int3   
  20ef56:	cc                   	int3   
  20ef57:	cc                   	int3   
  20ef58:	cc                   	int3   
  20ef59:	cc                   	int3   
  20ef5a:	cc                   	int3   
  20ef5b:	cc                   	int3   
  20ef5c:	cc                   	int3   
  20ef5d:	cc                   	int3   
  20ef5e:	cc                   	int3   
  20ef5f:	cc                   	int3   

000000000020ef60 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>:
  20ef60:	48 83 ec 28          	sub    $0x28,%rsp
  20ef64:	48 8d 05 05 2a ff ff 	lea    -0xd5fb(%rip),%rax        # 201970 <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061+0x2c4>
  20ef6b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20ef70:	48 8d 05 89 48 00 00 	lea    0x4889(%rip),%rax        # 213800 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x18>
  20ef77:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20ef7c:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  20ef81:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  20ef86:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  20ef8b:	e8 a0 a0 ff ff       	callq  209030 <rust_begin_unwind>
  20ef90:	0f 0b                	ud2    
  20ef92:	cc                   	int3   
  20ef93:	cc                   	int3   
  20ef94:	cc                   	int3   
  20ef95:	cc                   	int3   
  20ef96:	cc                   	int3   
  20ef97:	cc                   	int3   
  20ef98:	cc                   	int3   
  20ef99:	cc                   	int3   
  20ef9a:	cc                   	int3   
  20ef9b:	cc                   	int3   
  20ef9c:	cc                   	int3   
  20ef9d:	cc                   	int3   
  20ef9e:	cc                   	int3   
  20ef9f:	cc                   	int3   

000000000020efa0 <_ZN4core9panicking19assert_failed_inner17h6cefd3f7ae7f1a39E>:
  20efa0:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
  20efa7:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  20efac:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  20efb1:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  20efb6:	4c 89 44 24 30       	mov    %r8,0x30(%rsp)
  20efbb:	40 84 ff             	test   %dil,%dil
  20efbe:	74 13                	je     20efd3 <_ZN4core9panicking19assert_failed_inner17h6cefd3f7ae7f1a39E+0x33>
  20efc0:	40 80 ff 01          	cmp    $0x1,%dil
  20efc4:	0f 85 b5 00 00 00    	jne    20f07f <_ZN4core9panicking19assert_failed_inner17h6cefd3f7ae7f1a39E+0xdf>
  20efca:	48 8d 05 d8 29 ff ff 	lea    -0xd628(%rip),%rax        # 2019a9 <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061+0x2fd>
  20efd1:	eb 07                	jmp    20efda <_ZN4core9panicking19assert_failed_inner17h6cefd3f7ae7f1a39E+0x3a>
  20efd3:	48 8d 05 d1 29 ff ff 	lea    -0xd62f(%rip),%rax        # 2019ab <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061+0x2ff>
  20efda:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20efdf:	b8 02 00 00 00       	mov    $0x2,%eax
  20efe4:	48 8b b4 24 e0 00 00 	mov    0xe0(%rsp),%rsi
  20efeb:	00 
  20efec:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20eff1:	49 83 39 00          	cmpq   $0x0,(%r9)
  20eff5:	0f 85 ac 00 00 00    	jne    20f0a7 <_ZN4core9panicking19assert_failed_inner17h6cefd3f7ae7f1a39E+0x107>
  20effb:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  20f000:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20f005:	48 8d 05 94 28 00 00 	lea    0x2894(%rip),%rax        # 2118a0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17heacd4ee5f6ef5e5fE>
  20f00c:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20f011:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  20f016:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20f01b:	48 8d 05 ee 27 00 00 	lea    0x27ee(%rip),%rax        # 211810 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0f1c2c822df607e7E>
  20f022:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  20f027:	48 8d 4c 24 28       	lea    0x28(%rsp),%rcx
  20f02c:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  20f031:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  20f036:	48 8d 05 43 48 00 00 	lea    0x4843(%rip),%rax        # 213880 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x98>
  20f03d:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  20f042:	48 c7 84 24 80 00 00 	movq   $0x4,0x80(%rsp)
  20f049:	00 04 00 00 00 
  20f04e:	48 c7 84 24 88 00 00 	movq   $0x0,0x88(%rsp)
  20f055:	00 00 00 00 00 
  20f05a:	48 8d 44 24 38       	lea    0x38(%rsp),%rax
  20f05f:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  20f066:	00 
  20f067:	48 c7 84 24 a0 00 00 	movq   $0x3,0xa0(%rsp)
  20f06e:	00 03 00 00 00 
  20f073:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  20f078:	e8 e3 fe ff ff       	callq  20ef60 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  20f07d:	0f 0b                	ud2    
  20f07f:	48 8d 05 1c 29 ff ff 	lea    -0xd6e4(%rip),%rax        # 2019a2 <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061+0x2f6>
  20f086:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20f08b:	b8 07 00 00 00       	mov    $0x7,%eax
  20f090:	48 8b b4 24 e0 00 00 	mov    0xe0(%rsp),%rsi
  20f097:	00 
  20f098:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20f09d:	49 83 39 00          	cmpq   $0x0,(%r9)
  20f0a1:	0f 84 54 ff ff ff    	je     20effb <_ZN4core9panicking19assert_failed_inner17h6cefd3f7ae7f1a39E+0x5b>
  20f0a7:	49 8b 41 28          	mov    0x28(%r9),%rax
  20f0ab:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  20f0b2:	00 
  20f0b3:	49 8b 41 20          	mov    0x20(%r9),%rax
  20f0b7:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  20f0be:	00 
  20f0bf:	49 8b 41 18          	mov    0x18(%r9),%rax
  20f0c3:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  20f0ca:	00 
  20f0cb:	49 8b 41 10          	mov    0x10(%r9),%rax
  20f0cf:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  20f0d6:	00 
  20f0d7:	49 8b 01             	mov    (%r9),%rax
  20f0da:	49 8b 49 08          	mov    0x8(%r9),%rcx
  20f0de:	48 89 8c 24 b0 00 00 	mov    %rcx,0xb0(%rsp)
  20f0e5:	00 
  20f0e6:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  20f0ed:	00 
  20f0ee:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  20f0f3:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20f0f8:	48 8d 05 a1 27 00 00 	lea    0x27a1(%rip),%rax        # 2118a0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17heacd4ee5f6ef5e5fE>
  20f0ff:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20f104:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  20f109:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20f10e:	48 8d 05 fb 26 00 00 	lea    0x26fb(%rip),%rax        # 211810 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0f1c2c822df607e7E>
  20f115:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  20f11a:	48 8d 4c 24 28       	lea    0x28(%rsp),%rcx
  20f11f:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  20f124:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  20f129:	48 8d 84 24 a8 00 00 	lea    0xa8(%rsp),%rax
  20f130:	00 
  20f131:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  20f136:	48 8b 05 0b 4a 00 00 	mov    0x4a0b(%rip),%rax        # 213b48 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xc0>
  20f13d:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  20f142:	48 8d 05 f7 46 00 00 	lea    0x46f7(%rip),%rax        # 213840 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x58>
  20f149:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  20f14e:	48 c7 84 24 80 00 00 	movq   $0x4,0x80(%rsp)
  20f155:	00 04 00 00 00 
  20f15a:	48 c7 84 24 88 00 00 	movq   $0x0,0x88(%rsp)
  20f161:	00 00 00 00 00 
  20f166:	48 8d 44 24 38       	lea    0x38(%rsp),%rax
  20f16b:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  20f172:	00 
  20f173:	48 c7 84 24 a0 00 00 	movq   $0x4,0xa0(%rsp)
  20f17a:	00 04 00 00 00 
  20f17f:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  20f184:	e8 d7 fd ff ff       	callq  20ef60 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  20f189:	0f 0b                	ud2    
  20f18b:	cc                   	int3   
  20f18c:	cc                   	int3   
  20f18d:	cc                   	int3   
  20f18e:	cc                   	int3   
  20f18f:	cc                   	int3   

000000000020f190 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>:
  20f190:	48 83 ec 68          	sub    $0x68,%rsp
  20f194:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20f199:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20f19e:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  20f1a3:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20f1a8:	48 8b 05 69 49 00 00 	mov    0x4969(%rip),%rax        # 213b18 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x90>
  20f1af:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20f1b4:	48 8d 4c 24 10       	lea    0x10(%rsp),%rcx
  20f1b9:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  20f1be:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20f1c3:	48 8d 05 f6 46 00 00 	lea    0x46f6(%rip),%rax        # 2138c0 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0xd8>
  20f1ca:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20f1cf:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  20f1d6:	00 00 
  20f1d8:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  20f1df:	00 00 
  20f1e1:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  20f1e6:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  20f1eb:	48 c7 44 24 60 02 00 	movq   $0x2,0x60(%rsp)
  20f1f2:	00 00 
  20f1f4:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  20f1f9:	48 89 d6             	mov    %rdx,%rsi
  20f1fc:	e8 5f fd ff ff       	callq  20ef60 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  20f201:	0f 0b                	ud2    
  20f203:	cc                   	int3   
  20f204:	cc                   	int3   
  20f205:	cc                   	int3   
  20f206:	cc                   	int3   
  20f207:	cc                   	int3   
  20f208:	cc                   	int3   
  20f209:	cc                   	int3   
  20f20a:	cc                   	int3   
  20f20b:	cc                   	int3   
  20f20c:	cc                   	int3   
  20f20d:	cc                   	int3   
  20f20e:	cc                   	int3   
  20f20f:	cc                   	int3   

000000000020f210 <_ZN4core5slice5index24slice_end_index_len_fail17hd3ce060961fc7915E>:
  20f210:	48 83 ec 68          	sub    $0x68,%rsp
  20f214:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20f219:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20f21e:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  20f223:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20f228:	48 8b 05 e9 48 00 00 	mov    0x48e9(%rip),%rax        # 213b18 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x90>
  20f22f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20f234:	48 8d 4c 24 10       	lea    0x10(%rsp),%rcx
  20f239:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  20f23e:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20f243:	48 8d 05 96 46 00 00 	lea    0x4696(%rip),%rax        # 2138e0 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0xf8>
  20f24a:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20f24f:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  20f256:	00 00 
  20f258:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  20f25f:	00 00 
  20f261:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  20f266:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  20f26b:	48 c7 44 24 60 02 00 	movq   $0x2,0x60(%rsp)
  20f272:	00 00 
  20f274:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  20f279:	48 89 d6             	mov    %rdx,%rsi
  20f27c:	e8 df fc ff ff       	callq  20ef60 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  20f281:	0f 0b                	ud2    
  20f283:	cc                   	int3   
  20f284:	cc                   	int3   
  20f285:	cc                   	int3   
  20f286:	cc                   	int3   
  20f287:	cc                   	int3   
  20f288:	cc                   	int3   
  20f289:	cc                   	int3   
  20f28a:	cc                   	int3   
  20f28b:	cc                   	int3   
  20f28c:	cc                   	int3   
  20f28d:	cc                   	int3   
  20f28e:	cc                   	int3   
  20f28f:	cc                   	int3   

000000000020f290 <_ZN4core5slice5index22slice_index_order_fail17h868ee97645e1c235E>:
  20f290:	48 83 ec 68          	sub    $0x68,%rsp
  20f294:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  20f299:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  20f29e:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  20f2a3:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20f2a8:	48 8b 05 69 48 00 00 	mov    0x4869(%rip),%rax        # 213b18 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x90>
  20f2af:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20f2b4:	48 8d 4c 24 10       	lea    0x10(%rsp),%rcx
  20f2b9:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  20f2be:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20f2c3:	48 8d 05 36 46 00 00 	lea    0x4636(%rip),%rax        # 213900 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x118>
  20f2ca:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20f2cf:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
  20f2d6:	00 00 
  20f2d8:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  20f2df:	00 00 
  20f2e1:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
  20f2e6:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  20f2eb:	48 c7 44 24 60 02 00 	movq   $0x2,0x60(%rsp)
  20f2f2:	00 00 
  20f2f4:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
  20f2f9:	48 89 d6             	mov    %rdx,%rsi
  20f2fc:	e8 5f fc ff ff       	callq  20ef60 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  20f301:	0f 0b                	ud2    
  20f303:	cc                   	int3   
  20f304:	cc                   	int3   
  20f305:	cc                   	int3   
  20f306:	cc                   	int3   
  20f307:	cc                   	int3   
  20f308:	cc                   	int3   
  20f309:	cc                   	int3   
  20f30a:	cc                   	int3   
  20f30b:	cc                   	int3   
  20f30c:	cc                   	int3   
  20f30d:	cc                   	int3   
  20f30e:	cc                   	int3   
  20f30f:	cc                   	int3   

000000000020f310 <_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h12e93e433f98118dE>:
  20f310:	48 b8 25 61 0f d8 19 	movabs $0x254ed619d80f6125,%rax
  20f317:	d6 4e 25 
  20f31a:	c3                   	retq   
  20f31b:	cc                   	int3   
  20f31c:	cc                   	int3   
  20f31d:	cc                   	int3   
  20f31e:	cc                   	int3   
  20f31f:	cc                   	int3   

000000000020f320 <_ZN73_$LT$core..panic..panic_info..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17hbda918ec9f68325eE>:
  20f320:	41 57                	push   %r15
  20f322:	41 56                	push   %r14
  20f324:	41 55                	push   %r13
  20f326:	41 54                	push   %r12
  20f328:	53                   	push   %rbx
  20f329:	48 83 ec 70          	sub    $0x70,%rsp
  20f32d:	49 89 ff             	mov    %rdi,%r15
  20f330:	4c 8b 66 20          	mov    0x20(%rsi),%r12
  20f334:	4c 8b 76 28          	mov    0x28(%rsi),%r14
  20f338:	48 8d 35 00 27 ff ff 	lea    -0xd900(%rip),%rsi        # 201a3f <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061+0x393>
  20f33f:	ba 0c 00 00 00       	mov    $0xc,%edx
  20f344:	4c 89 e7             	mov    %r12,%rdi
  20f347:	41 ff 56 18          	callq  *0x18(%r14)
  20f34b:	b3 01                	mov    $0x1,%bl
  20f34d:	84 c0                	test   %al,%al
  20f34f:	0f 85 18 01 00 00    	jne    20f46d <_ZN73_$LT$core..panic..panic_info..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17hbda918ec9f68325eE+0x14d>
  20f355:	49 8b 47 10          	mov    0x10(%r15),%rax
  20f359:	48 85 c0             	test   %rax,%rax
  20f35c:	74 18                	je     20f376 <_ZN73_$LT$core..panic..panic_info..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17hbda918ec9f68325eE+0x56>
  20f35e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  20f363:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  20f368:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20f36d:	48 8d 05 ac 24 00 00 	lea    0x24ac(%rip),%rax        # 211820 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17ha531d85b66484de1E>
  20f374:	eb 32                	jmp    20f3a8 <_ZN73_$LT$core..panic..panic_info..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17hbda918ec9f68325eE+0x88>
  20f376:	4d 8b 2f             	mov    (%r15),%r13
  20f379:	49 8b 47 08          	mov    0x8(%r15),%rax
  20f37d:	4c 89 ef             	mov    %r13,%rdi
  20f380:	ff 50 18             	callq  *0x18(%rax)
  20f383:	48 b9 f4 bc c7 ec 1e 	movabs $0x7ef2a91eecc7bcf4,%rcx
  20f38a:	a9 f2 7e 
  20f38d:	48 39 c8             	cmp    %rcx,%rax
  20f390:	75 60                	jne    20f3f2 <_ZN73_$LT$core..panic..panic_info..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17hbda918ec9f68325eE+0xd2>
  20f392:	4c 89 6c 24 08       	mov    %r13,0x8(%rsp)
  20f397:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  20f39c:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20f3a1:	48 8d 05 d8 24 00 00 	lea    0x24d8(%rip),%rax        # 211880 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hadaf44284d67ee8bE>
  20f3a8:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20f3ad:	48 8d 05 6c 45 00 00 	lea    0x456c(%rip),%rax        # 213920 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x138>
  20f3b4:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20f3b9:	48 c7 44 24 18 02 00 	movq   $0x2,0x18(%rsp)
  20f3c0:	00 00 
  20f3c2:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
  20f3c9:	00 00 
  20f3cb:	48 8d 44 24 40       	lea    0x40(%rsp),%rax
  20f3d0:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20f3d5:	48 c7 44 24 38 01 00 	movq   $0x1,0x38(%rsp)
  20f3dc:	00 00 
  20f3de:	48 8d 54 24 10       	lea    0x10(%rsp),%rdx
  20f3e3:	4c 89 e7             	mov    %r12,%rdi
  20f3e6:	4c 89 f6             	mov    %r14,%rsi
  20f3e9:	e8 52 0f 00 00       	callq  210340 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE>
  20f3ee:	84 c0                	test   %al,%al
  20f3f0:	75 7b                	jne    20f46d <_ZN73_$LT$core..panic..panic_info..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17hbda918ec9f68325eE+0x14d>
  20f3f2:	49 8b 47 18          	mov    0x18(%r15),%rax
  20f3f6:	48 8d 48 10          	lea    0x10(%rax),%rcx
  20f3fa:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  20f3ff:	48 83 c0 14          	add    $0x14,%rax
  20f403:	48 8d 15 96 24 00 00 	lea    0x2496(%rip),%rdx        # 2118a0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17heacd4ee5f6ef5e5fE>
  20f40a:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  20f40f:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  20f414:	48 8b 0d 35 47 00 00 	mov    0x4735(%rip),%rcx        # 213b50 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xc8>
  20f41b:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  20f420:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  20f425:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  20f42a:	48 8d 05 27 46 00 00 	lea    0x4627(%rip),%rax        # 213a58 <anon.675a8c007e0eb0dbd1338020c4dcf401.6.llvm.17324098355855342093>
  20f431:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  20f436:	48 c7 44 24 18 03 00 	movq   $0x3,0x18(%rsp)
  20f43d:	00 00 
  20f43f:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
  20f446:	00 00 
  20f448:	48 8d 44 24 40       	lea    0x40(%rsp),%rax
  20f44d:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  20f452:	48 c7 44 24 38 03 00 	movq   $0x3,0x38(%rsp)
  20f459:	00 00 
  20f45b:	48 8d 54 24 10       	lea    0x10(%rsp),%rdx
  20f460:	4c 89 e7             	mov    %r12,%rdi
  20f463:	4c 89 f6             	mov    %r14,%rsi
  20f466:	e8 d5 0e 00 00       	callq  210340 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE>
  20f46b:	89 c3                	mov    %eax,%ebx
  20f46d:	89 d8                	mov    %ebx,%eax
  20f46f:	48 83 c4 70          	add    $0x70,%rsp
  20f473:	5b                   	pop    %rbx
  20f474:	41 5c                	pop    %r12
  20f476:	41 5d                	pop    %r13
  20f478:	41 5e                	pop    %r14
  20f47a:	41 5f                	pop    %r15
  20f47c:	c3                   	retq   
  20f47d:	cc                   	int3   
  20f47e:	cc                   	int3   
  20f47f:	cc                   	int3   

000000000020f480 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE>:
  20f480:	41 57                	push   %r15
  20f482:	41 56                	push   %r14
  20f484:	53                   	push   %rbx
  20f485:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
  20f48c:	49 89 f7             	mov    %rsi,%r15
  20f48f:	49 89 fe             	mov    %rdi,%r14
  20f492:	8b 46 30             	mov    0x30(%rsi),%eax
  20f495:	a8 10                	test   $0x10,%al
  20f497:	0f 85 d3 00 00 00    	jne    20f570 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0xf0>
  20f49d:	a8 20                	test   $0x20,%al
  20f49f:	0f 85 19 01 00 00    	jne    20f5be <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x13e>
  20f4a5:	49 8b 36             	mov    (%r14),%rsi
  20f4a8:	b8 27 00 00 00       	mov    $0x27,%eax
  20f4ad:	48 81 fe 10 27 00 00 	cmp    $0x2710,%rsi
  20f4b4:	0f 82 89 01 00 00    	jb     20f643 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x1c3>
  20f4ba:	bb 27 00 00 00       	mov    $0x27,%ebx
  20f4bf:	49 b8 4b 59 86 38 d6 	movabs $0x346dc5d63886594b,%r8
  20f4c6:	c5 6d 34 
  20f4c9:	4c 8d 0d 84 1f ff ff 	lea    -0xe07c(%rip),%r9        # 201454 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  20f4d0:	48 89 f0             	mov    %rsi,%rax
  20f4d3:	49 f7 e0             	mul    %r8
  20f4d6:	48 c1 ea 0b          	shr    $0xb,%rdx
  20f4da:	69 c2 10 27 00 00    	imul   $0x2710,%edx,%eax
  20f4e0:	89 f1                	mov    %esi,%ecx
  20f4e2:	29 c1                	sub    %eax,%ecx
  20f4e4:	0f b7 c1             	movzwl %cx,%eax
  20f4e7:	c1 e8 02             	shr    $0x2,%eax
  20f4ea:	69 f8 7b 14 00 00    	imul   $0x147b,%eax,%edi
  20f4f0:	c1 ef 11             	shr    $0x11,%edi
  20f4f3:	6b c7 64             	imul   $0x64,%edi,%eax
  20f4f6:	29 c1                	sub    %eax,%ecx
  20f4f8:	0f b7 c9             	movzwl %cx,%ecx
  20f4fb:	48 8d 43 fc          	lea    -0x4(%rbx),%rax
  20f4ff:	41 0f b7 3c 79       	movzwl (%r9,%rdi,2),%edi
  20f504:	66 89 7c 1c fc       	mov    %di,-0x4(%rsp,%rbx,1)
  20f509:	41 0f b7 0c 49       	movzwl (%r9,%rcx,2),%ecx
  20f50e:	66 89 4c 1c fe       	mov    %cx,-0x2(%rsp,%rbx,1)
  20f513:	48 89 c3             	mov    %rax,%rbx
  20f516:	48 81 fe ff e0 f5 05 	cmp    $0x5f5e0ff,%rsi
  20f51d:	48 89 d6             	mov    %rdx,%rsi
  20f520:	77 ae                	ja     20f4d0 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x50>
  20f522:	48 83 fa 63          	cmp    $0x63,%rdx
  20f526:	7e 2e                	jle    20f556 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0xd6>
  20f528:	0f b7 ca             	movzwl %dx,%ecx
  20f52b:	c1 e9 02             	shr    $0x2,%ecx
  20f52e:	69 c9 7b 14 00 00    	imul   $0x147b,%ecx,%ecx
  20f534:	c1 e9 11             	shr    $0x11,%ecx
  20f537:	6b f1 64             	imul   $0x64,%ecx,%esi
  20f53a:	29 f2                	sub    %esi,%edx
  20f53c:	0f b7 d2             	movzwl %dx,%edx
  20f53f:	48 8d 35 0e 1f ff ff 	lea    -0xe0f2(%rip),%rsi        # 201454 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  20f546:	0f b7 14 56          	movzwl (%rsi,%rdx,2),%edx
  20f54a:	66 89 54 04 fe       	mov    %dx,-0x2(%rsp,%rax,1)
  20f54f:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
  20f553:	48 89 ca             	mov    %rcx,%rdx
  20f556:	48 83 fa 0a          	cmp    $0xa,%rdx
  20f55a:	0f 8d f5 00 00 00    	jge    20f655 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x1d5>
  20f560:	80 c2 30             	add    $0x30,%dl
  20f563:	88 54 04 ff          	mov    %dl,-0x1(%rsp,%rax,1)
  20f567:	48 83 c0 ff          	add    $0xffffffffffffffff,%rax
  20f56b:	e9 f9 00 00 00       	jmpq   20f669 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x1e9>
  20f570:	49 8b 06             	mov    (%r14),%rax
  20f573:	4c 8d 84 24 80 00 00 	lea    0x80(%rsp),%r8
  20f57a:	00 
  20f57b:	45 31 c9             	xor    %r9d,%r9d
  20f57e:	b9 30 00 00 00       	mov    $0x30,%ecx
  20f583:	48 89 c2             	mov    %rax,%rdx
  20f586:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  20f58d:	00 00 00 
  20f590:	48 c1 ea 04          	shr    $0x4,%rdx
  20f594:	89 c3                	mov    %eax,%ebx
  20f596:	80 e3 0f             	and    $0xf,%bl
  20f599:	80 fb 0a             	cmp    $0xa,%bl
  20f59c:	be 57 00 00 00       	mov    $0x57,%esi
  20f5a1:	0f 42 f1             	cmovb  %ecx,%esi
  20f5a4:	40 00 de             	add    %bl,%sil
  20f5a7:	41 88 70 ff          	mov    %sil,-0x1(%r8)
  20f5ab:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  20f5af:	49 83 c1 01          	add    $0x1,%r9
  20f5b3:	48 83 f8 0f          	cmp    $0xf,%rax
  20f5b7:	48 89 d0             	mov    %rdx,%rax
  20f5ba:	77 d4                	ja     20f590 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x110>
  20f5bc:	eb 4e                	jmp    20f60c <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x18c>
  20f5be:	49 8b 06             	mov    (%r14),%rax
  20f5c1:	4c 8d 84 24 80 00 00 	lea    0x80(%rsp),%r8
  20f5c8:	00 
  20f5c9:	45 31 c9             	xor    %r9d,%r9d
  20f5cc:	b9 30 00 00 00       	mov    $0x30,%ecx
  20f5d1:	48 89 c2             	mov    %rax,%rdx
  20f5d4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  20f5db:	00 00 00 
  20f5de:	66 90                	xchg   %ax,%ax
  20f5e0:	48 c1 ea 04          	shr    $0x4,%rdx
  20f5e4:	89 c3                	mov    %eax,%ebx
  20f5e6:	80 e3 0f             	and    $0xf,%bl
  20f5e9:	80 fb 0a             	cmp    $0xa,%bl
  20f5ec:	be 37 00 00 00       	mov    $0x37,%esi
  20f5f1:	0f 42 f1             	cmovb  %ecx,%esi
  20f5f4:	40 00 de             	add    %bl,%sil
  20f5f7:	41 88 70 ff          	mov    %sil,-0x1(%r8)
  20f5fb:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  20f5ff:	49 83 c1 01          	add    $0x1,%r9
  20f603:	48 83 f8 0f          	cmp    $0xf,%rax
  20f607:	48 89 d0             	mov    %rdx,%rax
  20f60a:	77 d4                	ja     20f5e0 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x160>
  20f60c:	bf 80 00 00 00       	mov    $0x80,%edi
  20f611:	4c 29 cf             	sub    %r9,%rdi
  20f614:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  20f61b:	0f 83 2c 02 00 00    	jae    20f84d <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x3cd>
  20f621:	48 8d 15 2a 1e ff ff 	lea    -0xe1d6(%rip),%rdx        # 201452 <anon.362945bbc83444f50f486d206938f0d7.3.llvm.10057850355689647526>
  20f628:	b9 02 00 00 00       	mov    $0x2,%ecx
  20f62d:	4c 89 ff             	mov    %r15,%rdi
  20f630:	be 01 00 00 00       	mov    $0x1,%esi
  20f635:	e8 46 0f 00 00       	callq  210580 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  20f63a:	84 c0                	test   %al,%al
  20f63c:	74 56                	je     20f694 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x214>
  20f63e:	e9 a4 02 00 00       	jmpq   20f8e7 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x467>
  20f643:	48 89 f2             	mov    %rsi,%rdx
  20f646:	48 83 fa 63          	cmp    $0x63,%rdx
  20f64a:	0f 8f d8 fe ff ff    	jg     20f528 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0xa8>
  20f650:	e9 01 ff ff ff       	jmpq   20f556 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0xd6>
  20f655:	48 8d 0d f8 1d ff ff 	lea    -0xe208(%rip),%rcx        # 201454 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  20f65c:	0f b7 0c 51          	movzwl (%rcx,%rdx,2),%ecx
  20f660:	66 89 4c 04 fe       	mov    %cx,-0x2(%rsp,%rax,1)
  20f665:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
  20f669:	4c 8d 04 04          	lea    (%rsp,%rax,1),%r8
  20f66d:	41 b9 27 00 00 00    	mov    $0x27,%r9d
  20f673:	49 29 c1             	sub    %rax,%r9
  20f676:	48 8d 15 ed 29 ff ff 	lea    -0xd613(%rip),%rdx        # 20206a <anon.d72c85eeed5505c0c7c430e367877f6c.2.llvm.5557079508644508522>
  20f67d:	4c 89 ff             	mov    %r15,%rdi
  20f680:	be 01 00 00 00       	mov    $0x1,%esi
  20f685:	31 c9                	xor    %ecx,%ecx
  20f687:	e8 f4 0e 00 00       	callq  210580 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  20f68c:	84 c0                	test   %al,%al
  20f68e:	0f 85 53 02 00 00    	jne    20f8e7 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x467>
  20f694:	49 8b 7f 20          	mov    0x20(%r15),%rdi
  20f698:	49 8b 77 28          	mov    0x28(%r15),%rsi
  20f69c:	48 8d 05 9d 42 00 00 	lea    0x429d(%rip),%rax        # 213940 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x158>
  20f6a3:	48 89 04 24          	mov    %rax,(%rsp)
  20f6a7:	48 c7 44 24 08 01 00 	movq   $0x1,0x8(%rsp)
  20f6ae:	00 00 
  20f6b0:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  20f6b7:	00 00 
  20f6b9:	48 8d 05 98 23 ff ff 	lea    -0xdc68(%rip),%rax        # 201a58 <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061+0x3ac>
  20f6c0:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  20f6c5:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  20f6cc:	00 00 
  20f6ce:	48 89 e2             	mov    %rsp,%rdx
  20f6d1:	e8 6a 0c 00 00       	callq  210340 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE>
  20f6d6:	84 c0                	test   %al,%al
  20f6d8:	0f 85 09 02 00 00    	jne    20f8e7 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x467>
  20f6de:	41 8b 47 30          	mov    0x30(%r15),%eax
  20f6e2:	a8 10                	test   $0x10,%al
  20f6e4:	0f 85 8d 00 00 00    	jne    20f777 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x2f7>
  20f6ea:	a8 20                	test   $0x20,%al
  20f6ec:	0f 85 07 01 00 00    	jne    20f7f9 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x379>
  20f6f2:	49 8b 76 08          	mov    0x8(%r14),%rsi
  20f6f6:	b8 27 00 00 00       	mov    $0x27,%eax
  20f6fb:	48 81 fe 10 27 00 00 	cmp    $0x2710,%rsi
  20f702:	0f 82 58 01 00 00    	jb     20f860 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x3e0>
  20f708:	bb 27 00 00 00       	mov    $0x27,%ebx
  20f70d:	49 b8 4b 59 86 38 d6 	movabs $0x346dc5d63886594b,%r8
  20f714:	c5 6d 34 
  20f717:	4c 8d 0d 36 1d ff ff 	lea    -0xe2ca(%rip),%r9        # 201454 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  20f71e:	66 90                	xchg   %ax,%ax
  20f720:	48 89 f0             	mov    %rsi,%rax
  20f723:	49 f7 e0             	mul    %r8
  20f726:	48 c1 ea 0b          	shr    $0xb,%rdx
  20f72a:	69 c2 10 27 00 00    	imul   $0x2710,%edx,%eax
  20f730:	89 f1                	mov    %esi,%ecx
  20f732:	29 c1                	sub    %eax,%ecx
  20f734:	0f b7 c1             	movzwl %cx,%eax
  20f737:	c1 e8 02             	shr    $0x2,%eax
  20f73a:	69 f8 7b 14 00 00    	imul   $0x147b,%eax,%edi
  20f740:	c1 ef 11             	shr    $0x11,%edi
  20f743:	6b c7 64             	imul   $0x64,%edi,%eax
  20f746:	29 c1                	sub    %eax,%ecx
  20f748:	0f b7 c9             	movzwl %cx,%ecx
  20f74b:	48 8d 43 fc          	lea    -0x4(%rbx),%rax
  20f74f:	41 0f b7 3c 79       	movzwl (%r9,%rdi,2),%edi
  20f754:	66 89 7c 1c fc       	mov    %di,-0x4(%rsp,%rbx,1)
  20f759:	41 0f b7 0c 49       	movzwl (%r9,%rcx,2),%ecx
  20f75e:	66 89 4c 1c fe       	mov    %cx,-0x2(%rsp,%rbx,1)
  20f763:	48 89 c3             	mov    %rax,%rbx
  20f766:	48 81 fe ff e0 f5 05 	cmp    $0x5f5e0ff,%rsi
  20f76d:	48 89 d6             	mov    %rdx,%rsi
  20f770:	77 ae                	ja     20f720 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x2a0>
  20f772:	e9 ec 00 00 00       	jmpq   20f863 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x3e3>
  20f777:	49 8b 46 08          	mov    0x8(%r14),%rax
  20f77b:	4c 8d 84 24 80 00 00 	lea    0x80(%rsp),%r8
  20f782:	00 
  20f783:	45 31 c9             	xor    %r9d,%r9d
  20f786:	b9 30 00 00 00       	mov    $0x30,%ecx
  20f78b:	48 89 c2             	mov    %rax,%rdx
  20f78e:	66 90                	xchg   %ax,%ax
  20f790:	48 c1 ea 04          	shr    $0x4,%rdx
  20f794:	89 c3                	mov    %eax,%ebx
  20f796:	80 e3 0f             	and    $0xf,%bl
  20f799:	80 fb 0a             	cmp    $0xa,%bl
  20f79c:	be 57 00 00 00       	mov    $0x57,%esi
  20f7a1:	0f 42 f1             	cmovb  %ecx,%esi
  20f7a4:	40 00 de             	add    %bl,%sil
  20f7a7:	41 88 70 ff          	mov    %sil,-0x1(%r8)
  20f7ab:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  20f7af:	49 83 c1 01          	add    $0x1,%r9
  20f7b3:	48 83 f8 0f          	cmp    $0xf,%rax
  20f7b7:	48 89 d0             	mov    %rdx,%rax
  20f7ba:	77 d4                	ja     20f790 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x310>
  20f7bc:	bf 80 00 00 00       	mov    $0x80,%edi
  20f7c1:	4c 29 cf             	sub    %r9,%rdi
  20f7c4:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  20f7cb:	0f 83 7c 00 00 00    	jae    20f84d <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x3cd>
  20f7d1:	48 8d 15 7a 1c ff ff 	lea    -0xe386(%rip),%rdx        # 201452 <anon.362945bbc83444f50f486d206938f0d7.3.llvm.10057850355689647526>
  20f7d8:	b9 02 00 00 00       	mov    $0x2,%ecx
  20f7dd:	4c 89 ff             	mov    %r15,%rdi
  20f7e0:	be 01 00 00 00       	mov    $0x1,%esi
  20f7e5:	e8 96 0d 00 00       	callq  210580 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  20f7ea:	84 c0                	test   %al,%al
  20f7ec:	0f 85 f5 00 00 00    	jne    20f8e7 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x467>
  20f7f2:	31 db                	xor    %ebx,%ebx
  20f7f4:	e9 f0 00 00 00       	jmpq   20f8e9 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x469>
  20f7f9:	49 8b 46 08          	mov    0x8(%r14),%rax
  20f7fd:	4c 8d 84 24 80 00 00 	lea    0x80(%rsp),%r8
  20f804:	00 
  20f805:	45 31 c9             	xor    %r9d,%r9d
  20f808:	b9 30 00 00 00       	mov    $0x30,%ecx
  20f80d:	48 89 c2             	mov    %rax,%rdx
  20f810:	48 c1 ea 04          	shr    $0x4,%rdx
  20f814:	89 c3                	mov    %eax,%ebx
  20f816:	80 e3 0f             	and    $0xf,%bl
  20f819:	80 fb 0a             	cmp    $0xa,%bl
  20f81c:	be 37 00 00 00       	mov    $0x37,%esi
  20f821:	0f 42 f1             	cmovb  %ecx,%esi
  20f824:	40 00 de             	add    %bl,%sil
  20f827:	41 88 70 ff          	mov    %sil,-0x1(%r8)
  20f82b:	49 83 c0 ff          	add    $0xffffffffffffffff,%r8
  20f82f:	49 83 c1 01          	add    $0x1,%r9
  20f833:	48 83 f8 0f          	cmp    $0xf,%rax
  20f837:	48 89 d0             	mov    %rdx,%rax
  20f83a:	77 d4                	ja     20f810 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x390>
  20f83c:	bf 80 00 00 00       	mov    $0x80,%edi
  20f841:	4c 29 cf             	sub    %r9,%rdi
  20f844:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
  20f84b:	72 84                	jb     20f7d1 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x351>
  20f84d:	48 8d 15 cc 3e 00 00 	lea    0x3ecc(%rip),%rdx        # 213720 <anon.362945bbc83444f50f486d206938f0d7.1.llvm.10057850355689647526>
  20f854:	be 80 00 00 00       	mov    $0x80,%esi
  20f859:	e8 32 f9 ff ff       	callq  20f190 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  20f85e:	0f 0b                	ud2    
  20f860:	48 89 f2             	mov    %rsi,%rdx
  20f863:	48 83 fa 63          	cmp    $0x63,%rdx
  20f867:	7e 2e                	jle    20f897 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x417>
  20f869:	0f b7 ca             	movzwl %dx,%ecx
  20f86c:	c1 e9 02             	shr    $0x2,%ecx
  20f86f:	69 c9 7b 14 00 00    	imul   $0x147b,%ecx,%ecx
  20f875:	c1 e9 11             	shr    $0x11,%ecx
  20f878:	6b f1 64             	imul   $0x64,%ecx,%esi
  20f87b:	29 f2                	sub    %esi,%edx
  20f87d:	0f b7 d2             	movzwl %dx,%edx
  20f880:	48 8d 35 cd 1b ff ff 	lea    -0xe433(%rip),%rsi        # 201454 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  20f887:	0f b7 14 56          	movzwl (%rsi,%rdx,2),%edx
  20f88b:	66 89 54 04 fe       	mov    %dx,-0x2(%rsp,%rax,1)
  20f890:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
  20f894:	48 89 ca             	mov    %rcx,%rdx
  20f897:	48 83 fa 0a          	cmp    $0xa,%rdx
  20f89b:	7d 0d                	jge    20f8aa <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x42a>
  20f89d:	80 c2 30             	add    $0x30,%dl
  20f8a0:	88 54 04 ff          	mov    %dl,-0x1(%rsp,%rax,1)
  20f8a4:	48 83 c0 ff          	add    $0xffffffffffffffff,%rax
  20f8a8:	eb 14                	jmp    20f8be <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x43e>
  20f8aa:	48 8d 0d a3 1b ff ff 	lea    -0xe45d(%rip),%rcx        # 201454 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  20f8b1:	0f b7 0c 51          	movzwl (%rcx,%rdx,2),%ecx
  20f8b5:	66 89 4c 04 fe       	mov    %cx,-0x2(%rsp,%rax,1)
  20f8ba:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
  20f8be:	4c 8d 04 04          	lea    (%rsp,%rax,1),%r8
  20f8c2:	41 b9 27 00 00 00    	mov    $0x27,%r9d
  20f8c8:	49 29 c1             	sub    %rax,%r9
  20f8cb:	48 8d 15 98 27 ff ff 	lea    -0xd868(%rip),%rdx        # 20206a <anon.d72c85eeed5505c0c7c430e367877f6c.2.llvm.5557079508644508522>
  20f8d2:	31 db                	xor    %ebx,%ebx
  20f8d4:	4c 89 ff             	mov    %r15,%rdi
  20f8d7:	be 01 00 00 00       	mov    $0x1,%esi
  20f8dc:	31 c9                	xor    %ecx,%ecx
  20f8de:	e8 9d 0c 00 00       	callq  210580 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  20f8e3:	84 c0                	test   %al,%al
  20f8e5:	74 02                	je     20f8e9 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE+0x469>
  20f8e7:	b3 01                	mov    $0x1,%bl
  20f8e9:	89 d8                	mov    %ebx,%eax
  20f8eb:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
  20f8f2:	5b                   	pop    %rbx
  20f8f3:	41 5e                	pop    %r14
  20f8f5:	41 5f                	pop    %r15
  20f8f7:	c3                   	retq   
  20f8f8:	cc                   	int3   
  20f8f9:	cc                   	int3   
  20f8fa:	cc                   	int3   
  20f8fb:	cc                   	int3   
  20f8fc:	cc                   	int3   
  20f8fd:	cc                   	int3   
  20f8fe:	cc                   	int3   
  20f8ff:	cc                   	int3   

000000000020f900 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462>:
  20f900:	41 57                	push   %r15
  20f902:	41 56                	push   %r14
  20f904:	53                   	push   %rbx
  20f905:	48 85 d2             	test   %rdx,%rdx
  20f908:	74 70                	je     20f97a <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0x7a>
  20f90a:	41 89 fb             	mov    %edi,%r11d
  20f90d:	41 c1 eb 08          	shr    $0x8,%r11d
  20f911:	4c 8d 34 56          	lea    (%rsi,%rdx,2),%r14
  20f915:	45 31 ff             	xor    %r15d,%r15d
  20f918:	48 89 f2             	mov    %rsi,%rdx
  20f91b:	0f b6 5e 01          	movzbl 0x1(%rsi),%ebx
  20f91f:	48 83 c6 02          	add    $0x2,%rsi
  20f923:	4d 8d 14 1f          	lea    (%r15,%rbx,1),%r10
  20f927:	44 38 1a             	cmp    %r11b,(%rdx)
  20f92a:	75 44                	jne    20f970 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0x70>
  20f92c:	4d 39 fa             	cmp    %r15,%r10
  20f92f:	0f 82 c6 00 00 00    	jb     20f9fb <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0xfb>
  20f935:	4d 39 c2             	cmp    %r8,%r10
  20f938:	0f 87 d1 00 00 00    	ja     20fa0f <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0x10f>
  20f93e:	49 01 cf             	add    %rcx,%r15
  20f941:	31 d2                	xor    %edx,%edx
  20f943:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  20f94a:	00 00 00 
  20f94d:	0f 1f 00             	nopl   (%rax)
  20f950:	48 39 d3             	cmp    %rdx,%rbx
  20f953:	74 1d                	je     20f972 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0x72>
  20f955:	48 8d 42 01          	lea    0x1(%rdx),%rax
  20f959:	41 38 3c 17          	cmp    %dil,(%r15,%rdx,1)
  20f95d:	48 89 c2             	mov    %rax,%rdx
  20f960:	75 ee                	jne    20f950 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0x50>
  20f962:	eb 6f                	jmp    20f9d3 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0xd3>
  20f964:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  20f96b:	00 00 00 
  20f96e:	66 90                	xchg   %ax,%ax
  20f970:	77 08                	ja     20f97a <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0x7a>
  20f972:	4d 89 d7             	mov    %r10,%r15
  20f975:	4c 39 f6             	cmp    %r14,%rsi
  20f978:	75 9e                	jne    20f918 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0x18>
  20f97a:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  20f97f:	48 85 c9             	test   %rcx,%rcx
  20f982:	74 53                	je     20f9d7 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0xd7>
  20f984:	4c 01 c9             	add    %r9,%rcx
  20f987:	0f b7 d7             	movzwl %di,%edx
  20f98a:	b0 01                	mov    $0x1,%al
  20f98c:	0f 1f 40 00          	nopl   0x0(%rax)
  20f990:	49 8d 79 01          	lea    0x1(%r9),%rdi
  20f994:	41 0f b6 31          	movzbl (%r9),%esi
  20f998:	40 84 f6             	test   %sil,%sil
  20f99b:	78 13                	js     20f9b0 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0xb0>
  20f99d:	49 89 f9             	mov    %rdi,%r9
  20f9a0:	29 f2                	sub    %esi,%edx
  20f9a2:	79 26                	jns    20f9ca <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0xca>
  20f9a4:	eb 33                	jmp    20f9d9 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0xd9>
  20f9a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  20f9ad:	00 00 00 
  20f9b0:	48 39 cf             	cmp    %rcx,%rdi
  20f9b3:	74 2c                	je     20f9e1 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0xe1>
  20f9b5:	41 0f b6 79 01       	movzbl 0x1(%r9),%edi
  20f9ba:	49 83 c1 02          	add    $0x2,%r9
  20f9be:	83 e6 7f             	and    $0x7f,%esi
  20f9c1:	c1 e6 08             	shl    $0x8,%esi
  20f9c4:	09 fe                	or     %edi,%esi
  20f9c6:	29 f2                	sub    %esi,%edx
  20f9c8:	78 0f                	js     20f9d9 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0xd9>
  20f9ca:	34 01                	xor    $0x1,%al
  20f9cc:	49 39 c9             	cmp    %rcx,%r9
  20f9cf:	75 bf                	jne    20f990 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0x90>
  20f9d1:	eb 06                	jmp    20f9d9 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0xd9>
  20f9d3:	31 c0                	xor    %eax,%eax
  20f9d5:	eb 02                	jmp    20f9d9 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462+0xd9>
  20f9d7:	b0 01                	mov    $0x1,%al
  20f9d9:	24 01                	and    $0x1,%al
  20f9db:	5b                   	pop    %rbx
  20f9dc:	41 5e                	pop    %r14
  20f9de:	41 5f                	pop    %r15
  20f9e0:	c3                   	retq   
  20f9e1:	48 8d 3d 70 20 ff ff 	lea    -0xdf90(%rip),%rdi        # 201a58 <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h5a8bdf4fea932924E.llvm.142292087146638061+0x3ac>
  20f9e8:	48 8d 15 79 3f 00 00 	lea    0x3f79(%rip),%rdx        # 213968 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x180>
  20f9ef:	be 2b 00 00 00       	mov    $0x2b,%esi
  20f9f4:	e8 97 f4 ff ff       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  20f9f9:	0f 0b                	ud2    
  20f9fb:	48 8d 15 4e 3f 00 00 	lea    0x3f4e(%rip),%rdx        # 213950 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x168>
  20fa02:	4c 89 ff             	mov    %r15,%rdi
  20fa05:	4c 89 d6             	mov    %r10,%rsi
  20fa08:	e8 83 f8 ff ff       	callq  20f290 <_ZN4core5slice5index22slice_index_order_fail17h868ee97645e1c235E>
  20fa0d:	0f 0b                	ud2    
  20fa0f:	48 8d 15 3a 3f 00 00 	lea    0x3f3a(%rip),%rdx        # 213950 <anon.8c5785e28e68a0869ce162bce53fbf2c.57.llvm.142292087146638061+0x168>
  20fa16:	4c 89 d7             	mov    %r10,%rdi
  20fa19:	4c 89 c6             	mov    %r8,%rsi
  20fa1c:	e8 ef f7 ff ff       	callq  20f210 <_ZN4core5slice5index24slice_end_index_len_fail17hd3ce060961fc7915E>
  20fa21:	0f 0b                	ud2    
  20fa23:	cc                   	int3   
  20fa24:	cc                   	int3   
  20fa25:	cc                   	int3   
  20fa26:	cc                   	int3   
  20fa27:	cc                   	int3   
  20fa28:	cc                   	int3   
  20fa29:	cc                   	int3   
  20fa2a:	cc                   	int3   
  20fa2b:	cc                   	int3   
  20fa2c:	cc                   	int3   
  20fa2d:	cc                   	int3   
  20fa2e:	cc                   	int3   
  20fa2f:	cc                   	int3   

000000000020fa30 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E>:
  20fa30:	41 57                	push   %r15
  20fa32:	41 56                	push   %r14
  20fa34:	53                   	push   %rbx
  20fa35:	41 89 f8             	mov    %edi,%r8d
  20fa38:	48 8d 7e 07          	lea    0x7(%rsi),%rdi
  20fa3c:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
  20fa40:	48 29 f7             	sub    %rsi,%rdi
  20fa43:	74 39                	je     20fa7e <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0x4e>
  20fa45:	48 39 d7             	cmp    %rdx,%rdi
  20fa48:	48 0f 47 fa          	cmova  %rdx,%rdi
  20fa4c:	48 85 ff             	test   %rdi,%rdi
  20fa4f:	74 2d                	je     20fa7e <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0x4e>
  20fa51:	31 c9                	xor    %ecx,%ecx
  20fa53:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  20fa5a:	00 00 00 
  20fa5d:	0f 1f 00             	nopl   (%rax)
  20fa60:	44 38 04 0e          	cmp    %r8b,(%rsi,%rcx,1)
  20fa64:	0f 84 c4 00 00 00    	je     20fb2e <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0xfe>
  20fa6a:	48 83 c1 01          	add    $0x1,%rcx
  20fa6e:	48 39 cf             	cmp    %rcx,%rdi
  20fa71:	75 ed                	jne    20fa60 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0x30>
  20fa73:	4c 8d 4a f0          	lea    -0x10(%rdx),%r9
  20fa77:	4c 39 cf             	cmp    %r9,%rdi
  20fa7a:	76 08                	jbe    20fa84 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0x54>
  20fa7c:	eb 72                	jmp    20faf0 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0xc0>
  20fa7e:	4c 8d 4a f0          	lea    -0x10(%rdx),%r9
  20fa82:	31 ff                	xor    %edi,%edi
  20fa84:	49 ba ff fe fe fe fe 	movabs $0xfefefefefefefeff,%r10
  20fa8b:	fe fe fe 
  20fa8e:	49 be 80 80 80 80 80 	movabs $0x8080808080808080,%r14
  20fa95:	80 80 80 
  20fa98:	45 0f b6 d8          	movzbl %r8b,%r11d
  20fa9c:	49 bf 01 01 01 01 01 	movabs $0x101010101010101,%r15
  20faa3:	01 01 01 
  20faa6:	4d 0f af fb          	imul   %r11,%r15
  20faaa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  20fab0:	48 8b 04 3e          	mov    (%rsi,%rdi,1),%rax
  20fab4:	4c 31 f8             	xor    %r15,%rax
  20fab7:	48 89 c3             	mov    %rax,%rbx
  20faba:	48 f7 d3             	not    %rbx
  20fabd:	4c 01 d0             	add    %r10,%rax
  20fac0:	4c 21 f3             	and    %r14,%rbx
  20fac3:	48 21 c3             	and    %rax,%rbx
  20fac6:	48 8b 4c 3e 08       	mov    0x8(%rsi,%rdi,1),%rcx
  20facb:	4c 31 f9             	xor    %r15,%rcx
  20face:	48 89 c8             	mov    %rcx,%rax
  20fad1:	48 f7 d0             	not    %rax
  20fad4:	4c 01 d1             	add    %r10,%rcx
  20fad7:	4c 21 f0             	and    %r14,%rax
  20fada:	48 21 c8             	and    %rcx,%rax
  20fadd:	48 09 d8             	or     %rbx,%rax
  20fae0:	75 09                	jne    20faeb <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0xbb>
  20fae2:	48 83 c7 10          	add    $0x10,%rdi
  20fae6:	4c 39 cf             	cmp    %r9,%rdi
  20fae9:	76 c5                	jbe    20fab0 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0x80>
  20faeb:	48 39 d7             	cmp    %rdx,%rdi
  20faee:	77 4c                	ja     20fb3c <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0x10c>
  20faf0:	48 39 d7             	cmp    %rdx,%rdi
  20faf3:	75 04                	jne    20faf9 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0xc9>
  20faf5:	31 c0                	xor    %eax,%eax
  20faf7:	eb 3a                	jmp    20fb33 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0x103>
  20faf9:	48 01 fe             	add    %rdi,%rsi
  20fafc:	48 29 fa             	sub    %rdi,%rdx
  20faff:	31 c0                	xor    %eax,%eax
  20fb01:	31 c9                	xor    %ecx,%ecx
  20fb03:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  20fb0a:	00 00 00 
  20fb0d:	0f 1f 00             	nopl   (%rax)
  20fb10:	44 38 04 0e          	cmp    %r8b,(%rsi,%rcx,1)
  20fb14:	74 0b                	je     20fb21 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0xf1>
  20fb16:	48 83 c1 01          	add    $0x1,%rcx
  20fb1a:	48 39 ca             	cmp    %rcx,%rdx
  20fb1d:	75 f1                	jne    20fb10 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0xe0>
  20fb1f:	eb 12                	jmp    20fb33 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0x103>
  20fb21:	48 01 cf             	add    %rcx,%rdi
  20fb24:	b8 01 00 00 00       	mov    $0x1,%eax
  20fb29:	48 89 f9             	mov    %rdi,%rcx
  20fb2c:	eb 05                	jmp    20fb33 <_ZN4core5slice6memchr19memchr_general_case17h9e87fa2f9cf497c1E+0x103>
  20fb2e:	b8 01 00 00 00       	mov    $0x1,%eax
  20fb33:	48 89 ca             	mov    %rcx,%rdx
  20fb36:	5b                   	pop    %rbx
  20fb37:	41 5e                	pop    %r14
  20fb39:	41 5f                	pop    %r15
  20fb3b:	c3                   	retq   
  20fb3c:	48 8d 05 3d 3e 00 00 	lea    0x3e3d(%rip),%rax        # 213980 <anon.d72c85eeed5505c0c7c430e367877f6c.3.llvm.5557079508644508522>
  20fb43:	48 89 d6             	mov    %rdx,%rsi
  20fb46:	48 89 c2             	mov    %rax,%rdx
  20fb49:	e8 42 f6 ff ff       	callq  20f190 <_ZN4core5slice5index26slice_start_index_len_fail17h0c2ca18f8115cec0E>
  20fb4e:	0f 0b                	ud2    

000000000020fb50 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h175eee2b0554f36aE>:
  20fb50:	48 83 ec 28          	sub    $0x28,%rsp
  20fb54:	0f b7 07             	movzwl (%rdi),%eax
  20fb57:	b9 27 00 00 00       	mov    $0x27,%ecx
  20fb5c:	48 3d 10 27 00 00    	cmp    $0x2710,%rax
  20fb62:	73 1d                	jae    20fb81 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h175eee2b0554f36aE+0x31>
  20fb64:	83 f8 63             	cmp    $0x63,%eax
  20fb67:	77 7a                	ja     20fbe3 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h175eee2b0554f36aE+0x93>
  20fb69:	48 83 f8 0a          	cmp    $0xa,%rax
  20fb6d:	0f 8d a7 00 00 00    	jge    20fc1a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h175eee2b0554f36aE+0xca>
  20fb73:	04 30                	add    $0x30,%al
  20fb75:	88 04 0c             	mov    %al,(%rsp,%rcx,1)
  20fb78:	48 83 c1 ff          	add    $0xffffffffffffffff,%rcx
  20fb7c:	e9 ad 00 00 00       	jmpq   20fc2e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h175eee2b0554f36aE+0xde>
  20fb81:	89 c1                	mov    %eax,%ecx
  20fb83:	ba 59 17 b7 d1       	mov    $0xd1b71759,%edx
  20fb88:	48 0f af d0          	imul   %rax,%rdx
  20fb8c:	c1 e8 04             	shr    $0x4,%eax
  20fb8f:	69 c0 47 03 00 00    	imul   $0x347,%eax,%eax
  20fb95:	c1 e8 13             	shr    $0x13,%eax
  20fb98:	69 c0 10 27 00 00    	imul   $0x2710,%eax,%eax
  20fb9e:	29 c1                	sub    %eax,%ecx
  20fba0:	0f b7 c1             	movzwl %cx,%eax
  20fba3:	89 c1                	mov    %eax,%ecx
  20fba5:	c1 e9 02             	shr    $0x2,%ecx
  20fba8:	69 c9 7b 14 00 00    	imul   $0x147b,%ecx,%ecx
  20fbae:	c1 e9 11             	shr    $0x11,%ecx
  20fbb1:	6b f9 64             	imul   $0x64,%ecx,%edi
  20fbb4:	29 f8                	sub    %edi,%eax
  20fbb6:	0f b7 c0             	movzwl %ax,%eax
  20fbb9:	48 8d 3d 94 18 ff ff 	lea    -0xe76c(%rip),%rdi        # 201454 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  20fbc0:	0f b7 0c 4f          	movzwl (%rdi,%rcx,2),%ecx
  20fbc4:	66 89 4c 24 24       	mov    %cx,0x24(%rsp)
  20fbc9:	0f b7 04 47          	movzwl (%rdi,%rax,2),%eax
  20fbcd:	66 89 44 24 26       	mov    %ax,0x26(%rsp)
  20fbd2:	48 c1 ea 2d          	shr    $0x2d,%rdx
  20fbd6:	b9 23 00 00 00       	mov    $0x23,%ecx
  20fbdb:	48 89 d0             	mov    %rdx,%rax
  20fbde:	83 f8 63             	cmp    $0x63,%eax
  20fbe1:	76 86                	jbe    20fb69 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h175eee2b0554f36aE+0x19>
  20fbe3:	89 c2                	mov    %eax,%edx
  20fbe5:	c1 ea 02             	shr    $0x2,%edx
  20fbe8:	69 d2 7b 14 00 00    	imul   $0x147b,%edx,%edx
  20fbee:	c1 ea 11             	shr    $0x11,%edx
  20fbf1:	6b fa 64             	imul   $0x64,%edx,%edi
  20fbf4:	29 f8                	sub    %edi,%eax
  20fbf6:	0f b7 c0             	movzwl %ax,%eax
  20fbf9:	48 8d 3d 54 18 ff ff 	lea    -0xe7ac(%rip),%rdi        # 201454 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  20fc00:	0f b7 04 47          	movzwl (%rdi,%rax,2),%eax
  20fc04:	66 89 44 0c ff       	mov    %ax,-0x1(%rsp,%rcx,1)
  20fc09:	48 83 c1 fe          	add    $0xfffffffffffffffe,%rcx
  20fc0d:	48 89 d0             	mov    %rdx,%rax
  20fc10:	48 83 f8 0a          	cmp    $0xa,%rax
  20fc14:	0f 8c 59 ff ff ff    	jl     20fb73 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h175eee2b0554f36aE+0x23>
  20fc1a:	48 8d 15 33 18 ff ff 	lea    -0xe7cd(%rip),%rdx        # 201454 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  20fc21:	0f b7 04 42          	movzwl (%rdx,%rax,2),%eax
  20fc25:	66 89 44 0c ff       	mov    %ax,-0x1(%rsp,%rcx,1)
  20fc2a:	48 83 c1 fe          	add    $0xfffffffffffffffe,%rcx
  20fc2e:	4c 8d 04 0c          	lea    (%rsp,%rcx,1),%r8
  20fc32:	49 83 c0 01          	add    $0x1,%r8
  20fc36:	41 b9 27 00 00 00    	mov    $0x27,%r9d
  20fc3c:	49 29 c9             	sub    %rcx,%r9
  20fc3f:	48 8d 15 24 24 ff ff 	lea    -0xdbdc(%rip),%rdx        # 20206a <anon.d72c85eeed5505c0c7c430e367877f6c.2.llvm.5557079508644508522>
  20fc46:	48 89 f7             	mov    %rsi,%rdi
  20fc49:	be 01 00 00 00       	mov    $0x1,%esi
  20fc4e:	31 c9                	xor    %ecx,%ecx
  20fc50:	e8 2b 09 00 00       	callq  210580 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  20fc55:	48 83 c4 28          	add    $0x28,%rsp
  20fc59:	c3                   	retq   
  20fc5a:	cc                   	int3   
  20fc5b:	cc                   	int3   
  20fc5c:	cc                   	int3   
  20fc5d:	cc                   	int3   
  20fc5e:	cc                   	int3   
  20fc5f:	cc                   	int3   

000000000020fc60 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hf973cc24cacf6f18E>:
  20fc60:	48 83 ec 28          	sub    $0x28,%rsp
  20fc64:	49 89 f2             	mov    %rsi,%r10
  20fc67:	44 8b 1f             	mov    (%rdi),%r11d
  20fc6a:	b9 27 00 00 00       	mov    $0x27,%ecx
  20fc6f:	49 81 fb 10 27 00 00 	cmp    $0x2710,%r11
  20fc76:	0f 82 bd 00 00 00    	jb     20fd39 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hf973cc24cacf6f18E+0xd9>
  20fc7c:	bf 27 00 00 00       	mov    $0x27,%edi
  20fc81:	49 b8 4b 59 86 38 d6 	movabs $0x346dc5d63886594b,%r8
  20fc88:	c5 6d 34 
  20fc8b:	4c 8d 0d c2 17 ff ff 	lea    -0xe83e(%rip),%r9        # 201454 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  20fc92:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  20fc99:	00 00 00 
  20fc9c:	0f 1f 40 00          	nopl   0x0(%rax)
  20fca0:	4c 89 d8             	mov    %r11,%rax
  20fca3:	49 f7 e0             	mul    %r8
  20fca6:	48 c1 ea 0b          	shr    $0xb,%rdx
  20fcaa:	69 c2 10 27 00 00    	imul   $0x2710,%edx,%eax
  20fcb0:	44 89 d9             	mov    %r11d,%ecx
  20fcb3:	29 c1                	sub    %eax,%ecx
  20fcb5:	0f b7 c1             	movzwl %cx,%eax
  20fcb8:	c1 e8 02             	shr    $0x2,%eax
  20fcbb:	69 c0 7b 14 00 00    	imul   $0x147b,%eax,%eax
  20fcc1:	c1 e8 11             	shr    $0x11,%eax
  20fcc4:	6b f0 64             	imul   $0x64,%eax,%esi
  20fcc7:	29 f1                	sub    %esi,%ecx
  20fcc9:	0f b7 f1             	movzwl %cx,%esi
  20fccc:	48 8d 4f fc          	lea    -0x4(%rdi),%rcx
  20fcd0:	41 0f b7 04 41       	movzwl (%r9,%rax,2),%eax
  20fcd5:	66 89 44 3c fd       	mov    %ax,-0x3(%rsp,%rdi,1)
  20fcda:	41 0f b7 04 71       	movzwl (%r9,%rsi,2),%eax
  20fcdf:	66 89 44 3c ff       	mov    %ax,-0x1(%rsp,%rdi,1)
  20fce4:	48 89 cf             	mov    %rcx,%rdi
  20fce7:	49 81 fb ff e0 f5 05 	cmp    $0x5f5e0ff,%r11
  20fcee:	49 89 d3             	mov    %rdx,%r11
  20fcf1:	77 ad                	ja     20fca0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hf973cc24cacf6f18E+0x40>
  20fcf3:	48 83 fa 63          	cmp    $0x63,%rdx
  20fcf7:	76 2e                	jbe    20fd27 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hf973cc24cacf6f18E+0xc7>
  20fcf9:	0f b7 c2             	movzwl %dx,%eax
  20fcfc:	c1 e8 02             	shr    $0x2,%eax
  20fcff:	69 c0 7b 14 00 00    	imul   $0x147b,%eax,%eax
  20fd05:	c1 e8 11             	shr    $0x11,%eax
  20fd08:	6b f0 64             	imul   $0x64,%eax,%esi
  20fd0b:	29 f2                	sub    %esi,%edx
  20fd0d:	0f b7 d2             	movzwl %dx,%edx
  20fd10:	48 8d 35 3d 17 ff ff 	lea    -0xe8c3(%rip),%rsi        # 201454 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  20fd17:	0f b7 14 56          	movzwl (%rsi,%rdx,2),%edx
  20fd1b:	66 89 54 0c ff       	mov    %dx,-0x1(%rsp,%rcx,1)
  20fd20:	48 83 c1 fe          	add    $0xfffffffffffffffe,%rcx
  20fd24:	48 89 c2             	mov    %rax,%rdx
  20fd27:	48 83 fa 0a          	cmp    $0xa,%rdx
  20fd2b:	7d 17                	jge    20fd44 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hf973cc24cacf6f18E+0xe4>
  20fd2d:	80 c2 30             	add    $0x30,%dl
  20fd30:	88 14 0c             	mov    %dl,(%rsp,%rcx,1)
  20fd33:	48 83 c1 ff          	add    $0xffffffffffffffff,%rcx
  20fd37:	eb 1f                	jmp    20fd58 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hf973cc24cacf6f18E+0xf8>
  20fd39:	4c 89 da             	mov    %r11,%rdx
  20fd3c:	48 83 fa 63          	cmp    $0x63,%rdx
  20fd40:	77 b7                	ja     20fcf9 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hf973cc24cacf6f18E+0x99>
  20fd42:	eb e3                	jmp    20fd27 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hf973cc24cacf6f18E+0xc7>
  20fd44:	48 8d 05 09 17 ff ff 	lea    -0xe8f7(%rip),%rax        # 201454 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  20fd4b:	0f b7 04 50          	movzwl (%rax,%rdx,2),%eax
  20fd4f:	66 89 44 0c ff       	mov    %ax,-0x1(%rsp,%rcx,1)
  20fd54:	48 83 c1 fe          	add    $0xfffffffffffffffe,%rcx
  20fd58:	4c 8d 04 0c          	lea    (%rsp,%rcx,1),%r8
  20fd5c:	49 83 c0 01          	add    $0x1,%r8
  20fd60:	41 b9 27 00 00 00    	mov    $0x27,%r9d
  20fd66:	49 29 c9             	sub    %rcx,%r9
  20fd69:	48 8d 15 fa 22 ff ff 	lea    -0xdd06(%rip),%rdx        # 20206a <anon.d72c85eeed5505c0c7c430e367877f6c.2.llvm.5557079508644508522>
  20fd70:	4c 89 d7             	mov    %r10,%rdi
  20fd73:	be 01 00 00 00       	mov    $0x1,%esi
  20fd78:	31 c9                	xor    %ecx,%ecx
  20fd7a:	e8 01 08 00 00       	callq  210580 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  20fd7f:	48 83 c4 28          	add    $0x28,%rsp
  20fd83:	c3                   	retq   
  20fd84:	cc                   	int3   
  20fd85:	cc                   	int3   
  20fd86:	cc                   	int3   
  20fd87:	cc                   	int3   
  20fd88:	cc                   	int3   
  20fd89:	cc                   	int3   
  20fd8a:	cc                   	int3   
  20fd8b:	cc                   	int3   
  20fd8c:	cc                   	int3   
  20fd8d:	cc                   	int3   
  20fd8e:	cc                   	int3   
  20fd8f:	cc                   	int3   

000000000020fd90 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E>:
  20fd90:	48 83 ec 28          	sub    $0x28,%rsp
  20fd94:	49 89 f2             	mov    %rsi,%r10
  20fd97:	4c 8b 1f             	mov    (%rdi),%r11
  20fd9a:	b9 27 00 00 00       	mov    $0x27,%ecx
  20fd9f:	49 81 fb 10 27 00 00 	cmp    $0x2710,%r11
  20fda6:	0f 82 bd 00 00 00    	jb     20fe69 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E+0xd9>
  20fdac:	bf 27 00 00 00       	mov    $0x27,%edi
  20fdb1:	49 b8 4b 59 86 38 d6 	movabs $0x346dc5d63886594b,%r8
  20fdb8:	c5 6d 34 
  20fdbb:	4c 8d 0d 92 16 ff ff 	lea    -0xe96e(%rip),%r9        # 201454 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  20fdc2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  20fdc9:	00 00 00 
  20fdcc:	0f 1f 40 00          	nopl   0x0(%rax)
  20fdd0:	4c 89 d8             	mov    %r11,%rax
  20fdd3:	49 f7 e0             	mul    %r8
  20fdd6:	48 c1 ea 0b          	shr    $0xb,%rdx
  20fdda:	69 c2 10 27 00 00    	imul   $0x2710,%edx,%eax
  20fde0:	44 89 d9             	mov    %r11d,%ecx
  20fde3:	29 c1                	sub    %eax,%ecx
  20fde5:	0f b7 c1             	movzwl %cx,%eax
  20fde8:	c1 e8 02             	shr    $0x2,%eax
  20fdeb:	69 c0 7b 14 00 00    	imul   $0x147b,%eax,%eax
  20fdf1:	c1 e8 11             	shr    $0x11,%eax
  20fdf4:	6b f0 64             	imul   $0x64,%eax,%esi
  20fdf7:	29 f1                	sub    %esi,%ecx
  20fdf9:	0f b7 f1             	movzwl %cx,%esi
  20fdfc:	48 8d 4f fc          	lea    -0x4(%rdi),%rcx
  20fe00:	41 0f b7 04 41       	movzwl (%r9,%rax,2),%eax
  20fe05:	66 89 44 3c fd       	mov    %ax,-0x3(%rsp,%rdi,1)
  20fe0a:	41 0f b7 04 71       	movzwl (%r9,%rsi,2),%eax
  20fe0f:	66 89 44 3c ff       	mov    %ax,-0x1(%rsp,%rdi,1)
  20fe14:	48 89 cf             	mov    %rcx,%rdi
  20fe17:	49 81 fb ff e0 f5 05 	cmp    $0x5f5e0ff,%r11
  20fe1e:	49 89 d3             	mov    %rdx,%r11
  20fe21:	77 ad                	ja     20fdd0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E+0x40>
  20fe23:	48 83 fa 63          	cmp    $0x63,%rdx
  20fe27:	7e 2e                	jle    20fe57 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E+0xc7>
  20fe29:	0f b7 c2             	movzwl %dx,%eax
  20fe2c:	c1 e8 02             	shr    $0x2,%eax
  20fe2f:	69 c0 7b 14 00 00    	imul   $0x147b,%eax,%eax
  20fe35:	c1 e8 11             	shr    $0x11,%eax
  20fe38:	6b f0 64             	imul   $0x64,%eax,%esi
  20fe3b:	29 f2                	sub    %esi,%edx
  20fe3d:	0f b7 d2             	movzwl %dx,%edx
  20fe40:	48 8d 35 0d 16 ff ff 	lea    -0xe9f3(%rip),%rsi        # 201454 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  20fe47:	0f b7 14 56          	movzwl (%rsi,%rdx,2),%edx
  20fe4b:	66 89 54 0c ff       	mov    %dx,-0x1(%rsp,%rcx,1)
  20fe50:	48 83 c1 fe          	add    $0xfffffffffffffffe,%rcx
  20fe54:	48 89 c2             	mov    %rax,%rdx
  20fe57:	48 83 fa 0a          	cmp    $0xa,%rdx
  20fe5b:	7d 17                	jge    20fe74 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E+0xe4>
  20fe5d:	80 c2 30             	add    $0x30,%dl
  20fe60:	88 14 0c             	mov    %dl,(%rsp,%rcx,1)
  20fe63:	48 83 c1 ff          	add    $0xffffffffffffffff,%rcx
  20fe67:	eb 1f                	jmp    20fe88 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E+0xf8>
  20fe69:	4c 89 da             	mov    %r11,%rdx
  20fe6c:	48 83 fa 63          	cmp    $0x63,%rdx
  20fe70:	7f b7                	jg     20fe29 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E+0x99>
  20fe72:	eb e3                	jmp    20fe57 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h2d58afab53102206E+0xc7>
  20fe74:	48 8d 05 d9 15 ff ff 	lea    -0xea27(%rip),%rax        # 201454 <anon.362945bbc83444f50f486d206938f0d7.5.llvm.10057850355689647526>
  20fe7b:	0f b7 04 50          	movzwl (%rax,%rdx,2),%eax
  20fe7f:	66 89 44 0c ff       	mov    %ax,-0x1(%rsp,%rcx,1)
  20fe84:	48 83 c1 fe          	add    $0xfffffffffffffffe,%rcx
  20fe88:	4c 8d 04 0c          	lea    (%rsp,%rcx,1),%r8
  20fe8c:	49 83 c0 01          	add    $0x1,%r8
  20fe90:	41 b9 27 00 00 00    	mov    $0x27,%r9d
  20fe96:	49 29 c9             	sub    %rcx,%r9
  20fe99:	48 8d 15 ca 21 ff ff 	lea    -0xde36(%rip),%rdx        # 20206a <anon.d72c85eeed5505c0c7c430e367877f6c.2.llvm.5557079508644508522>
  20fea0:	4c 89 d7             	mov    %r10,%rdi
  20fea3:	be 01 00 00 00       	mov    $0x1,%esi
  20fea8:	31 c9                	xor    %ecx,%ecx
  20feaa:	e8 d1 06 00 00       	callq  210580 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>
  20feaf:	48 83 c4 28          	add    $0x28,%rsp
  20feb3:	c3                   	retq   
  20feb4:	cc                   	int3   
  20feb5:	cc                   	int3   
  20feb6:	cc                   	int3   
  20feb7:	cc                   	int3   
  20feb8:	cc                   	int3   
  20feb9:	cc                   	int3   
  20feba:	cc                   	int3   
  20febb:	cc                   	int3   
  20febc:	cc                   	int3   
  20febd:	cc                   	int3   
  20febe:	cc                   	int3   
  20febf:	cc                   	int3   

000000000020fec0 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E>:
  20fec0:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
  20fec7:	48 89 94 24 c8 00 00 	mov    %rdx,0xc8(%rsp)
  20fece:	00 
  20fecf:	48 89 8c 24 d0 00 00 	mov    %rcx,0xd0(%rsp)
  20fed6:	00 
  20fed7:	48 81 fe 01 01 00 00 	cmp    $0x101,%rsi
  20fede:	72 51                	jb     20ff31 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x71>
  20fee0:	b8 00 01 00 00       	mov    $0x100,%eax
  20fee5:	4c 8d 0d 24 22 ff ff 	lea    -0xdddc(%rip),%r9        # 202110 <anon.d72c85eeed5505c0c7c430e367877f6c.2.llvm.5557079508644508522+0xa6>
  20feec:	41 ba 05 00 00 00    	mov    $0x5,%r10d
  20fef2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  20fef9:	00 00 00 
  20fefc:	0f 1f 40 00          	nopl   0x0(%rax)
  20ff00:	80 3c 07 bf          	cmpb   $0xbf,(%rdi,%rax,1)
  20ff04:	7f 38                	jg     20ff3e <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x7e>
  20ff06:	80 7c 07 ff c0       	cmpb   $0xc0,-0x1(%rdi,%rax,1)
  20ff0b:	0f 8d bb 01 00 00    	jge    2100cc <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x20c>
  20ff11:	80 7c 07 fe bf       	cmpb   $0xbf,-0x2(%rdi,%rax,1)
  20ff16:	0f 8f b9 01 00 00    	jg     2100d5 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x215>
  20ff1c:	80 7c 07 fd bf       	cmpb   $0xbf,-0x3(%rdi,%rax,1)
  20ff21:	0f 8f b7 01 00 00    	jg     2100de <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x21e>
  20ff27:	48 83 c0 fc          	add    $0xfffffffffffffffc,%rax
  20ff2b:	75 d3                	jne    20ff00 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x40>
  20ff2d:	31 c0                	xor    %eax,%eax
  20ff2f:	eb 0d                	jmp    20ff3e <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x7e>
  20ff31:	4c 8d 0d d8 21 ff ff 	lea    -0xde28(%rip),%r9        # 202110 <anon.d72c85eeed5505c0c7c430e367877f6c.2.llvm.5557079508644508522+0xa6>
  20ff38:	45 31 d2             	xor    %r10d,%r10d
  20ff3b:	48 89 f0             	mov    %rsi,%rax
  20ff3e:	48 89 bc 24 98 00 00 	mov    %rdi,0x98(%rsp)
  20ff45:	00 
  20ff46:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  20ff4d:	00 
  20ff4e:	4c 89 8c 24 a8 00 00 	mov    %r9,0xa8(%rsp)
  20ff55:	00 
  20ff56:	4c 89 94 24 b0 00 00 	mov    %r10,0xb0(%rsp)
  20ff5d:	00 
  20ff5e:	48 39 f2             	cmp    %rsi,%rdx
  20ff61:	77 0c                	ja     20ff6f <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0xaf>
  20ff63:	48 39 f1             	cmp    %rsi,%rcx
  20ff66:	0f 86 8f 00 00 00    	jbe    20fffb <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x13b>
  20ff6c:	48 89 ca             	mov    %rcx,%rdx
  20ff6f:	48 89 94 24 b8 00 00 	mov    %rdx,0xb8(%rsp)
  20ff76:	00 
  20ff77:	48 8d 84 24 b8 00 00 	lea    0xb8(%rsp),%rax
  20ff7e:	00 
  20ff7f:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  20ff84:	48 8b 05 8d 3b 00 00 	mov    0x3b8d(%rip),%rax        # 213b18 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x90>
  20ff8b:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  20ff90:	48 8d 84 24 98 00 00 	lea    0x98(%rsp),%rax
  20ff97:	00 
  20ff98:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  20ff9d:	48 8d 05 fc 18 00 00 	lea    0x18fc(%rip),%rax        # 2118a0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17heacd4ee5f6ef5e5fE>
  20ffa4:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  20ffa9:	48 8d 8c 24 a8 00 00 	lea    0xa8(%rsp),%rcx
  20ffb0:	00 
  20ffb1:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  20ffb6:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  20ffbb:	48 8d 05 d6 39 00 00 	lea    0x39d6(%rip),%rax        # 213998 <anon.d72c85eeed5505c0c7c430e367877f6c.3.llvm.5557079508644508522+0x18>
  20ffc2:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  20ffc7:	48 c7 44 24 20 03 00 	movq   $0x3,0x20(%rsp)
  20ffce:	00 00 
  20ffd0:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  20ffd7:	00 00 
  20ffd9:	48 8d 44 24 48       	lea    0x48(%rsp),%rax
  20ffde:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  20ffe3:	48 c7 44 24 40 03 00 	movq   $0x3,0x40(%rsp)
  20ffea:	00 00 
  20ffec:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  20fff1:	4c 89 c6             	mov    %r8,%rsi
  20fff4:	e8 67 ef ff ff       	callq  20ef60 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  20fff9:	0f 0b                	ud2    
  20fffb:	48 39 ca             	cmp    %rcx,%rdx
  20fffe:	0f 86 99 00 00 00    	jbe    21009d <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x1dd>
  210004:	48 8d 84 24 c8 00 00 	lea    0xc8(%rsp),%rax
  21000b:	00 
  21000c:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  210011:	48 8b 05 00 3b 00 00 	mov    0x3b00(%rip),%rax        # 213b18 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x90>
  210018:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  21001d:	48 8d 8c 24 d0 00 00 	lea    0xd0(%rsp),%rcx
  210024:	00 
  210025:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  21002a:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  21002f:	48 8d 84 24 98 00 00 	lea    0x98(%rsp),%rax
  210036:	00 
  210037:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  21003c:	48 8d 05 5d 18 00 00 	lea    0x185d(%rip),%rax        # 2118a0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17heacd4ee5f6ef5e5fE>
  210043:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  210048:	48 8d 8c 24 a8 00 00 	lea    0xa8(%rsp),%rcx
  21004f:	00 
  210050:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
  210055:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  21005c:	00 
  21005d:	48 8d 05 64 39 00 00 	lea    0x3964(%rip),%rax        # 2139c8 <anon.d72c85eeed5505c0c7c430e367877f6c.3.llvm.5557079508644508522+0x48>
  210064:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  210069:	48 c7 44 24 20 04 00 	movq   $0x4,0x20(%rsp)
  210070:	00 00 
  210072:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  210079:	00 00 
  21007b:	48 8d 44 24 48       	lea    0x48(%rsp),%rax
  210080:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  210085:	48 c7 44 24 40 04 00 	movq   $0x4,0x40(%rsp)
  21008c:	00 00 
  21008e:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  210093:	4c 89 c6             	mov    %r8,%rsi
  210096:	e8 c5 ee ff ff       	callq  20ef60 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  21009b:	0f 0b                	ud2    
  21009d:	48 85 d2             	test   %rdx,%rdx
  2100a0:	75 45                	jne    2100e7 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x227>
  2100a2:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  2100a7:	48 85 c9             	test   %rcx,%rcx
  2100aa:	75 60                	jne    21010c <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x24c>
  2100ac:	31 c9                	xor    %ecx,%ecx
  2100ae:	48 39 f1             	cmp    %rsi,%rcx
  2100b1:	74 63                	je     210116 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x256>
  2100b3:	48 8d 04 0f          	lea    (%rdi,%rcx,1),%rax
  2100b7:	0f b6 10             	movzbl (%rax),%edx
  2100ba:	84 d2                	test   %dl,%dl
  2100bc:	78 6e                	js     21012c <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x26c>
  2100be:	89 54 24 0c          	mov    %edx,0xc(%rsp)
  2100c2:	b8 01 00 00 00       	mov    $0x1,%eax
  2100c7:	e9 0e 01 00 00       	jmpq   2101da <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x31a>
  2100cc:	48 83 c0 ff          	add    $0xffffffffffffffff,%rax
  2100d0:	e9 69 fe ff ff       	jmpq   20ff3e <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x7e>
  2100d5:	48 83 c0 fe          	add    $0xfffffffffffffffe,%rax
  2100d9:	e9 60 fe ff ff       	jmpq   20ff3e <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x7e>
  2100de:	48 83 c0 fd          	add    $0xfffffffffffffffd,%rax
  2100e2:	e9 57 fe ff ff       	jmpq   20ff3e <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x7e>
  2100e7:	48 39 f2             	cmp    %rsi,%rdx
  2100ea:	73 08                	jae    2100f4 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x234>
  2100ec:	80 3c 17 bf          	cmpb   $0xbf,(%rdi,%rdx,1)
  2100f0:	7f b0                	jg     2100a2 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x1e2>
  2100f2:	eb 02                	jmp    2100f6 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x236>
  2100f4:	74 ac                	je     2100a2 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x1e2>
  2100f6:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  2100fb:	48 89 d1             	mov    %rdx,%rcx
  2100fe:	eb 0c                	jmp    21010c <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x24c>
  210100:	80 3c 0f bf          	cmpb   $0xbf,(%rdi,%rcx,1)
  210104:	7f a8                	jg     2100ae <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x1ee>
  210106:	48 83 c1 ff          	add    $0xffffffffffffffff,%rcx
  21010a:	74 a0                	je     2100ac <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x1ec>
  21010c:	48 39 f1             	cmp    %rsi,%rcx
  21010f:	72 ef                	jb     210100 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x240>
  210111:	48 39 ce             	cmp    %rcx,%rsi
  210114:	75 f0                	jne    210106 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x246>
  210116:	48 8d 3d c6 1f ff ff 	lea    -0xe03a(%rip),%rdi        # 2020e3 <anon.d72c85eeed5505c0c7c430e367877f6c.2.llvm.5557079508644508522+0x79>
  21011d:	be 2b 00 00 00       	mov    $0x2b,%esi
  210122:	4c 89 c2             	mov    %r8,%rdx
  210125:	e8 66 ed ff ff       	callq  20ee90 <_ZN4core9panicking5panic17hb5e1b99c05020429E>
  21012a:	0f 0b                	ud2    
  21012c:	48 01 f7             	add    %rsi,%rdi
  21012f:	4c 8d 50 01          	lea    0x1(%rax),%r10
  210133:	31 f6                	xor    %esi,%esi
  210135:	49 89 f9             	mov    %rdi,%r9
  210138:	49 39 fa             	cmp    %rdi,%r10
  21013b:	74 0e                	je     21014b <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x28b>
  21013d:	0f b6 70 01          	movzbl 0x1(%rax),%esi
  210141:	48 83 c0 02          	add    $0x2,%rax
  210145:	83 e6 3f             	and    $0x3f,%esi
  210148:	49 89 c1             	mov    %rax,%r9
  21014b:	89 d0                	mov    %edx,%eax
  21014d:	83 e0 1f             	and    $0x1f,%eax
  210150:	80 fa df             	cmp    $0xdf,%dl
  210153:	76 4e                	jbe    2101a3 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x2e3>
  210155:	45 31 db             	xor    %r11d,%r11d
  210158:	49 89 fa             	mov    %rdi,%r10
  21015b:	49 39 f9             	cmp    %rdi,%r9
  21015e:	74 0f                	je     21016f <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x2af>
  210160:	45 0f b6 19          	movzbl (%r9),%r11d
  210164:	49 83 c1 01          	add    $0x1,%r9
  210168:	41 83 e3 3f          	and    $0x3f,%r11d
  21016c:	4d 89 ca             	mov    %r9,%r10
  21016f:	c1 e6 06             	shl    $0x6,%esi
  210172:	44 09 de             	or     %r11d,%esi
  210175:	80 fa f0             	cmp    $0xf0,%dl
  210178:	72 2e                	jb     2101a8 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x2e8>
  21017a:	31 d2                	xor    %edx,%edx
  21017c:	49 39 fa             	cmp    %rdi,%r10
  21017f:	74 07                	je     210188 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x2c8>
  210181:	41 0f b6 12          	movzbl (%r10),%edx
  210185:	83 e2 3f             	and    $0x3f,%edx
  210188:	83 e0 07             	and    $0x7,%eax
  21018b:	c1 e0 12             	shl    $0x12,%eax
  21018e:	c1 e6 06             	shl    $0x6,%esi
  210191:	09 c6                	or     %eax,%esi
  210193:	09 d6                	or     %edx,%esi
  210195:	81 fe 00 00 11 00    	cmp    $0x110000,%esi
  21019b:	0f 84 75 ff ff ff    	je     210116 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x256>
  2101a1:	eb 0a                	jmp    2101ad <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x2ed>
  2101a3:	c1 e0 06             	shl    $0x6,%eax
  2101a6:	eb 03                	jmp    2101ab <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x2eb>
  2101a8:	c1 e0 0c             	shl    $0xc,%eax
  2101ab:	09 c6                	or     %eax,%esi
  2101ad:	89 74 24 0c          	mov    %esi,0xc(%rsp)
  2101b1:	b8 01 00 00 00       	mov    $0x1,%eax
  2101b6:	81 fe 80 00 00 00    	cmp    $0x80,%esi
  2101bc:	72 1c                	jb     2101da <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x31a>
  2101be:	b8 02 00 00 00       	mov    $0x2,%eax
  2101c3:	81 fe 00 08 00 00    	cmp    $0x800,%esi
  2101c9:	72 0f                	jb     2101da <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E+0x31a>
  2101cb:	81 fe 00 00 01 00    	cmp    $0x10000,%esi
  2101d1:	b8 04 00 00 00       	mov    $0x4,%eax
  2101d6:	48 83 d8 00          	sbb    $0x0,%rax
  2101da:	48 01 c8             	add    %rcx,%rax
  2101dd:	48 89 8c 24 b8 00 00 	mov    %rcx,0xb8(%rsp)
  2101e4:	00 
  2101e5:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  2101ec:	00 
  2101ed:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
  2101f2:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  2101f7:	48 8b 05 1a 39 00 00 	mov    0x391a(%rip),%rax        # 213b18 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x90>
  2101fe:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  210203:	48 8d 44 24 0c       	lea    0xc(%rsp),%rax
  210208:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  21020d:	48 8b 05 44 39 00 00 	mov    0x3944(%rip),%rax        # 213b58 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0xd0>
  210214:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  210219:	48 8d 84 24 b8 00 00 	lea    0xb8(%rsp),%rax
  210220:	00 
  210221:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  210226:	48 8d 05 53 f2 ff ff 	lea    -0xdad(%rip),%rax        # 20f480 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h839b8021a072e19eE>
  21022d:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  210232:	48 8d 84 24 98 00 00 	lea    0x98(%rsp),%rax
  210239:	00 
  21023a:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  21023f:	48 8d 05 5a 16 00 00 	lea    0x165a(%rip),%rax        # 2118a0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17heacd4ee5f6ef5e5fE>
  210246:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  21024d:	00 
  21024e:	48 8d 8c 24 a8 00 00 	lea    0xa8(%rsp),%rcx
  210255:	00 
  210256:	48 89 8c 24 88 00 00 	mov    %rcx,0x88(%rsp)
  21025d:	00 
  21025e:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  210265:	00 
  210266:	48 8d 05 9b 37 00 00 	lea    0x379b(%rip),%rax        # 213a08 <anon.d72c85eeed5505c0c7c430e367877f6c.3.llvm.5557079508644508522+0x88>
  21026d:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  210272:	48 c7 44 24 20 05 00 	movq   $0x5,0x20(%rsp)
  210279:	00 00 
  21027b:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  210282:	00 00 
  210284:	48 8d 44 24 48       	lea    0x48(%rsp),%rax
  210289:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  21028e:	48 c7 44 24 40 05 00 	movq   $0x5,0x40(%rsp)
  210295:	00 00 
  210297:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
  21029c:	4c 89 c6             	mov    %r8,%rsi
  21029f:	e8 bc ec ff ff       	callq  20ef60 <_ZN4core9panicking9panic_fmt17hef063dedab4bd980E>
  2102a4:	0f 0b                	ud2    
  2102a6:	cc                   	int3   
  2102a7:	cc                   	int3   
  2102a8:	cc                   	int3   
  2102a9:	cc                   	int3   
  2102aa:	cc                   	int3   
  2102ab:	cc                   	int3   
  2102ac:	cc                   	int3   
  2102ad:	cc                   	int3   
  2102ae:	cc                   	int3   
  2102af:	cc                   	int3   

00000000002102b0 <_ZN4core3ops8function6FnOnce9call_once17hb5f36960f2c5e89aE.llvm.2324975589069524467>:
  2102b0:	48 8b 07             	mov    (%rdi),%rax
  2102b3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  2102ba:	00 00 00 
  2102bd:	0f 1f 00             	nopl   (%rax)
  2102c0:	eb fe                	jmp    2102c0 <_ZN4core3ops8function6FnOnce9call_once17hb5f36960f2c5e89aE.llvm.2324975589069524467+0x10>
  2102c2:	cc                   	int3   
  2102c3:	cc                   	int3   
  2102c4:	cc                   	int3   
  2102c5:	cc                   	int3   
  2102c6:	cc                   	int3   
  2102c7:	cc                   	int3   
  2102c8:	cc                   	int3   
  2102c9:	cc                   	int3   
  2102ca:	cc                   	int3   
  2102cb:	cc                   	int3   
  2102cc:	cc                   	int3   
  2102cd:	cc                   	int3   
  2102ce:	cc                   	int3   
  2102cf:	cc                   	int3   

00000000002102d0 <_ZN4core3ptr52drop_in_place$LT$core..fmt..builders..PadAdapter$GT$17hbd463aa3be6e96dfE.llvm.2324975589069524467>:
  2102d0:	c3                   	retq   
  2102d1:	cc                   	int3   
  2102d2:	cc                   	int3   
  2102d3:	cc                   	int3   
  2102d4:	cc                   	int3   
  2102d5:	cc                   	int3   
  2102d6:	cc                   	int3   
  2102d7:	cc                   	int3   
  2102d8:	cc                   	int3   
  2102d9:	cc                   	int3   
  2102da:	cc                   	int3   
  2102db:	cc                   	int3   
  2102dc:	cc                   	int3   
  2102dd:	cc                   	int3   
  2102de:	cc                   	int3   
  2102df:	cc                   	int3   

00000000002102e0 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h98e7025a5377be95E>:
  2102e0:	48 83 ec 38          	sub    $0x38,%rsp
  2102e4:	48 8b 46 20          	mov    0x20(%rsi),%rax
  2102e8:	48 8b 76 28          	mov    0x28(%rsi),%rsi
  2102ec:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
  2102f0:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  2102f5:	48 8b 4f 20          	mov    0x20(%rdi),%rcx
  2102f9:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  2102fe:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
  210302:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  210307:	48 8b 4f 10          	mov    0x10(%rdi),%rcx
  21030b:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  210310:	48 8b 0f             	mov    (%rdi),%rcx
  210313:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  210317:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  21031c:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  210321:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
  210326:	48 89 c7             	mov    %rax,%rdi
  210329:	e8 12 00 00 00       	callq  210340 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE>
  21032e:	48 83 c4 38          	add    $0x38,%rsp
  210332:	c3                   	retq   
  210333:	cc                   	int3   
  210334:	cc                   	int3   
  210335:	cc                   	int3   
  210336:	cc                   	int3   
  210337:	cc                   	int3   
  210338:	cc                   	int3   
  210339:	cc                   	int3   
  21033a:	cc                   	int3   
  21033b:	cc                   	int3   
  21033c:	cc                   	int3   
  21033d:	cc                   	int3   
  21033e:	cc                   	int3   
  21033f:	cc                   	int3   

0000000000210340 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE>:
  210340:	55                   	push   %rbp
  210341:	41 57                	push   %r15
  210343:	41 56                	push   %r14
  210345:	41 55                	push   %r13
  210347:	41 54                	push   %r12
  210349:	53                   	push   %rbx
  21034a:	48 83 ec 48          	sub    $0x48,%rsp
  21034e:	49 89 d4             	mov    %rdx,%r12
  210351:	48 b8 00 00 00 00 20 	movabs $0x2000000000,%rax
  210358:	00 00 00 
  21035b:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  210360:	c6 44 24 38 03       	movb   $0x3,0x38(%rsp)
  210365:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
  21036c:	00 
  21036d:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  210374:	00 00 
  210376:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  21037b:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  210380:	48 8b 5a 10          	mov    0x10(%rdx),%rbx
  210384:	48 85 db             	test   %rbx,%rbx
  210387:	0f 84 28 01 00 00    	je     2104b5 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x175>
  21038d:	49 8b 44 24 18       	mov    0x18(%r12),%rax
  210392:	4c 6b e8 38          	imul   $0x38,%rax,%r13
  210396:	4d 85 ed             	test   %r13,%r13
  210399:	0f 84 91 01 00 00    	je     210530 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x1f0>
  21039f:	49 8b 2c 24          	mov    (%r12),%rbp
  2103a3:	4c 8d 3c c5 f8 ff ff 	lea    -0x8(,%rax,8),%r15
  2103aa:	ff 
  2103ab:	49 c1 ef 03          	shr    $0x3,%r15
  2103af:	49 83 c7 01          	add    $0x1,%r15
  2103b3:	48 83 c5 08          	add    $0x8,%rbp
  2103b7:	45 31 f6             	xor    %r14d,%r14d
  2103ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  2103c0:	48 8b 55 00          	mov    0x0(%rbp),%rdx
  2103c4:	48 85 d2             	test   %rdx,%rdx
  2103c7:	74 19                	je     2103e2 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0xa2>
  2103c9:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  2103ce:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  2103d3:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  2103d7:	ff 50 18             	callq  *0x18(%rax)
  2103da:	84 c0                	test   %al,%al
  2103dc:	0f 85 80 01 00 00    	jne    210562 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x222>
  2103e2:	49 8b 44 24 20       	mov    0x20(%r12),%rax
  2103e7:	42 8b 4c 33 28       	mov    0x28(%rbx,%r14,1),%ecx
  2103ec:	89 4c 24 34          	mov    %ecx,0x34(%rsp)
  2103f0:	42 0f b6 4c 33 30    	movzbl 0x30(%rbx,%r14,1),%ecx
  2103f6:	88 4c 24 38          	mov    %cl,0x38(%rsp)
  2103fa:	42 8b 4c 33 2c       	mov    0x2c(%rbx,%r14,1),%ecx
  2103ff:	89 4c 24 30          	mov    %ecx,0x30(%rsp)
  210403:	4a 8b 54 33 18       	mov    0x18(%rbx,%r14,1),%rdx
  210408:	4a 8b 4c 33 20       	mov    0x20(%rbx,%r14,1),%rcx
  21040d:	48 85 d2             	test   %rdx,%rdx
  210410:	74 23                	je     210435 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0xf5>
  210412:	48 83 fa 01          	cmp    $0x1,%rdx
  210416:	75 12                	jne    21042a <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0xea>
  210418:	48 c1 e1 04          	shl    $0x4,%rcx
  21041c:	48 8d 15 8d fe ff ff 	lea    -0x173(%rip),%rdx        # 2102b0 <_ZN4core3ops8function6FnOnce9call_once17hb5f36960f2c5e89aE.llvm.2324975589069524467>
  210423:	48 39 54 08 08       	cmp    %rdx,0x8(%rax,%rcx,1)
  210428:	74 04                	je     21042e <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0xee>
  21042a:	31 d2                	xor    %edx,%edx
  21042c:	eb 0c                	jmp    21043a <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0xfa>
  21042e:	48 8b 0c 08          	mov    (%rax,%rcx,1),%rcx
  210432:	48 8b 09             	mov    (%rcx),%rcx
  210435:	ba 01 00 00 00       	mov    $0x1,%edx
  21043a:	48 89 14 24          	mov    %rdx,(%rsp)
  21043e:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  210443:	4a 8b 54 33 08       	mov    0x8(%rbx,%r14,1),%rdx
  210448:	4a 8b 4c 33 10       	mov    0x10(%rbx,%r14,1),%rcx
  21044d:	48 85 d2             	test   %rdx,%rdx
  210450:	74 23                	je     210475 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x135>
  210452:	48 83 fa 01          	cmp    $0x1,%rdx
  210456:	75 12                	jne    21046a <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x12a>
  210458:	48 c1 e1 04          	shl    $0x4,%rcx
  21045c:	48 8d 15 4d fe ff ff 	lea    -0x1b3(%rip),%rdx        # 2102b0 <_ZN4core3ops8function6FnOnce9call_once17hb5f36960f2c5e89aE.llvm.2324975589069524467>
  210463:	48 39 54 08 08       	cmp    %rdx,0x8(%rax,%rcx,1)
  210468:	74 04                	je     21046e <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x12e>
  21046a:	31 d2                	xor    %edx,%edx
  21046c:	eb 0c                	jmp    21047a <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x13a>
  21046e:	48 8b 0c 08          	mov    (%rax,%rcx,1),%rcx
  210472:	48 8b 09             	mov    (%rcx),%rcx
  210475:	ba 01 00 00 00       	mov    $0x1,%edx
  21047a:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  21047f:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  210484:	4a 8b 0c 33          	mov    (%rbx,%r14,1),%rcx
  210488:	48 c1 e1 04          	shl    $0x4,%rcx
  21048c:	48 8b 3c 08          	mov    (%rax,%rcx,1),%rdi
  210490:	48 89 e6             	mov    %rsp,%rsi
  210493:	ff 54 08 08          	callq  *0x8(%rax,%rcx,1)
  210497:	84 c0                	test   %al,%al
  210499:	0f 85 c3 00 00 00    	jne    210562 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x222>
  21049f:	48 83 c5 10          	add    $0x10,%rbp
  2104a3:	49 83 c6 38          	add    $0x38,%r14
  2104a7:	4d 39 f5             	cmp    %r14,%r13
  2104aa:	0f 85 10 ff ff ff    	jne    2103c0 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x80>
  2104b0:	4c 89 fa             	mov    %r15,%rdx
  2104b3:	eb 7d                	jmp    210532 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x1f2>
  2104b5:	4d 8b 6c 24 28       	mov    0x28(%r12),%r13
  2104ba:	4d 85 ed             	test   %r13,%r13
  2104bd:	74 71                	je     210530 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x1f0>
  2104bf:	49 8b 6c 24 20       	mov    0x20(%r12),%rbp
  2104c4:	49 8b 1c 24          	mov    (%r12),%rbx
  2104c8:	49 c1 e5 04          	shl    $0x4,%r13
  2104cc:	49 8d 45 f0          	lea    -0x10(%r13),%rax
  2104d0:	48 c1 e8 04          	shr    $0x4,%rax
  2104d4:	48 83 c0 01          	add    $0x1,%rax
  2104d8:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  2104dd:	45 31 ff             	xor    %r15d,%r15d
  2104e0:	49 89 e6             	mov    %rsp,%r14
  2104e3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  2104ea:	00 00 00 
  2104ed:	0f 1f 00             	nopl   (%rax)
  2104f0:	4a 8b 54 3b 08       	mov    0x8(%rbx,%r15,1),%rdx
  2104f5:	48 85 d2             	test   %rdx,%rdx
  2104f8:	74 15                	je     21050f <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x1cf>
  2104fa:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  2104ff:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  210504:	4a 8b 34 3b          	mov    (%rbx,%r15,1),%rsi
  210508:	ff 50 18             	callq  *0x18(%rax)
  21050b:	84 c0                	test   %al,%al
  21050d:	75 53                	jne    210562 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x222>
  21050f:	4a 8b 7c 3d 00       	mov    0x0(%rbp,%r15,1),%rdi
  210514:	4c 89 f6             	mov    %r14,%rsi
  210517:	42 ff 54 3d 08       	callq  *0x8(%rbp,%r15,1)
  21051c:	84 c0                	test   %al,%al
  21051e:	75 42                	jne    210562 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x222>
  210520:	49 83 c7 10          	add    $0x10,%r15
  210524:	4d 39 fd             	cmp    %r15,%r13
  210527:	75 c7                	jne    2104f0 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x1b0>
  210529:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  21052e:	eb 02                	jmp    210532 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x1f2>
  210530:	31 d2                	xor    %edx,%edx
  210532:	48 89 d1             	mov    %rdx,%rcx
  210535:	48 c1 e1 04          	shl    $0x4,%rcx
  210539:	49 03 0c 24          	add    (%r12),%rcx
  21053d:	31 c0                	xor    %eax,%eax
  21053f:	49 3b 54 24 08       	cmp    0x8(%r12),%rdx
  210544:	48 0f 42 c1          	cmovb  %rcx,%rax
  210548:	73 1c                	jae    210566 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x226>
  21054a:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  21054f:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  210554:	48 8b 30             	mov    (%rax),%rsi
  210557:	48 8b 50 08          	mov    0x8(%rax),%rdx
  21055b:	ff 51 18             	callq  *0x18(%rcx)
  21055e:	84 c0                	test   %al,%al
  210560:	74 04                	je     210566 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x226>
  210562:	b0 01                	mov    $0x1,%al
  210564:	eb 02                	jmp    210568 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE+0x228>
  210566:	31 c0                	xor    %eax,%eax
  210568:	48 83 c4 48          	add    $0x48,%rsp
  21056c:	5b                   	pop    %rbx
  21056d:	41 5c                	pop    %r12
  21056f:	41 5d                	pop    %r13
  210571:	41 5e                	pop    %r14
  210573:	41 5f                	pop    %r15
  210575:	5d                   	pop    %rbp
  210576:	c3                   	retq   
  210577:	cc                   	int3   
  210578:	cc                   	int3   
  210579:	cc                   	int3   
  21057a:	cc                   	int3   
  21057b:	cc                   	int3   
  21057c:	cc                   	int3   
  21057d:	cc                   	int3   
  21057e:	cc                   	int3   
  21057f:	cc                   	int3   

0000000000210580 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E>:
  210580:	55                   	push   %rbp
  210581:	41 57                	push   %r15
  210583:	41 56                	push   %r14
  210585:	41 55                	push   %r13
  210587:	41 54                	push   %r12
  210589:	53                   	push   %rbx
  21058a:	48 83 ec 38          	sub    $0x38,%rsp
  21058e:	4d 89 ce             	mov    %r9,%r14
  210591:	4d 89 c4             	mov    %r8,%r12
  210594:	49 89 fd             	mov    %rdi,%r13
  210597:	85 f6                	test   %esi,%esi
  210599:	74 47                	je     2105e2 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x62>
  21059b:	45 8b 45 30          	mov    0x30(%r13),%r8d
  21059f:	45 89 c2             	mov    %r8d,%r10d
  2105a2:	41 83 e2 01          	and    $0x1,%r10d
  2105a6:	4d 85 d2             	test   %r10,%r10
  2105a9:	b8 00 00 11 00       	mov    $0x110000,%eax
  2105ae:	41 bf 2b 00 00 00    	mov    $0x2b,%r15d
  2105b4:	44 0f 44 f8          	cmove  %eax,%r15d
  2105b8:	4d 01 f2             	add    %r14,%r10
  2105bb:	41 f6 c0 04          	test   $0x4,%r8b
  2105bf:	74 35                	je     2105f6 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x76>
  2105c1:	48 85 c9             	test   %rcx,%rcx
  2105c4:	74 57                	je     21061d <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x9d>
  2105c6:	48 8d 71 ff          	lea    -0x1(%rcx),%rsi
  2105ca:	89 c8                	mov    %ecx,%eax
  2105cc:	83 e0 03             	and    $0x3,%eax
  2105cf:	48 83 fe 03          	cmp    $0x3,%rsi
  2105d3:	73 52                	jae    210627 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0xa7>
  2105d5:	49 89 c9             	mov    %rcx,%r9
  2105d8:	31 f6                	xor    %esi,%esi
  2105da:	48 89 d7             	mov    %rdx,%rdi
  2105dd:	e9 99 00 00 00       	jmpq   21067b <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0xfb>
  2105e2:	4d 8d 56 01          	lea    0x1(%r14),%r10
  2105e6:	45 8b 45 30          	mov    0x30(%r13),%r8d
  2105ea:	41 bf 2d 00 00 00    	mov    $0x2d,%r15d
  2105f0:	41 f6 c0 04          	test   $0x4,%r8b
  2105f4:	75 cb                	jne    2105c1 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x41>
  2105f6:	31 d2                	xor    %edx,%edx
  2105f8:	41 83 7d 00 01       	cmpl   $0x1,0x0(%r13)
  2105fd:	0f 84 b3 00 00 00    	je     2106b6 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x136>
  210603:	4c 89 ef             	mov    %r13,%rdi
  210606:	44 89 fe             	mov    %r15d,%esi
  210609:	e8 42 03 00 00       	callq  210950 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h63afe22006d50b40E>
  21060e:	b1 01                	mov    $0x1,%cl
  210610:	84 c0                	test   %al,%al
  210612:	0f 84 0c 01 00 00    	je     210724 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x1a4>
  210618:	e9 cc 02 00 00       	jmpq   2108e9 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x369>
  21061d:	49 89 c9             	mov    %rcx,%r9
  210620:	31 f6                	xor    %esi,%esi
  210622:	e9 7e 00 00 00       	jmpq   2106a5 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x125>
  210627:	49 89 c9             	mov    %rcx,%r9
  21062a:	48 89 cd             	mov    %rcx,%rbp
  21062d:	48 83 e5 fc          	and    $0xfffffffffffffffc,%rbp
  210631:	48 f7 dd             	neg    %rbp
  210634:	31 f6                	xor    %esi,%esi
  210636:	48 89 d7             	mov    %rdx,%rdi
  210639:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  210640:	31 db                	xor    %ebx,%ebx
  210642:	80 3f c0             	cmpb   $0xc0,(%rdi)
  210645:	0f 9d c3             	setge  %bl
  210648:	48 01 f3             	add    %rsi,%rbx
  21064b:	31 f6                	xor    %esi,%esi
  21064d:	80 7f 01 c0          	cmpb   $0xc0,0x1(%rdi)
  210651:	40 0f 9d c6          	setge  %sil
  210655:	48 01 de             	add    %rbx,%rsi
  210658:	31 db                	xor    %ebx,%ebx
  21065a:	80 7f 02 c0          	cmpb   $0xc0,0x2(%rdi)
  21065e:	0f 9d c3             	setge  %bl
  210661:	48 01 f3             	add    %rsi,%rbx
  210664:	31 f6                	xor    %esi,%esi
  210666:	80 7f 03 c0          	cmpb   $0xc0,0x3(%rdi)
  21066a:	48 8d 7f 04          	lea    0x4(%rdi),%rdi
  21066e:	40 0f 9d c6          	setge  %sil
  210672:	48 01 de             	add    %rbx,%rsi
  210675:	48 83 c5 04          	add    $0x4,%rbp
  210679:	75 c5                	jne    210640 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0xc0>
  21067b:	48 85 c0             	test   %rax,%rax
  21067e:	74 25                	je     2106a5 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x125>
  210680:	31 ed                	xor    %ebp,%ebp
  210682:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  210689:	00 00 00 
  21068c:	0f 1f 40 00          	nopl   0x0(%rax)
  210690:	31 db                	xor    %ebx,%ebx
  210692:	80 3c 2f c0          	cmpb   $0xc0,(%rdi,%rbp,1)
  210696:	0f 9d c3             	setge  %bl
  210699:	48 01 de             	add    %rbx,%rsi
  21069c:	48 83 c5 01          	add    $0x1,%rbp
  2106a0:	48 39 e8             	cmp    %rbp,%rax
  2106a3:	75 eb                	jne    210690 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x110>
  2106a5:	49 01 f2             	add    %rsi,%r10
  2106a8:	4c 89 c9             	mov    %r9,%rcx
  2106ab:	41 83 7d 00 01       	cmpl   $0x1,0x0(%r13)
  2106b0:	0f 85 4d ff ff ff    	jne    210603 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x83>
  2106b6:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  2106bb:	49 8b 6d 08          	mov    0x8(%r13),%rbp
  2106bf:	48 89 eb             	mov    %rbp,%rbx
  2106c2:	4c 29 d3             	sub    %r10,%rbx
  2106c5:	76 43                	jbe    21070a <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x18a>
  2106c7:	41 f6 c0 08          	test   $0x8,%r8b
  2106cb:	75 79                	jne    210746 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x1c6>
  2106cd:	4c 29 d5             	sub    %r10,%rbp
  2106d0:	41 8b 4d 38          	mov    0x38(%r13),%ecx
  2106d4:	80 f9 03             	cmp    $0x3,%cl
  2106d7:	b8 01 00 00 00       	mov    $0x1,%eax
  2106dc:	0f 45 c1             	cmovne %ecx,%eax
  2106df:	84 c0                	test   %al,%al
  2106e1:	4c 89 74 24 18       	mov    %r14,0x18(%rsp)
  2106e6:	4c 89 64 24 10       	mov    %r12,0x10(%rsp)
  2106eb:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  2106f0:	0f 84 b8 00 00 00    	je     2107ae <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x22e>
  2106f6:	3c 01                	cmp    $0x1,%al
  2106f8:	0f 85 b9 00 00 00    	jne    2107b7 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x237>
  2106fe:	31 c0                	xor    %eax,%eax
  210700:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  210705:	e9 c2 00 00 00       	jmpq   2107cc <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x24c>
  21070a:	4c 89 ef             	mov    %r13,%rdi
  21070d:	44 89 fe             	mov    %r15d,%esi
  210710:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  210715:	e8 36 02 00 00       	callq  210950 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h63afe22006d50b40E>
  21071a:	b1 01                	mov    $0x1,%cl
  21071c:	84 c0                	test   %al,%al
  21071e:	0f 85 c5 01 00 00    	jne    2108e9 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x369>
  210724:	49 8b 7d 20          	mov    0x20(%r13),%rdi
  210728:	49 8b 45 28          	mov    0x28(%r13),%rax
  21072c:	48 8b 40 18          	mov    0x18(%rax),%rax
  210730:	4c 89 e6             	mov    %r12,%rsi
  210733:	4c 89 f2             	mov    %r14,%rdx
  210736:	48 83 c4 38          	add    $0x38,%rsp
  21073a:	5b                   	pop    %rbx
  21073b:	41 5c                	pop    %r12
  21073d:	41 5d                	pop    %r13
  21073f:	41 5e                	pop    %r14
  210741:	41 5f                	pop    %r15
  210743:	5d                   	pop    %rbp
  210744:	ff e0                	jmpq   *%rax
  210746:	41 8b 6d 34          	mov    0x34(%r13),%ebp
  21074a:	41 c7 45 34 30 00 00 	movl   $0x30,0x34(%r13)
  210751:	00 
  210752:	41 8a 45 38          	mov    0x38(%r13),%al
  210756:	88 44 24 08          	mov    %al,0x8(%rsp)
  21075a:	41 c6 45 38 01       	movb   $0x1,0x38(%r13)
  21075f:	4c 89 ef             	mov    %r13,%rdi
  210762:	44 89 fe             	mov    %r15d,%esi
  210765:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  21076a:	e8 e1 01 00 00       	callq  210950 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h63afe22006d50b40E>
  21076f:	b1 01                	mov    $0x1,%cl
  210771:	84 c0                	test   %al,%al
  210773:	0f 85 70 01 00 00    	jne    2108e9 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x369>
  210779:	41 8b 4d 38          	mov    0x38(%r13),%ecx
  21077d:	80 f9 03             	cmp    $0x3,%cl
  210780:	b8 01 00 00 00       	mov    $0x1,%eax
  210785:	0f 45 c1             	cmovne %ecx,%eax
  210788:	84 c0                	test   %al,%al
  21078a:	4c 89 74 24 18       	mov    %r14,0x18(%rsp)
  21078f:	4c 89 64 24 10       	mov    %r12,0x10(%rsp)
  210794:	89 6c 24 2c          	mov    %ebp,0x2c(%rsp)
  210798:	0f 84 e7 00 00 00    	je     210885 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x305>
  21079e:	3c 01                	cmp    $0x1,%al
  2107a0:	0f 85 e6 00 00 00    	jne    21088c <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x30c>
  2107a6:	45 31 e4             	xor    %r12d,%r12d
  2107a9:	e9 f1 00 00 00       	jmpq   21089f <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x31f>
  2107ae:	48 89 6c 24 08       	mov    %rbp,0x8(%rsp)
  2107b3:	31 ed                	xor    %ebp,%ebp
  2107b5:	eb 15                	jmp    2107cc <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x24c>
  2107b7:	48 89 e8             	mov    %rbp,%rax
  2107ba:	48 d1 e8             	shr    %rax
  2107bd:	48 83 c5 01          	add    $0x1,%rbp
  2107c1:	48 d1 ed             	shr    %rbp
  2107c4:	48 89 6c 24 08       	mov    %rbp,0x8(%rsp)
  2107c9:	48 89 c5             	mov    %rax,%rbp
  2107cc:	49 8b 5d 20          	mov    0x20(%r13),%rbx
  2107d0:	4d 8b 65 28          	mov    0x28(%r13),%r12
  2107d4:	45 8b 75 34          	mov    0x34(%r13),%r14d
  2107d8:	48 83 c5 01          	add    $0x1,%rbp
  2107dc:	0f 1f 40 00          	nopl   0x0(%rax)
  2107e0:	48 83 c5 ff          	add    $0xffffffffffffffff,%rbp
  2107e4:	74 14                	je     2107fa <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x27a>
  2107e6:	48 89 df             	mov    %rbx,%rdi
  2107e9:	44 89 f6             	mov    %r14d,%esi
  2107ec:	41 ff 54 24 20       	callq  *0x20(%r12)
  2107f1:	84 c0                	test   %al,%al
  2107f3:	74 eb                	je     2107e0 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x260>
  2107f5:	e9 ed 00 00 00       	jmpq   2108e7 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x367>
  2107fa:	b1 01                	mov    $0x1,%cl
  2107fc:	41 81 fe 00 00 11 00 	cmp    $0x110000,%r14d
  210803:	0f 84 e0 00 00 00    	je     2108e9 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x369>
  210809:	4c 89 ef             	mov    %r13,%rdi
  21080c:	44 89 fe             	mov    %r15d,%esi
  21080f:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  210814:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  210819:	e8 32 01 00 00       	callq  210950 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h63afe22006d50b40E>
  21081e:	84 c0                	test   %al,%al
  210820:	0f 85 c1 00 00 00    	jne    2108e7 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x367>
  210826:	49 8b 7d 20          	mov    0x20(%r13),%rdi
  21082a:	49 8b 45 28          	mov    0x28(%r13),%rax
  21082e:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  210833:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  210838:	ff 50 18             	callq  *0x18(%rax)
  21083b:	84 c0                	test   %al,%al
  21083d:	b1 01                	mov    $0x1,%cl
  21083f:	0f 85 a4 00 00 00    	jne    2108e9 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x369>
  210845:	4d 8b 7d 20          	mov    0x20(%r13),%r15
  210849:	4d 8b 65 28          	mov    0x28(%r13),%r12
  21084d:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
  210852:	4c 89 ed             	mov    %r13,%rbp
  210855:	48 f7 dd             	neg    %rbp
  210858:	48 c7 c3 ff ff ff ff 	mov    $0xffffffffffffffff,%rbx
  21085f:	48 8d 04 2b          	lea    (%rbx,%rbp,1),%rax
  210863:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  210867:	0f 84 d3 00 00 00    	je     210940 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x3c0>
  21086d:	4c 89 ff             	mov    %r15,%rdi
  210870:	44 89 f6             	mov    %r14d,%esi
  210873:	41 ff 54 24 20       	callq  *0x20(%r12)
  210878:	48 83 c3 01          	add    $0x1,%rbx
  21087c:	84 c0                	test   %al,%al
  21087e:	74 df                	je     21085f <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x2df>
  210880:	e9 be 00 00 00       	jmpq   210943 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x3c3>
  210885:	49 89 dc             	mov    %rbx,%r12
  210888:	31 db                	xor    %ebx,%ebx
  21088a:	eb 13                	jmp    21089f <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x31f>
  21088c:	48 89 d8             	mov    %rbx,%rax
  21088f:	48 d1 e8             	shr    %rax
  210892:	48 83 c3 01          	add    $0x1,%rbx
  210896:	48 d1 eb             	shr    %rbx
  210899:	49 89 dc             	mov    %rbx,%r12
  21089c:	48 89 c3             	mov    %rax,%rbx
  21089f:	4d 8b 75 20          	mov    0x20(%r13),%r14
  2108a3:	49 8b 6d 28          	mov    0x28(%r13),%rbp
  2108a7:	45 8b 7d 34          	mov    0x34(%r13),%r15d
  2108ab:	48 83 c3 01          	add    $0x1,%rbx
  2108af:	90                   	nop
  2108b0:	48 83 c3 ff          	add    $0xffffffffffffffff,%rbx
  2108b4:	74 0f                	je     2108c5 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x345>
  2108b6:	4c 89 f7             	mov    %r14,%rdi
  2108b9:	44 89 fe             	mov    %r15d,%esi
  2108bc:	ff 55 20             	callq  *0x20(%rbp)
  2108bf:	84 c0                	test   %al,%al
  2108c1:	74 ed                	je     2108b0 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x330>
  2108c3:	eb 22                	jmp    2108e7 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x367>
  2108c5:	41 81 ff 00 00 11 00 	cmp    $0x110000,%r15d
  2108cc:	74 19                	je     2108e7 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x367>
  2108ce:	49 8b 7d 20          	mov    0x20(%r13),%rdi
  2108d2:	49 8b 45 28          	mov    0x28(%r13),%rax
  2108d6:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  2108db:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  2108e0:	ff 50 18             	callq  *0x18(%rax)
  2108e3:	84 c0                	test   %al,%al
  2108e5:	74 13                	je     2108fa <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x37a>
  2108e7:	b1 01                	mov    $0x1,%cl
  2108e9:	89 c8                	mov    %ecx,%eax
  2108eb:	48 83 c4 38          	add    $0x38,%rsp
  2108ef:	5b                   	pop    %rbx
  2108f0:	41 5c                	pop    %r12
  2108f2:	41 5d                	pop    %r13
  2108f4:	41 5e                	pop    %r14
  2108f6:	41 5f                	pop    %r15
  2108f8:	5d                   	pop    %rbp
  2108f9:	c3                   	retq   
  2108fa:	4d 8b 75 20          	mov    0x20(%r13),%r14
  2108fe:	49 8b 6d 28          	mov    0x28(%r13),%rbp
  210902:	bb 01 00 00 00       	mov    $0x1,%ebx
  210907:	49 8d 04 1c          	lea    (%r12,%rbx,1),%rax
  21090b:	48 83 f8 01          	cmp    $0x1,%rax
  21090f:	74 1b                	je     21092c <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x3ac>
  210911:	4c 89 f7             	mov    %r14,%rdi
  210914:	44 89 fe             	mov    %r15d,%esi
  210917:	ff 55 20             	callq  *0x20(%rbp)
  21091a:	b1 01                	mov    $0x1,%cl
  21091c:	48 83 c3 ff          	add    $0xffffffffffffffff,%rbx
  210920:	84 c0                	test   %al,%al
  210922:	74 e3                	je     210907 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x387>
  210924:	48 f7 db             	neg    %rbx
  210927:	4c 39 e3             	cmp    %r12,%rbx
  21092a:	72 bd                	jb     2108e9 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x369>
  21092c:	8b 44 24 2c          	mov    0x2c(%rsp),%eax
  210930:	41 89 45 34          	mov    %eax,0x34(%r13)
  210934:	8a 44 24 08          	mov    0x8(%rsp),%al
  210938:	41 88 45 38          	mov    %al,0x38(%r13)
  21093c:	31 c9                	xor    %ecx,%ecx
  21093e:	eb a9                	jmp    2108e9 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x369>
  210940:	4c 89 eb             	mov    %r13,%rbx
  210943:	4c 39 eb             	cmp    %r13,%rbx
  210946:	0f 92 c1             	setb   %cl
  210949:	eb 9e                	jmp    2108e9 <_ZN4core3fmt9Formatter12pad_integral17h33ede2279b2a8525E+0x369>
  21094b:	cc                   	int3   
  21094c:	cc                   	int3   
  21094d:	cc                   	int3   
  21094e:	cc                   	int3   
  21094f:	cc                   	int3   

0000000000210950 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h63afe22006d50b40E>:
  210950:	41 57                	push   %r15
  210952:	41 56                	push   %r14
  210954:	53                   	push   %rbx
  210955:	49 89 ce             	mov    %rcx,%r14
  210958:	49 89 d7             	mov    %rdx,%r15
  21095b:	48 89 fb             	mov    %rdi,%rbx
  21095e:	81 fe 00 00 11 00    	cmp    $0x110000,%esi
  210964:	74 13                	je     210979 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h63afe22006d50b40E+0x29>
  210966:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
  21096a:	48 8b 43 28          	mov    0x28(%rbx),%rax
  21096e:	ff 50 20             	callq  *0x20(%rax)
  210971:	89 c1                	mov    %eax,%ecx
  210973:	b0 01                	mov    $0x1,%al
  210975:	84 c9                	test   %cl,%cl
  210977:	75 20                	jne    210999 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h63afe22006d50b40E+0x49>
  210979:	4d 85 ff             	test   %r15,%r15
  21097c:	74 19                	je     210997 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h63afe22006d50b40E+0x47>
  21097e:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
  210982:	48 8b 43 28          	mov    0x28(%rbx),%rax
  210986:	48 8b 40 18          	mov    0x18(%rax),%rax
  21098a:	4c 89 fe             	mov    %r15,%rsi
  21098d:	4c 89 f2             	mov    %r14,%rdx
  210990:	5b                   	pop    %rbx
  210991:	41 5e                	pop    %r14
  210993:	41 5f                	pop    %r15
  210995:	ff e0                	jmpq   *%rax
  210997:	31 c0                	xor    %eax,%eax
  210999:	5b                   	pop    %rbx
  21099a:	41 5e                	pop    %r14
  21099c:	41 5f                	pop    %r15
  21099e:	c3                   	retq   
  21099f:	cc                   	int3   

00000000002109a0 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E>:
  2109a0:	55                   	push   %rbp
  2109a1:	41 57                	push   %r15
  2109a3:	41 56                	push   %r14
  2109a5:	41 55                	push   %r13
  2109a7:	41 54                	push   %r12
  2109a9:	53                   	push   %rbx
  2109aa:	50                   	push   %rax
  2109ab:	49 89 d7             	mov    %rdx,%r15
  2109ae:	49 89 f4             	mov    %rsi,%r12
  2109b1:	4c 8b 07             	mov    (%rdi),%r8
  2109b4:	48 8b 47 10          	mov    0x10(%rdi),%rax
  2109b8:	49 83 f8 01          	cmp    $0x1,%r8
  2109bc:	75 0b                	jne    2109c9 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x29>
  2109be:	48 83 f8 01          	cmp    $0x1,%rax
  2109c2:	74 0f                	je     2109d3 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x33>
  2109c4:	e9 46 01 00 00       	jmpq   210b0f <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x16f>
  2109c9:	48 83 f8 01          	cmp    $0x1,%rax
  2109cd:	0f 85 02 02 00 00    	jne    210bd5 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x235>
  2109d3:	48 8b 6f 18          	mov    0x18(%rdi),%rbp
  2109d7:	4f 8d 0c 3c          	lea    (%r12,%r15,1),%r9
  2109db:	31 c9                	xor    %ecx,%ecx
  2109dd:	48 85 ed             	test   %rbp,%rbp
  2109e0:	0f 84 b1 00 00 00    	je     210a97 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0xf7>
  2109e6:	4c 89 e6             	mov    %r12,%rsi
  2109e9:	eb 44                	jmp    210a2f <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x8f>
  2109eb:	44 0f b6 1a          	movzbl (%rdx),%r11d
  2109ef:	48 83 c2 01          	add    $0x1,%rdx
  2109f3:	41 83 e3 3f          	and    $0x3f,%r11d
  2109f7:	83 e0 07             	and    $0x7,%eax
  2109fa:	c1 e0 12             	shl    $0x12,%eax
  2109fd:	41 c1 e2 0c          	shl    $0xc,%r10d
  210a01:	41 09 c2             	or     %eax,%r10d
  210a04:	c1 e3 06             	shl    $0x6,%ebx
  210a07:	44 09 d3             	or     %r10d,%ebx
  210a0a:	44 09 db             	or     %r11d,%ebx
  210a0d:	81 fb 00 00 11 00    	cmp    $0x110000,%ebx
  210a13:	0f 84 ec 00 00 00    	je     210b05 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x165>
  210a19:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  210a20:	48 29 f1             	sub    %rsi,%rcx
  210a23:	48 01 d1             	add    %rdx,%rcx
  210a26:	48 89 d6             	mov    %rdx,%rsi
  210a29:	48 83 c5 ff          	add    $0xffffffffffffffff,%rbp
  210a2d:	74 6b                	je     210a9a <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0xfa>
  210a2f:	4c 39 ce             	cmp    %r9,%rsi
  210a32:	0f 84 cd 00 00 00    	je     210b05 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x165>
  210a38:	48 8d 56 01          	lea    0x1(%rsi),%rdx
  210a3c:	0f b6 06             	movzbl (%rsi),%eax
  210a3f:	84 c0                	test   %al,%al
  210a41:	79 dd                	jns    210a20 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x80>
  210a43:	4c 39 ca             	cmp    %r9,%rdx
  210a46:	74 13                	je     210a5b <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0xbb>
  210a48:	48 8d 56 02          	lea    0x2(%rsi),%rdx
  210a4c:	44 0f b6 56 01       	movzbl 0x1(%rsi),%r10d
  210a51:	41 83 e2 3f          	and    $0x3f,%r10d
  210a55:	3c e0                	cmp    $0xe0,%al
  210a57:	72 c7                	jb     210a20 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x80>
  210a59:	eb 0a                	jmp    210a65 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0xc5>
  210a5b:	45 31 d2             	xor    %r10d,%r10d
  210a5e:	4c 89 ca             	mov    %r9,%rdx
  210a61:	3c e0                	cmp    $0xe0,%al
  210a63:	72 bb                	jb     210a20 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x80>
  210a65:	4c 39 ca             	cmp    %r9,%rdx
  210a68:	74 10                	je     210a7a <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0xda>
  210a6a:	0f b6 1a             	movzbl (%rdx),%ebx
  210a6d:	48 83 c2 01          	add    $0x1,%rdx
  210a71:	83 e3 3f             	and    $0x3f,%ebx
  210a74:	3c f0                	cmp    $0xf0,%al
  210a76:	72 a8                	jb     210a20 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x80>
  210a78:	eb 09                	jmp    210a83 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0xe3>
  210a7a:	31 db                	xor    %ebx,%ebx
  210a7c:	4c 89 ca             	mov    %r9,%rdx
  210a7f:	3c f0                	cmp    $0xf0,%al
  210a81:	72 9d                	jb     210a20 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x80>
  210a83:	4c 39 ca             	cmp    %r9,%rdx
  210a86:	0f 85 5f ff ff ff    	jne    2109eb <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x4b>
  210a8c:	45 31 db             	xor    %r11d,%r11d
  210a8f:	4c 89 ca             	mov    %r9,%rdx
  210a92:	e9 60 ff ff ff       	jmpq   2109f7 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x57>
  210a97:	4c 89 e2             	mov    %r12,%rdx
  210a9a:	4c 39 ca             	cmp    %r9,%rdx
  210a9d:	74 66                	je     210b05 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x165>
  210a9f:	0f b6 32             	movzbl (%rdx),%esi
  210aa2:	40 84 f6             	test   %sil,%sil
  210aa5:	78 16                	js     210abd <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x11d>
  210aa7:	48 85 c9             	test   %rcx,%rcx
  210aaa:	74 38                	je     210ae4 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x144>
  210aac:	4c 39 f9             	cmp    %r15,%rcx
  210aaf:	73 37                	jae    210ae8 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x148>
  210ab1:	41 80 3c 0c c0       	cmpb   $0xc0,(%r12,%rcx,1)
  210ab6:	7c 40                	jl     210af8 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x158>
  210ab8:	48 89 c8             	mov    %rcx,%rax
  210abb:	eb 33                	jmp    210af0 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x150>
  210abd:	48 8d 42 01          	lea    0x1(%rdx),%rax
  210ac1:	4c 39 c8             	cmp    %r9,%rax
  210ac4:	0f 84 d3 01 00 00    	je     210c9d <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x2fd>
  210aca:	0f b6 42 01          	movzbl 0x1(%rdx),%eax
  210ace:	48 83 c2 02          	add    $0x2,%rdx
  210ad2:	83 e0 3f             	and    $0x3f,%eax
  210ad5:	c1 e0 06             	shl    $0x6,%eax
  210ad8:	40 80 fe e0          	cmp    $0xe0,%sil
  210adc:	0f 83 ca 01 00 00    	jae    210cac <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x30c>
  210ae2:	eb c3                	jmp    210aa7 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x107>
  210ae4:	31 c0                	xor    %eax,%eax
  210ae6:	eb 08                	jmp    210af0 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x150>
  210ae8:	4c 89 f8             	mov    %r15,%rax
  210aeb:	4c 39 f9             	cmp    %r15,%rcx
  210aee:	75 08                	jne    210af8 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x158>
  210af0:	48 89 c1             	mov    %rax,%rcx
  210af3:	4c 89 e0             	mov    %r12,%rax
  210af6:	eb 02                	jmp    210afa <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x15a>
  210af8:	31 c0                	xor    %eax,%eax
  210afa:	48 85 c0             	test   %rax,%rax
  210afd:	4c 0f 45 e0          	cmovne %rax,%r12
  210b01:	4c 0f 45 f9          	cmovne %rcx,%r15
  210b05:	49 83 f8 01          	cmp    $0x1,%r8
  210b09:	0f 85 c6 00 00 00    	jne    210bd5 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x235>
  210b0f:	48 8b 5f 08          	mov    0x8(%rdi),%rbx
  210b13:	4d 85 ff             	test   %r15,%r15
  210b16:	74 17                	je     210b2f <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x18f>
  210b18:	49 8d 4f ff          	lea    -0x1(%r15),%rcx
  210b1c:	44 89 f8             	mov    %r15d,%eax
  210b1f:	83 e0 03             	and    $0x3,%eax
  210b22:	48 83 f9 03          	cmp    $0x3,%rcx
  210b26:	73 0e                	jae    210b36 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x196>
  210b28:	31 c9                	xor    %ecx,%ecx
  210b2a:	4c 89 e2             	mov    %r12,%rdx
  210b2d:	eb 5c                	jmp    210b8b <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x1eb>
  210b2f:	31 c9                	xor    %ecx,%ecx
  210b31:	e9 80 00 00 00       	jmpq   210bb6 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x216>
  210b36:	4c 89 fe             	mov    %r15,%rsi
  210b39:	48 83 e6 fc          	and    $0xfffffffffffffffc,%rsi
  210b3d:	48 f7 de             	neg    %rsi
  210b40:	31 c9                	xor    %ecx,%ecx
  210b42:	4c 89 e2             	mov    %r12,%rdx
  210b45:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  210b4c:	00 00 00 
  210b4f:	90                   	nop
  210b50:	31 ed                	xor    %ebp,%ebp
  210b52:	80 3a c0             	cmpb   $0xc0,(%rdx)
  210b55:	40 0f 9d c5          	setge  %bpl
  210b59:	48 01 cd             	add    %rcx,%rbp
  210b5c:	31 c9                	xor    %ecx,%ecx
  210b5e:	80 7a 01 c0          	cmpb   $0xc0,0x1(%rdx)
  210b62:	0f 9d c1             	setge  %cl
  210b65:	48 01 e9             	add    %rbp,%rcx
  210b68:	31 ed                	xor    %ebp,%ebp
  210b6a:	80 7a 02 c0          	cmpb   $0xc0,0x2(%rdx)
  210b6e:	40 0f 9d c5          	setge  %bpl
  210b72:	48 01 cd             	add    %rcx,%rbp
  210b75:	31 c9                	xor    %ecx,%ecx
  210b77:	80 7a 03 c0          	cmpb   $0xc0,0x3(%rdx)
  210b7b:	48 8d 52 04          	lea    0x4(%rdx),%rdx
  210b7f:	0f 9d c1             	setge  %cl
  210b82:	48 01 e9             	add    %rbp,%rcx
  210b85:	48 83 c6 04          	add    $0x4,%rsi
  210b89:	75 c5                	jne    210b50 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x1b0>
  210b8b:	48 85 c0             	test   %rax,%rax
  210b8e:	74 26                	je     210bb6 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x216>
  210b90:	31 f6                	xor    %esi,%esi
  210b92:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  210b99:	00 00 00 
  210b9c:	0f 1f 40 00          	nopl   0x0(%rax)
  210ba0:	31 ed                	xor    %ebp,%ebp
  210ba2:	80 3c 32 c0          	cmpb   $0xc0,(%rdx,%rsi,1)
  210ba6:	40 0f 9d c5          	setge  %bpl
  210baa:	48 01 e9             	add    %rbp,%rcx
  210bad:	48 83 c6 01          	add    $0x1,%rsi
  210bb1:	48 39 f0             	cmp    %rsi,%rax
  210bb4:	75 ea                	jne    210ba0 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x200>
  210bb6:	48 29 cb             	sub    %rcx,%rbx
  210bb9:	76 1a                	jbe    210bd5 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x235>
  210bbb:	8b 47 38             	mov    0x38(%rdi),%eax
  210bbe:	31 c9                	xor    %ecx,%ecx
  210bc0:	3c 03                	cmp    $0x3,%al
  210bc2:	0f 44 c1             	cmove  %ecx,%eax
  210bc5:	84 c0                	test   %al,%al
  210bc7:	74 31                	je     210bfa <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x25a>
  210bc9:	3c 01                	cmp    $0x1,%al
  210bcb:	75 35                	jne    210c02 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x262>
  210bcd:	31 c0                	xor    %eax,%eax
  210bcf:	48 89 04 24          	mov    %rax,(%rsp)
  210bd3:	eb 41                	jmp    210c16 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x276>
  210bd5:	48 8b 47 20          	mov    0x20(%rdi),%rax
  210bd9:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
  210bdd:	48 8b 49 18          	mov    0x18(%rcx),%rcx
  210be1:	48 89 c7             	mov    %rax,%rdi
  210be4:	4c 89 e6             	mov    %r12,%rsi
  210be7:	4c 89 fa             	mov    %r15,%rdx
  210bea:	48 83 c4 08          	add    $0x8,%rsp
  210bee:	5b                   	pop    %rbx
  210bef:	41 5c                	pop    %r12
  210bf1:	41 5d                	pop    %r13
  210bf3:	41 5e                	pop    %r14
  210bf5:	41 5f                	pop    %r15
  210bf7:	5d                   	pop    %rbp
  210bf8:	ff e1                	jmpq   *%rcx
  210bfa:	48 89 1c 24          	mov    %rbx,(%rsp)
  210bfe:	31 db                	xor    %ebx,%ebx
  210c00:	eb 14                	jmp    210c16 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x276>
  210c02:	48 89 d8             	mov    %rbx,%rax
  210c05:	48 d1 e8             	shr    %rax
  210c08:	48 83 c3 01          	add    $0x1,%rbx
  210c0c:	48 d1 eb             	shr    %rbx
  210c0f:	48 89 1c 24          	mov    %rbx,(%rsp)
  210c13:	48 89 c3             	mov    %rax,%rbx
  210c16:	4c 8b 6f 20          	mov    0x20(%rdi),%r13
  210c1a:	4c 8b 77 28          	mov    0x28(%rdi),%r14
  210c1e:	8b 6f 34             	mov    0x34(%rdi),%ebp
  210c21:	48 83 c3 01          	add    $0x1,%rbx
  210c25:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  210c2c:	00 00 00 
  210c2f:	90                   	nop
  210c30:	48 83 c3 ff          	add    $0xffffffffffffffff,%rbx
  210c34:	74 15                	je     210c4b <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x2ab>
  210c36:	4c 89 ef             	mov    %r13,%rdi
  210c39:	89 ee                	mov    %ebp,%esi
  210c3b:	41 ff 56 20          	callq  *0x20(%r14)
  210c3f:	84 c0                	test   %al,%al
  210c41:	74 ed                	je     210c30 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x290>
  210c43:	41 b4 01             	mov    $0x1,%r12b
  210c46:	e9 85 00 00 00       	jmpq   210cd0 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x330>
  210c4b:	4c 89 e6             	mov    %r12,%rsi
  210c4e:	41 b4 01             	mov    $0x1,%r12b
  210c51:	81 fd 00 00 11 00    	cmp    $0x110000,%ebp
  210c57:	74 77                	je     210cd0 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x330>
  210c59:	4c 89 ef             	mov    %r13,%rdi
  210c5c:	4c 89 fa             	mov    %r15,%rdx
  210c5f:	41 ff 56 18          	callq  *0x18(%r14)
  210c63:	84 c0                	test   %al,%al
  210c65:	75 69                	jne    210cd0 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x330>
  210c67:	4c 8b 24 24          	mov    (%rsp),%r12
  210c6b:	4d 89 e7             	mov    %r12,%r15
  210c6e:	49 f7 df             	neg    %r15
  210c71:	48 c7 c3 ff ff ff ff 	mov    $0xffffffffffffffff,%rbx
  210c78:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  210c7f:	00 
  210c80:	49 8d 04 1f          	lea    (%r15,%rbx,1),%rax
  210c84:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  210c88:	74 3c                	je     210cc6 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x326>
  210c8a:	4c 89 ef             	mov    %r13,%rdi
  210c8d:	89 ee                	mov    %ebp,%esi
  210c8f:	41 ff 56 20          	callq  *0x20(%r14)
  210c93:	48 83 c3 01          	add    $0x1,%rbx
  210c97:	84 c0                	test   %al,%al
  210c99:	74 e5                	je     210c80 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x2e0>
  210c9b:	eb 2c                	jmp    210cc9 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x329>
  210c9d:	31 c0                	xor    %eax,%eax
  210c9f:	4c 89 ca             	mov    %r9,%rdx
  210ca2:	40 80 fe e0          	cmp    $0xe0,%sil
  210ca6:	0f 82 fb fd ff ff    	jb     210aa7 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x107>
  210cac:	4c 39 ca             	cmp    %r9,%rdx
  210caf:	74 31                	je     210ce2 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x342>
  210cb1:	0f b6 2a             	movzbl (%rdx),%ebp
  210cb4:	48 83 c2 01          	add    $0x1,%rdx
  210cb8:	83 e5 3f             	and    $0x3f,%ebp
  210cbb:	40 80 fe f0          	cmp    $0xf0,%sil
  210cbf:	73 30                	jae    210cf1 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x351>
  210cc1:	e9 e1 fd ff ff       	jmpq   210aa7 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x107>
  210cc6:	4c 89 e3             	mov    %r12,%rbx
  210cc9:	4c 39 e3             	cmp    %r12,%rbx
  210ccc:	41 0f 92 c4          	setb   %r12b
  210cd0:	44 89 e0             	mov    %r12d,%eax
  210cd3:	48 83 c4 08          	add    $0x8,%rsp
  210cd7:	5b                   	pop    %rbx
  210cd8:	41 5c                	pop    %r12
  210cda:	41 5d                	pop    %r13
  210cdc:	41 5e                	pop    %r14
  210cde:	41 5f                	pop    %r15
  210ce0:	5d                   	pop    %rbp
  210ce1:	c3                   	retq   
  210ce2:	31 ed                	xor    %ebp,%ebp
  210ce4:	4c 89 ca             	mov    %r9,%rdx
  210ce7:	40 80 fe f0          	cmp    $0xf0,%sil
  210ceb:	0f 82 b6 fd ff ff    	jb     210aa7 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x107>
  210cf1:	09 c5                	or     %eax,%ebp
  210cf3:	4c 39 ca             	cmp    %r9,%rdx
  210cf6:	74 08                	je     210d00 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x360>
  210cf8:	0f b6 02             	movzbl (%rdx),%eax
  210cfb:	83 e0 3f             	and    $0x3f,%eax
  210cfe:	eb 02                	jmp    210d02 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x362>
  210d00:	31 c0                	xor    %eax,%eax
  210d02:	83 e6 07             	and    $0x7,%esi
  210d05:	c1 e6 12             	shl    $0x12,%esi
  210d08:	c1 e5 06             	shl    $0x6,%ebp
  210d0b:	09 f5                	or     %esi,%ebp
  210d0d:	09 c5                	or     %eax,%ebp
  210d0f:	81 fd 00 00 11 00    	cmp    $0x110000,%ebp
  210d15:	0f 84 ea fd ff ff    	je     210b05 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x165>
  210d1b:	e9 87 fd ff ff       	jmpq   210aa7 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E+0x107>

0000000000210d20 <_ZN4core3fmt9Formatter9write_str17hd3d48cb470cebc87E>:
  210d20:	48 8b 47 20          	mov    0x20(%rdi),%rax
  210d24:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
  210d28:	48 8b 49 18          	mov    0x18(%rcx),%rcx
  210d2c:	48 89 c7             	mov    %rax,%rdi
  210d2f:	ff e1                	jmpq   *%rcx
  210d31:	cc                   	int3   
  210d32:	cc                   	int3   
  210d33:	cc                   	int3   
  210d34:	cc                   	int3   
  210d35:	cc                   	int3   
  210d36:	cc                   	int3   
  210d37:	cc                   	int3   
  210d38:	cc                   	int3   
  210d39:	cc                   	int3   
  210d3a:	cc                   	int3   
  210d3b:	cc                   	int3   
  210d3c:	cc                   	int3   
  210d3d:	cc                   	int3   
  210d3e:	cc                   	int3   
  210d3f:	cc                   	int3   

0000000000210d40 <_ZN4core3fmt9Formatter15debug_lower_hex17hb64b59229092e7f9E>:
  210d40:	8a 47 30             	mov    0x30(%rdi),%al
  210d43:	24 10                	and    $0x10,%al
  210d45:	c0 e8 04             	shr    $0x4,%al
  210d48:	c3                   	retq   
  210d49:	cc                   	int3   
  210d4a:	cc                   	int3   
  210d4b:	cc                   	int3   
  210d4c:	cc                   	int3   
  210d4d:	cc                   	int3   
  210d4e:	cc                   	int3   
  210d4f:	cc                   	int3   

0000000000210d50 <_ZN4core3fmt9Formatter15debug_upper_hex17h1791008eaa6156e8E>:
  210d50:	8a 47 30             	mov    0x30(%rdi),%al
  210d53:	24 20                	and    $0x20,%al
  210d55:	c0 e8 05             	shr    $0x5,%al
  210d58:	c3                   	retq   
  210d59:	cc                   	int3   
  210d5a:	cc                   	int3   
  210d5b:	cc                   	int3   
  210d5c:	cc                   	int3   
  210d5d:	cc                   	int3   
  210d5e:	cc                   	int3   
  210d5f:	cc                   	int3   

0000000000210d60 <_ZN4core3fmt9Formatter12debug_struct17h5d99847e6c2ca81bE>:
  210d60:	53                   	push   %rbx
  210d61:	48 89 fb             	mov    %rdi,%rbx
  210d64:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
  210d68:	48 8b 43 28          	mov    0x28(%rbx),%rax
  210d6c:	ff 50 18             	callq  *0x18(%rax)
  210d6f:	0f b6 d0             	movzbl %al,%edx
  210d72:	48 89 d8             	mov    %rbx,%rax
  210d75:	5b                   	pop    %rbx
  210d76:	c3                   	retq   
  210d77:	cc                   	int3   
  210d78:	cc                   	int3   
  210d79:	cc                   	int3   
  210d7a:	cc                   	int3   
  210d7b:	cc                   	int3   
  210d7c:	cc                   	int3   
  210d7d:	cc                   	int3   
  210d7e:	cc                   	int3   
  210d7f:	cc                   	int3   

0000000000210d80 <_ZN4core3fmt9Formatter11debug_tuple17hfe2def895ca5eae3E>:
  210d80:	41 57                	push   %r15
  210d82:	41 56                	push   %r14
  210d84:	53                   	push   %rbx
  210d85:	49 89 ce             	mov    %rcx,%r14
  210d88:	49 89 f7             	mov    %rsi,%r15
  210d8b:	48 89 fb             	mov    %rdi,%rbx
  210d8e:	48 8b 7e 20          	mov    0x20(%rsi),%rdi
  210d92:	48 8b 46 28          	mov    0x28(%rsi),%rax
  210d96:	48 89 d6             	mov    %rdx,%rsi
  210d99:	48 89 ca             	mov    %rcx,%rdx
  210d9c:	ff 50 18             	callq  *0x18(%rax)
  210d9f:	4d 85 f6             	test   %r14,%r14
  210da2:	4c 89 3b             	mov    %r15,(%rbx)
  210da5:	88 43 10             	mov    %al,0x10(%rbx)
  210da8:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
  210daf:	00 
  210db0:	0f 94 43 11          	sete   0x11(%rbx)
  210db4:	48 89 d8             	mov    %rbx,%rax
  210db7:	5b                   	pop    %rbx
  210db8:	41 5e                	pop    %r14
  210dba:	41 5f                	pop    %r15
  210dbc:	c3                   	retq   
  210dbd:	cc                   	int3   
  210dbe:	cc                   	int3   
  210dbf:	cc                   	int3   

0000000000210dc0 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E>:
  210dc0:	55                   	push   %rbp
  210dc1:	41 57                	push   %r15
  210dc3:	41 56                	push   %r14
  210dc5:	41 55                	push   %r13
  210dc7:	41 54                	push   %r12
  210dc9:	53                   	push   %rbx
  210dca:	48 83 ec 58          	sub    $0x58,%rsp
  210dce:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  210dd3:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  210dd8:	48 8b 5a 20          	mov    0x20(%rdx),%rbx
  210ddc:	48 8b 42 28          	mov    0x28(%rdx),%rax
  210de0:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  210de5:	48 8b 40 20          	mov    0x20(%rax),%rax
  210de9:	48 89 df             	mov    %rbx,%rdi
  210dec:	be 22 00 00 00       	mov    $0x22,%esi
  210df1:	49 89 c7             	mov    %rax,%r15
  210df4:	ff d0                	callq  *%rax
  210df6:	84 c0                	test   %al,%al
  210df8:	74 11                	je     210e0b <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x4b>
  210dfa:	b0 01                	mov    $0x1,%al
  210dfc:	48 83 c4 58          	add    $0x58,%rsp
  210e00:	5b                   	pop    %rbx
  210e01:	41 5c                	pop    %r12
  210e03:	41 5d                	pop    %r13
  210e05:	41 5e                	pop    %r14
  210e07:	41 5f                	pop    %r15
  210e09:	5d                   	pop    %rbp
  210e0a:	c3                   	retq   
  210e0b:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
  210e10:	4d 85 c9             	test   %r9,%r9
  210e13:	0f 84 e4 04 00 00    	je     2112fd <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x53d>
  210e19:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  210e1e:	4a 8d 34 08          	lea    (%rax,%r9,1),%rsi
  210e22:	45 31 d2             	xor    %r10d,%r10d
  210e25:	4c 8d 35 b0 13 ff ff 	lea    -0xec50(%rip),%r14        # 2021dc <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x6b>
  210e2c:	48 8d 15 41 13 ff ff 	lea    -0xecbf(%rip),%rdx        # 202174 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x3>
  210e33:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  210e38:	49 89 c4             	mov    %rax,%r12
  210e3b:	31 c9                	xor    %ecx,%ecx
  210e3d:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  210e42:	49 8d 44 24 01       	lea    0x1(%r12),%rax
  210e47:	41 0f b6 3c 24       	movzbl (%r12),%edi
  210e4c:	40 84 ff             	test   %dil,%dil
  210e4f:	78 08                	js     210e59 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x99>
  210e51:	49 89 c4             	mov    %rax,%r12
  210e54:	e9 a7 00 00 00       	jmpq   210f00 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x140>
  210e59:	48 39 f0             	cmp    %rsi,%rax
  210e5c:	74 49                	je     210ea7 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0xe7>
  210e5e:	41 0f b6 44 24 01    	movzbl 0x1(%r12),%eax
  210e64:	49 83 c4 02          	add    $0x2,%r12
  210e68:	83 e0 3f             	and    $0x3f,%eax
  210e6b:	89 fd                	mov    %edi,%ebp
  210e6d:	83 e5 1f             	and    $0x1f,%ebp
  210e70:	40 80 ff df          	cmp    $0xdf,%dil
  210e74:	76 41                	jbe    210eb7 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0xf7>
  210e76:	49 39 f4             	cmp    %rsi,%r12
  210e79:	74 41                	je     210ebc <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0xfc>
  210e7b:	45 0f b6 04 24       	movzbl (%r12),%r8d
  210e80:	49 83 c4 01          	add    $0x1,%r12
  210e84:	41 83 e0 3f          	and    $0x3f,%r8d
  210e88:	c1 e0 06             	shl    $0x6,%eax
  210e8b:	44 09 c0             	or     %r8d,%eax
  210e8e:	40 80 ff f0          	cmp    $0xf0,%dil
  210e92:	72 3a                	jb     210ece <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x10e>
  210e94:	49 39 f4             	cmp    %rsi,%r12
  210e97:	74 3e                	je     210ed7 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x117>
  210e99:	41 0f b6 3c 24       	movzbl (%r12),%edi
  210e9e:	49 83 c4 01          	add    $0x1,%r12
  210ea2:	83 e7 3f             	and    $0x3f,%edi
  210ea5:	eb 35                	jmp    210edc <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x11c>
  210ea7:	31 c0                	xor    %eax,%eax
  210ea9:	49 89 f4             	mov    %rsi,%r12
  210eac:	89 fd                	mov    %edi,%ebp
  210eae:	83 e5 1f             	and    $0x1f,%ebp
  210eb1:	40 80 ff df          	cmp    $0xdf,%dil
  210eb5:	77 bf                	ja     210e76 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0xb6>
  210eb7:	c1 e5 06             	shl    $0x6,%ebp
  210eba:	eb 15                	jmp    210ed1 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x111>
  210ebc:	45 31 c0             	xor    %r8d,%r8d
  210ebf:	49 89 f4             	mov    %rsi,%r12
  210ec2:	c1 e0 06             	shl    $0x6,%eax
  210ec5:	44 09 c0             	or     %r8d,%eax
  210ec8:	40 80 ff f0          	cmp    $0xf0,%dil
  210ecc:	73 c6                	jae    210e94 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0xd4>
  210ece:	c1 e5 0c             	shl    $0xc,%ebp
  210ed1:	09 e8                	or     %ebp,%eax
  210ed3:	89 c7                	mov    %eax,%edi
  210ed5:	eb 29                	jmp    210f00 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x140>
  210ed7:	31 ff                	xor    %edi,%edi
  210ed9:	49 89 f4             	mov    %rsi,%r12
  210edc:	83 e5 07             	and    $0x7,%ebp
  210edf:	c1 e5 12             	shl    $0x12,%ebp
  210ee2:	c1 e0 06             	shl    $0x6,%eax
  210ee5:	09 e8                	or     %ebp,%eax
  210ee7:	09 f8                	or     %edi,%eax
  210ee9:	89 c7                	mov    %eax,%edi
  210eeb:	3d 00 00 11 00       	cmp    $0x110000,%eax
  210ef0:	0f 84 ec 03 00 00    	je     2112e2 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x522>
  210ef6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  210efd:	00 00 00 
  210f00:	bd 02 00 00 00       	mov    $0x2,%ebp
  210f05:	8d 47 f7             	lea    -0x9(%rdi),%eax
  210f08:	83 f8 19             	cmp    $0x19,%eax
  210f0b:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  210f10:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  210f15:	4c 89 64 24 48       	mov    %r12,0x48(%rsp)
  210f1a:	77 1e                	ja     210f3a <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x17a>
  210f1c:	c7 44 24 0c 74 00 00 	movl   $0x74,0xc(%rsp)
  210f23:	00 
  210f24:	48 63 04 82          	movslq (%rdx,%rax,4),%rax
  210f28:	48 01 d0             	add    %rdx,%rax
  210f2b:	ff e0                	jmpq   *%rax
  210f2d:	c7 44 24 0c 6e 00 00 	movl   $0x6e,0xc(%rsp)
  210f34:	00 
  210f35:	e9 86 01 00 00       	jmpq   2110c0 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x300>
  210f3a:	83 ff 5c             	cmp    $0x5c,%edi
  210f3d:	75 0b                	jne    210f4a <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x18a>
  210f3f:	89 f8                	mov    %edi,%eax
  210f41:	89 7c 24 0c          	mov    %edi,0xc(%rsp)
  210f45:	e9 76 01 00 00       	jmpq   2110c0 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x300>
  210f4a:	4c 89 54 24 30       	mov    %r10,0x30(%rsp)
  210f4f:	e8 ec dd ff ff       	callq  20ed40 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E>
  210f54:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  210f59:	84 c0                	test   %al,%al
  210f5b:	4c 8b 64 24 48       	mov    0x48(%rsp),%r12
  210f60:	0f 85 19 01 00 00    	jne    21107f <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  210f66:	81 ff 00 00 01 00    	cmp    $0x10000,%edi
  210f6c:	73 4c                	jae    210fba <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x1fa>
  210f6e:	48 c7 04 24 2f 01 00 	movq   $0x12f,(%rsp)
  210f75:	00 
  210f76:	ba 28 00 00 00       	mov    $0x28,%edx
  210f7b:	41 b8 20 01 00 00    	mov    $0x120,%r8d
  210f81:	48 8d 35 79 0b ff ff 	lea    -0xf487(%rip),%rsi        # 201b01 <anon.2ed67ef31f4689dedcb1c0a297117e92.14.llvm.10168945396431757462>
  210f88:	48 8d 0d c2 0b ff ff 	lea    -0xf43e(%rip),%rcx        # 201b51 <anon.2ed67ef31f4689dedcb1c0a297117e92.15.llvm.10168945396431757462>
  210f8f:	4c 8d 0d db 0c ff ff 	lea    -0xf325(%rip),%r9        # 201c71 <anon.2ed67ef31f4689dedcb1c0a297117e92.16.llvm.10168945396431757462>
  210f96:	e8 65 e9 ff ff       	callq  20f900 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462>
  210f9b:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  210fa0:	84 c0                	test   %al,%al
  210fa2:	0f 84 d7 00 00 00    	je     21107f <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  210fa8:	e9 ad 00 00 00       	jmpq   21105a <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x29a>
  210fad:	c7 44 24 0c 72 00 00 	movl   $0x72,0xc(%rsp)
  210fb4:	00 
  210fb5:	e9 06 01 00 00       	jmpq   2110c0 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x300>
  210fba:	81 ff 00 00 02 00    	cmp    $0x20000,%edi
  210fc0:	73 3b                	jae    210ffd <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x23d>
  210fc2:	48 c7 04 24 b6 01 00 	movq   $0x1b6,(%rsp)
  210fc9:	00 
  210fca:	ba 2a 00 00 00       	mov    $0x2a,%edx
  210fcf:	41 b8 c0 00 00 00    	mov    $0xc0,%r8d
  210fd5:	48 8d 35 c4 0d ff ff 	lea    -0xf23c(%rip),%rsi        # 201da0 <anon.2ed67ef31f4689dedcb1c0a297117e92.17.llvm.10168945396431757462>
  210fdc:	48 8d 0d 11 0e ff ff 	lea    -0xf1ef(%rip),%rcx        # 201df4 <anon.2ed67ef31f4689dedcb1c0a297117e92.18.llvm.10168945396431757462>
  210fe3:	4c 8d 0d ca 0e ff ff 	lea    -0xf136(%rip),%r9        # 201eb4 <anon.2ed67ef31f4689dedcb1c0a297117e92.19.llvm.10168945396431757462>
  210fea:	e8 11 e9 ff ff       	callq  20f900 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462>
  210fef:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  210ff4:	84 c0                	test   %al,%al
  210ff6:	75 62                	jne    21105a <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x29a>
  210ff8:	e9 82 00 00 00       	jmpq   21107f <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  210ffd:	89 f8                	mov    %edi,%eax
  210fff:	83 e0 e0             	and    $0xffffffe0,%eax
  211002:	3d e0 a6 02 00       	cmp    $0x2a6e0,%eax
  211007:	74 76                	je     21107f <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  211009:	8d 87 c7 48 fd ff    	lea    -0x2b739(%rdi),%eax
  21100f:	83 f8 07             	cmp    $0x7,%eax
  211012:	72 6b                	jb     21107f <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  211014:	89 f8                	mov    %edi,%eax
  211016:	83 e0 fe             	and    $0xfffffffe,%eax
  211019:	3d 1e b8 02 00       	cmp    $0x2b81e,%eax
  21101e:	74 5f                	je     21107f <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  211020:	8d 87 5e 31 fd ff    	lea    -0x2cea2(%rdi),%eax
  211026:	83 f8 0e             	cmp    $0xe,%eax
  211029:	72 54                	jb     21107f <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  21102b:	8d 87 1f 14 fd ff    	lea    -0x2ebe1(%rdi),%eax
  211031:	3d 1f 0c 00 00       	cmp    $0xc1f,%eax
  211036:	72 47                	jb     21107f <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  211038:	8d 87 e2 05 fd ff    	lea    -0x2fa1e(%rdi),%eax
  21103e:	3d e2 05 00 00       	cmp    $0x5e2,%eax
  211043:	72 3a                	jb     21107f <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  211045:	8d 87 b5 ec fc ff    	lea    -0x3134b(%rdi),%eax
  21104b:	3d b5 ed 0a 00       	cmp    $0xaedb5,%eax
  211050:	72 2d                	jb     21107f <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  211052:	81 ff f0 01 0e 00    	cmp    $0xe01f0,%edi
  211058:	73 25                	jae    21107f <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x2bf>
  21105a:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
  21105f:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  211064:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  211069:	48 8d 15 04 11 ff ff 	lea    -0xeefc(%rip),%rdx        # 202174 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x3>
  211070:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  211075:	4c 8b 54 24 30       	mov    0x30(%rsp),%r10
  21107a:	e9 4f 02 00 00       	jmpq   2112ce <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x50e>
  21107f:	89 f8                	mov    %edi,%eax
  211081:	83 c8 01             	or     $0x1,%eax
  211084:	44 0f bd e0          	bsr    %eax,%r12d
  211088:	41 83 f4 1c          	xor    $0x1c,%r12d
  21108c:	41 c1 ec 02          	shr    $0x2,%r12d
  211090:	41 83 f4 07          	xor    $0x7,%r12d
  211094:	41 89 fd             	mov    %edi,%r13d
  211097:	48 b8 00 00 00 00 05 	movabs $0x500000000,%rax
  21109e:	00 00 00 
  2110a1:	49 09 c5             	or     %rax,%r13
  2110a4:	bd 03 00 00 00       	mov    $0x3,%ebp
  2110a9:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
  2110ae:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  2110b3:	4c 8b 54 24 30       	mov    0x30(%rsp),%r10
  2110b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  2110bf:	00 
  2110c0:	48 89 ca             	mov    %rcx,%rdx
  2110c3:	4c 29 d2             	sub    %r10,%rdx
  2110c6:	0f 82 90 02 00 00    	jb     21135c <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x59c>
  2110cc:	4d 85 d2             	test   %r10,%r10
  2110cf:	74 1c                	je     2110ed <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x32d>
  2110d1:	4d 39 ca             	cmp    %r9,%r10
  2110d4:	73 11                	jae    2110e7 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x327>
  2110d6:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2110db:	42 80 3c 10 c0       	cmpb   $0xc0,(%rax,%r10,1)
  2110e0:	7d 0b                	jge    2110ed <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x32d>
  2110e2:	e9 75 02 00 00       	jmpq   21135c <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x59c>
  2110e7:	0f 85 6f 02 00 00    	jne    21135c <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x59c>
  2110ed:	48 85 c9             	test   %rcx,%rcx
  2110f0:	74 1b                	je     21110d <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x34d>
  2110f2:	4c 39 c9             	cmp    %r9,%rcx
  2110f5:	73 10                	jae    211107 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x347>
  2110f7:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2110fc:	80 3c 08 bf          	cmpb   $0xbf,(%rax,%rcx,1)
  211100:	7f 0b                	jg     21110d <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x34d>
  211102:	e9 55 02 00 00       	jmpq   21135c <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x59c>
  211107:	0f 85 4f 02 00 00    	jne    21135c <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x59c>
  21110d:	4c 03 54 24 10       	add    0x10(%rsp),%r10
  211112:	48 89 df             	mov    %rbx,%rdi
  211115:	4c 89 d6             	mov    %r10,%rsi
  211118:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  21111d:	ff 50 18             	callq  *0x18(%rax)
  211120:	eb 1a                	jmp    21113c <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x37c>
  211122:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  211129:	00 00 00 
  21112c:	0f 1f 40 00          	nopl   0x0(%rax)
  211130:	31 ed                	xor    %ebp,%ebp
  211132:	8b 74 24 0c          	mov    0xc(%rsp),%esi
  211136:	48 89 df             	mov    %rbx,%rdi
  211139:	41 ff d7             	callq  *%r15
  21113c:	84 c0                	test   %al,%al
  21113e:	0f 85 b6 fc ff ff    	jne    210dfa <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x3a>
  211144:	be 5c 00 00 00       	mov    $0x5c,%esi
  211149:	89 e8                	mov    %ebp,%eax
  21114b:	49 63 04 86          	movslq (%r14,%rax,4),%rax
  21114f:	4c 01 f0             	add    %r14,%rax
  211152:	bd 01 00 00 00       	mov    $0x1,%ebp
  211157:	ff e0                	jmpq   *%rax
  211159:	4c 89 e8             	mov    %r13,%rax
  21115c:	48 c1 e8 20          	shr    $0x20,%rax
  211160:	0f b6 c0             	movzbl %al,%eax
  211163:	48 8d 0d 82 10 ff ff 	lea    -0xef7e(%rip),%rcx        # 2021ec <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x7b>
  21116a:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  21116e:	48 01 c8             	add    %rcx,%rax
  211171:	ff e0                	jmpq   *%rax
  211173:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  21117a:	49 21 c4             	and    %rax,%r12
  21117d:	48 b8 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rax
  211184:	ff ff ff 
  211187:	49 21 c5             	and    %rax,%r13
  21118a:	bd 03 00 00 00       	mov    $0x3,%ebp
  21118f:	be 7d 00 00 00       	mov    $0x7d,%esi
  211194:	eb a0                	jmp    211136 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x376>
  211196:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  21119d:	49 21 c4             	and    %rax,%r12
  2111a0:	48 b8 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rax
  2111a7:	ff ff ff 
  2111aa:	49 21 c5             	and    %rax,%r13
  2111ad:	48 b8 00 00 00 00 03 	movabs $0x300000000,%rax
  2111b4:	00 00 00 
  2111b7:	49 09 c5             	or     %rax,%r13
  2111ba:	bd 03 00 00 00       	mov    $0x3,%ebp
  2111bf:	be 75 00 00 00       	mov    $0x75,%esi
  2111c4:	e9 6d ff ff ff       	jmpq   211136 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x376>
  2111c9:	42 8d 0c a5 00 00 00 	lea    0x0(,%r12,4),%ecx
  2111d0:	00 
  2111d1:	44 89 e8             	mov    %r13d,%eax
  2111d4:	d3 e8                	shr    %cl,%eax
  2111d6:	83 e0 0f             	and    $0xf,%eax
  2111d9:	8d 48 57             	lea    0x57(%rax),%ecx
  2111dc:	89 c6                	mov    %eax,%esi
  2111de:	83 ce 30             	or     $0x30,%esi
  2111e1:	3c 0a                	cmp    $0xa,%al
  2111e3:	0f 43 f1             	cmovae %ecx,%esi
  2111e6:	4d 85 e4             	test   %r12,%r12
  2111e9:	74 64                	je     21124f <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x48f>
  2111eb:	49 83 c4 ff          	add    $0xffffffffffffffff,%r12
  2111ef:	bd 03 00 00 00       	mov    $0x3,%ebp
  2111f4:	e9 3d ff ff ff       	jmpq   211136 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x376>
  2111f9:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  211200:	49 21 c4             	and    %rax,%r12
  211203:	48 b8 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rax
  21120a:	ff ff ff 
  21120d:	49 21 c5             	and    %rax,%r13
  211210:	48 b8 00 00 00 00 02 	movabs $0x200000000,%rax
  211217:	00 00 00 
  21121a:	49 09 c5             	or     %rax,%r13
  21121d:	bd 03 00 00 00       	mov    $0x3,%ebp
  211222:	be 7b 00 00 00       	mov    $0x7b,%esi
  211227:	e9 0a ff ff ff       	jmpq   211136 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x376>
  21122c:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  211233:	49 21 c4             	and    %rax,%r12
  211236:	48 b8 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rax
  21123d:	ff ff ff 
  211240:	49 21 c5             	and    %rax,%r13
  211243:	48 b8 00 00 00 00 04 	movabs $0x400000000,%rax
  21124a:	00 00 00 
  21124d:	eb 21                	jmp    211270 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x4b0>
  21124f:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  211256:	49 21 c4             	and    %rax,%r12
  211259:	48 b8 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rax
  211260:	ff ff ff 
  211263:	49 21 c5             	and    %rax,%r13
  211266:	48 b8 00 00 00 00 01 	movabs $0x100000000,%rax
  21126d:	00 00 00 
  211270:	49 09 c5             	or     %rax,%r13
  211273:	bd 03 00 00 00       	mov    $0x3,%ebp
  211278:	e9 b9 fe ff ff       	jmpq   211136 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x376>
  21127d:	41 ba 01 00 00 00    	mov    $0x1,%r10d
  211283:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  211288:	3d 80 00 00 00       	cmp    $0x80,%eax
  21128d:	72 1c                	jb     2112ab <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x4eb>
  21128f:	41 ba 02 00 00 00    	mov    $0x2,%r10d
  211295:	3d 00 08 00 00       	cmp    $0x800,%eax
  21129a:	72 0f                	jb     2112ab <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x4eb>
  21129c:	3d 00 00 01 00       	cmp    $0x10000,%eax
  2112a1:	41 ba 04 00 00 00    	mov    $0x4,%r10d
  2112a7:	49 83 da 00          	sbb    $0x0,%r10
  2112ab:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  2112b0:	49 01 ca             	add    %rcx,%r10
  2112b3:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
  2112b8:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  2112bd:	48 8d 15 b0 0e ff ff 	lea    -0xf150(%rip),%rdx        # 202174 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x3>
  2112c4:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  2112c9:	4c 8b 64 24 48       	mov    0x48(%rsp),%r12
  2112ce:	48 29 c1             	sub    %rax,%rcx
  2112d1:	4c 01 e1             	add    %r12,%rcx
  2112d4:	4c 89 64 24 20       	mov    %r12,0x20(%rsp)
  2112d9:	49 39 f4             	cmp    %rsi,%r12
  2112dc:	0f 85 60 fb ff ff    	jne    210e42 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x82>
  2112e2:	4d 85 d2             	test   %r10,%r10
  2112e5:	74 16                	je     2112fd <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x53d>
  2112e7:	4d 39 ca             	cmp    %r9,%r10
  2112ea:	73 4f                	jae    21133b <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x57b>
  2112ec:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  2112f1:	42 80 3c 10 bf       	cmpb   $0xbf,(%rax,%r10,1)
  2112f6:	7e 48                	jle    211340 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x580>
  2112f8:	4c 89 d0             	mov    %r10,%rax
  2112fb:	eb 02                	jmp    2112ff <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x53f>
  2112fd:	31 c0                	xor    %eax,%eax
  2112ff:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  211304:	48 01 c6             	add    %rax,%rsi
  211307:	49 29 c1             	sub    %rax,%r9
  21130a:	48 89 df             	mov    %rbx,%rdi
  21130d:	4c 89 ca             	mov    %r9,%rdx
  211310:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  211315:	ff 50 18             	callq  *0x18(%rax)
  211318:	84 c0                	test   %al,%al
  21131a:	0f 85 da fa ff ff    	jne    210dfa <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x3a>
  211320:	48 89 df             	mov    %rbx,%rdi
  211323:	be 22 00 00 00       	mov    $0x22,%esi
  211328:	4c 89 f8             	mov    %r15,%rax
  21132b:	48 83 c4 58          	add    $0x58,%rsp
  21132f:	5b                   	pop    %rbx
  211330:	41 5c                	pop    %r12
  211332:	41 5d                	pop    %r13
  211334:	41 5e                	pop    %r14
  211336:	41 5f                	pop    %r15
  211338:	5d                   	pop    %rbp
  211339:	ff e0                	jmpq   *%rax
  21133b:	4c 89 c8             	mov    %r9,%rax
  21133e:	74 bf                	je     2112ff <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h332cc90289ad01c5E+0x53f>
  211340:	4c 8d 05 89 27 00 00 	lea    0x2789(%rip),%r8        # 213ad0 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x48>
  211347:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  21134c:	4c 89 ce             	mov    %r9,%rsi
  21134f:	4c 89 d2             	mov    %r10,%rdx
  211352:	4c 89 c9             	mov    %r9,%rcx
  211355:	e8 66 eb ff ff       	callq  20fec0 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E>
  21135a:	0f 0b                	ud2    
  21135c:	4c 8d 05 55 27 00 00 	lea    0x2755(%rip),%r8        # 213ab8 <anon.3bd2d5117e953c23f99d470f07b1e03a.2.llvm.2324975589069524467+0x30>
  211363:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  211368:	4c 89 ce             	mov    %r9,%rsi
  21136b:	4c 89 d2             	mov    %r10,%rdx
  21136e:	e8 4d eb ff ff       	callq  20fec0 <_ZN4core3str16slice_error_fail17h85e563778ef2c3d1E>
  211373:	0f 0b                	ud2    
  211375:	cc                   	int3   
  211376:	cc                   	int3   
  211377:	cc                   	int3   
  211378:	cc                   	int3   
  211379:	cc                   	int3   
  21137a:	cc                   	int3   
  21137b:	cc                   	int3   
  21137c:	cc                   	int3   
  21137d:	cc                   	int3   
  21137e:	cc                   	int3   
  21137f:	cc                   	int3   

0000000000211380 <_ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17hb2e2fad0044fdf34E>:
  211380:	48 89 d0             	mov    %rdx,%rax
  211383:	48 89 f2             	mov    %rsi,%rdx
  211386:	48 89 fe             	mov    %rdi,%rsi
  211389:	48 89 c7             	mov    %rax,%rdi
  21138c:	e9 0f f6 ff ff       	jmpq   2109a0 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E>
  211391:	cc                   	int3   
  211392:	cc                   	int3   
  211393:	cc                   	int3   
  211394:	cc                   	int3   
  211395:	cc                   	int3   
  211396:	cc                   	int3   
  211397:	cc                   	int3   
  211398:	cc                   	int3   
  211399:	cc                   	int3   
  21139a:	cc                   	int3   
  21139b:	cc                   	int3   
  21139c:	cc                   	int3   
  21139d:	cc                   	int3   
  21139e:	cc                   	int3   
  21139f:	cc                   	int3   

00000000002113a0 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E>:
  2113a0:	55                   	push   %rbp
  2113a1:	41 57                	push   %r15
  2113a3:	41 56                	push   %r14
  2113a5:	41 55                	push   %r13
  2113a7:	41 54                	push   %r12
  2113a9:	53                   	push   %rbx
  2113aa:	48 83 ec 18          	sub    $0x18,%rsp
  2113ae:	49 89 fe             	mov    %rdi,%r14
  2113b1:	48 8b 5e 20          	mov    0x20(%rsi),%rbx
  2113b5:	48 8b 46 28          	mov    0x28(%rsi),%rax
  2113b9:	48 8b 40 20          	mov    0x20(%rax),%rax
  2113bd:	48 89 df             	mov    %rbx,%rdi
  2113c0:	be 27 00 00 00       	mov    $0x27,%esi
  2113c5:	49 89 c7             	mov    %rax,%r15
  2113c8:	ff d0                	callq  *%rax
  2113ca:	84 c0                	test   %al,%al
  2113cc:	74 11                	je     2113df <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x3f>
  2113ce:	b0 01                	mov    $0x1,%al
  2113d0:	48 83 c4 18          	add    $0x18,%rsp
  2113d4:	5b                   	pop    %rbx
  2113d5:	41 5c                	pop    %r12
  2113d7:	41 5d                	pop    %r13
  2113d9:	41 5e                	pop    %r14
  2113db:	41 5f                	pop    %r15
  2113dd:	5d                   	pop    %rbp
  2113de:	c3                   	retq   
  2113df:	41 8b 3e             	mov    (%r14),%edi
  2113e2:	8d 4f f7             	lea    -0x9(%rdi),%ecx
  2113e5:	83 f9 1e             	cmp    $0x1e,%ecx
  2113e8:	77 5a                	ja     211444 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0xa4>
  2113ea:	be 74 00 00 00       	mov    $0x74,%esi
  2113ef:	b8 02 00 00 00       	mov    $0x2,%eax
  2113f4:	48 8d 15 09 0e ff ff 	lea    -0xf1f7(%rip),%rdx        # 202204 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x93>
  2113fb:	48 63 0c 8a          	movslq (%rdx,%rcx,4),%rcx
  2113ff:	48 01 d1             	add    %rdx,%rcx
  211402:	ff e1                	jmpq   *%rcx
  211404:	c7 44 24 0c 6e 00 00 	movl   $0x6e,0xc(%rsp)
  21140b:	00 
  21140c:	b8 02 00 00 00       	mov    $0x2,%eax
  211411:	48 b9 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rcx
  211418:	ff ff ff 
  21141b:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  211420:	49 c7 c5 ff ff ff ff 	mov    $0xffffffffffffffff,%r13
  211427:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  21142d:	be 5c 00 00 00       	mov    $0x5c,%esi
  211432:	89 c0                	mov    %eax,%eax
  211434:	48 8d 0d 45 0e ff ff 	lea    -0xf1bb(%rip),%rcx        # 202280 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x10f>
  21143b:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  21143f:	48 01 c8             	add    %rcx,%rax
  211442:	ff e0                	jmpq   *%rax
  211444:	83 ff 5c             	cmp    $0x5c,%edi
  211447:	75 3e                	jne    211487 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0xe7>
  211449:	b8 02 00 00 00       	mov    $0x2,%eax
  21144e:	48 b9 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rcx
  211455:	ff ff ff 
  211458:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  21145d:	49 c7 c5 ff ff ff ff 	mov    $0xffffffffffffffff,%r13
  211464:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  21146a:	be 5c 00 00 00       	mov    $0x5c,%esi
  21146f:	89 c0                	mov    %eax,%eax
  211471:	48 8d 0d 08 0e ff ff 	lea    -0xf1f8(%rip),%rcx        # 202280 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x10f>
  211478:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  21147c:	48 01 c8             	add    %rcx,%rax
  21147f:	89 f9                	mov    %edi,%ecx
  211481:	89 7c 24 0c          	mov    %edi,0xc(%rsp)
  211485:	ff e0                	jmpq   *%rax
  211487:	48 89 fd             	mov    %rdi,%rbp
  21148a:	e8 b1 d8 ff ff       	callq  20ed40 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h6a29954e7b496cc5E>
  21148f:	84 c0                	test   %al,%al
  211491:	0f 84 d4 00 00 00    	je     21156b <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x1cb>
  211497:	89 e8                	mov    %ebp,%eax
  211499:	83 cd 01             	or     $0x1,%ebp
  21149c:	0f bd ed             	bsr    %ebp,%ebp
  21149f:	83 f5 1c             	xor    $0x1c,%ebp
  2114a2:	c1 ed 02             	shr    $0x2,%ebp
  2114a5:	83 f5 07             	xor    $0x7,%ebp
  2114a8:	49 be 00 00 00 00 05 	movabs $0x500000000,%r14
  2114af:	00 00 00 
  2114b2:	49 09 c6             	or     %rax,%r14
  2114b5:	b8 03 00 00 00       	mov    $0x3,%eax
  2114ba:	48 b9 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rcx
  2114c1:	ff ff ff 
  2114c4:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  2114c9:	49 c7 c5 ff ff ff ff 	mov    $0xffffffffffffffff,%r13
  2114d0:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  2114d6:	be 5c 00 00 00       	mov    $0x5c,%esi
  2114db:	89 c0                	mov    %eax,%eax
  2114dd:	48 8d 0d 9c 0d ff ff 	lea    -0xf264(%rip),%rcx        # 202280 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x10f>
  2114e4:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  2114e8:	48 01 c8             	add    %rcx,%rax
  2114eb:	ff e0                	jmpq   *%rax
  2114ed:	c7 44 24 0c 72 00 00 	movl   $0x72,0xc(%rsp)
  2114f4:	00 
  2114f5:	b8 02 00 00 00       	mov    $0x2,%eax
  2114fa:	48 b9 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rcx
  211501:	ff ff ff 
  211504:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  211509:	49 c7 c5 ff ff ff ff 	mov    $0xffffffffffffffff,%r13
  211510:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  211516:	be 5c 00 00 00       	mov    $0x5c,%esi
  21151b:	89 c0                	mov    %eax,%eax
  21151d:	48 8d 0d 5c 0d ff ff 	lea    -0xf2a4(%rip),%rcx        # 202280 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x10f>
  211524:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  211528:	48 01 c8             	add    %rcx,%rax
  21152b:	ff e0                	jmpq   *%rax
  21152d:	b8 02 00 00 00       	mov    $0x2,%eax
  211532:	48 b9 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rcx
  211539:	ff ff ff 
  21153c:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  211541:	49 c7 c5 ff ff ff ff 	mov    $0xffffffffffffffff,%r13
  211548:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  21154e:	be 5c 00 00 00       	mov    $0x5c,%esi
  211553:	89 c0                	mov    %eax,%eax
  211555:	48 8d 0d 24 0d ff ff 	lea    -0xf2dc(%rip),%rcx        # 202280 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x10f>
  21155c:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  211560:	48 01 c8             	add    %rcx,%rax
  211563:	89 f9                	mov    %edi,%ecx
  211565:	89 7c 24 0c          	mov    %edi,0xc(%rsp)
  211569:	ff e0                	jmpq   *%rax
  21156b:	81 fd 00 00 01 00    	cmp    $0x10000,%ebp
  211571:	73 3c                	jae    2115af <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x20f>
  211573:	48 c7 04 24 2f 01 00 	movq   $0x12f,(%rsp)
  21157a:	00 
  21157b:	48 8d 35 7f 05 ff ff 	lea    -0xfa81(%rip),%rsi        # 201b01 <anon.2ed67ef31f4689dedcb1c0a297117e92.14.llvm.10168945396431757462>
  211582:	48 8d 0d c8 05 ff ff 	lea    -0xfa38(%rip),%rcx        # 201b51 <anon.2ed67ef31f4689dedcb1c0a297117e92.15.llvm.10168945396431757462>
  211589:	4c 8d 0d e1 06 ff ff 	lea    -0xf91f(%rip),%r9        # 201c71 <anon.2ed67ef31f4689dedcb1c0a297117e92.16.llvm.10168945396431757462>
  211590:	ba 28 00 00 00       	mov    $0x28,%edx
  211595:	41 b8 20 01 00 00    	mov    $0x120,%r8d
  21159b:	89 ef                	mov    %ebp,%edi
  21159d:	e8 5e e3 ff ff       	callq  20f900 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462>
  2115a2:	84 c0                	test   %al,%al
  2115a4:	0f 85 9f 00 00 00    	jne    211649 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2a9>
  2115aa:	e9 a3 00 00 00       	jmpq   211652 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2b2>
  2115af:	81 fd 00 00 02 00    	cmp    $0x20000,%ebp
  2115b5:	73 35                	jae    2115ec <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x24c>
  2115b7:	48 c7 04 24 b6 01 00 	movq   $0x1b6,(%rsp)
  2115be:	00 
  2115bf:	48 8d 35 da 07 ff ff 	lea    -0xf826(%rip),%rsi        # 201da0 <anon.2ed67ef31f4689dedcb1c0a297117e92.17.llvm.10168945396431757462>
  2115c6:	48 8d 0d 27 08 ff ff 	lea    -0xf7d9(%rip),%rcx        # 201df4 <anon.2ed67ef31f4689dedcb1c0a297117e92.18.llvm.10168945396431757462>
  2115cd:	4c 8d 0d e0 08 ff ff 	lea    -0xf720(%rip),%r9        # 201eb4 <anon.2ed67ef31f4689dedcb1c0a297117e92.19.llvm.10168945396431757462>
  2115d4:	ba 2a 00 00 00       	mov    $0x2a,%edx
  2115d9:	41 b8 c0 00 00 00    	mov    $0xc0,%r8d
  2115df:	89 ef                	mov    %ebp,%edi
  2115e1:	e8 1a e3 ff ff       	callq  20f900 <_ZN4core7unicode9printable5check17h4ebe45ea4b1772a5E.llvm.10168945396431757462>
  2115e6:	84 c0                	test   %al,%al
  2115e8:	75 5f                	jne    211649 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2a9>
  2115ea:	eb 66                	jmp    211652 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2b2>
  2115ec:	89 e8                	mov    %ebp,%eax
  2115ee:	83 e0 e0             	and    $0xffffffe0,%eax
  2115f1:	3d e0 a6 02 00       	cmp    $0x2a6e0,%eax
  2115f6:	74 5a                	je     211652 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2b2>
  2115f8:	8d 85 c7 48 fd ff    	lea    -0x2b739(%rbp),%eax
  2115fe:	83 f8 07             	cmp    $0x7,%eax
  211601:	72 4f                	jb     211652 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2b2>
  211603:	89 e8                	mov    %ebp,%eax
  211605:	83 e0 fe             	and    $0xfffffffe,%eax
  211608:	3d 1e b8 02 00       	cmp    $0x2b81e,%eax
  21160d:	74 43                	je     211652 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2b2>
  21160f:	8d 85 5e 31 fd ff    	lea    -0x2cea2(%rbp),%eax
  211615:	83 f8 0e             	cmp    $0xe,%eax
  211618:	72 38                	jb     211652 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2b2>
  21161a:	8d 85 1f 14 fd ff    	lea    -0x2ebe1(%rbp),%eax
  211620:	3d 1f 0c 00 00       	cmp    $0xc1f,%eax
  211625:	72 2b                	jb     211652 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2b2>
  211627:	8d 85 e2 05 fd ff    	lea    -0x2fa1e(%rbp),%eax
  21162d:	3d e2 05 00 00       	cmp    $0x5e2,%eax
  211632:	72 1e                	jb     211652 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2b2>
  211634:	8d 85 b5 ec fc ff    	lea    -0x3134b(%rbp),%eax
  21163a:	3d b5 ed 0a 00       	cmp    $0xaedb5,%eax
  21163f:	72 11                	jb     211652 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2b2>
  211641:	81 fd f0 01 0e 00    	cmp    $0xe01f0,%ebp
  211647:	73 09                	jae    211652 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2b2>
  211649:	b8 01 00 00 00       	mov    $0x1,%eax
  21164e:	89 ee                	mov    %ebp,%esi
  211650:	eb 23                	jmp    211675 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2d5>
  211652:	89 e8                	mov    %ebp,%eax
  211654:	83 cd 01             	or     $0x1,%ebp
  211657:	0f bd ed             	bsr    %ebp,%ebp
  21165a:	83 f5 1c             	xor    $0x1c,%ebp
  21165d:	c1 ed 02             	shr    $0x2,%ebp
  211660:	83 f5 07             	xor    $0x7,%ebp
  211663:	49 be 00 00 00 00 05 	movabs $0x500000000,%r14
  21166a:	00 00 00 
  21166d:	49 09 c6             	or     %rax,%r14
  211670:	b8 03 00 00 00       	mov    $0x3,%eax
  211675:	89 74 24 0c          	mov    %esi,0xc(%rsp)
  211679:	48 b9 ff ff ff ff 00 	movabs $0xffffff00ffffffff,%rcx
  211680:	ff ff ff 
  211683:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  211688:	49 c7 c5 ff ff ff ff 	mov    $0xffffffffffffffff,%r13
  21168f:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  211695:	be 5c 00 00 00       	mov    $0x5c,%esi
  21169a:	89 c0                	mov    %eax,%eax
  21169c:	48 8d 0d dd 0b ff ff 	lea    -0xf423(%rip),%rcx        # 202280 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x10f>
  2116a3:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  2116a7:	48 01 c8             	add    %rcx,%rax
  2116aa:	ff e0                	jmpq   *%rax
  2116ac:	0f 1f 40 00          	nopl   0x0(%rax)
  2116b0:	48 89 df             	mov    %rbx,%rdi
  2116b3:	41 ff d7             	callq  *%r15
  2116b6:	84 c0                	test   %al,%al
  2116b8:	0f 85 10 fd ff ff    	jne    2113ce <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x2e>
  2116be:	be 5c 00 00 00       	mov    $0x5c,%esi
  2116c3:	44 89 e0             	mov    %r12d,%eax
  2116c6:	48 8d 0d b3 0b ff ff 	lea    -0xf44d(%rip),%rcx        # 202280 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x10f>
  2116cd:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  2116d1:	48 01 c8             	add    %rcx,%rax
  2116d4:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  2116da:	ff e0                	jmpq   *%rax
  2116dc:	45 31 e4             	xor    %r12d,%r12d
  2116df:	8b 74 24 0c          	mov    0xc(%rsp),%esi
  2116e3:	eb cb                	jmp    2116b0 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x310>
  2116e5:	4c 89 f0             	mov    %r14,%rax
  2116e8:	48 c1 e8 20          	shr    $0x20,%rax
  2116ec:	0f b6 c0             	movzbl %al,%eax
  2116ef:	48 8d 0d 9a 0b ff ff 	lea    -0xf466(%rip),%rcx        # 202290 <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x11f>
  2116f6:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
  2116fa:	48 01 c8             	add    %rcx,%rax
  2116fd:	ff e0                	jmpq   *%rax
  2116ff:	4c 21 ed             	and    %r13,%rbp
  211702:	4c 23 74 24 10       	and    0x10(%rsp),%r14
  211707:	41 bc 03 00 00 00    	mov    $0x3,%r12d
  21170d:	be 7d 00 00 00       	mov    $0x7d,%esi
  211712:	eb 9c                	jmp    2116b0 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x310>
  211714:	8d 0c ad 00 00 00 00 	lea    0x0(,%rbp,4),%ecx
  21171b:	44 89 f0             	mov    %r14d,%eax
  21171e:	d3 e8                	shr    %cl,%eax
  211720:	83 e0 0f             	and    $0xf,%eax
  211723:	8d 48 57             	lea    0x57(%rax),%ecx
  211726:	89 c6                	mov    %eax,%esi
  211728:	83 ce 30             	or     $0x30,%esi
  21172b:	3c 0a                	cmp    $0xa,%al
  21172d:	0f 43 f1             	cmovae %ecx,%esi
  211730:	48 85 ed             	test   %rbp,%rbp
  211733:	74 7e                	je     2117b3 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x413>
  211735:	48 83 c5 ff          	add    $0xffffffffffffffff,%rbp
  211739:	41 bc 03 00 00 00    	mov    $0x3,%r12d
  21173f:	e9 6c ff ff ff       	jmpq   2116b0 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x310>
  211744:	4c 21 ed             	and    %r13,%rbp
  211747:	4c 23 74 24 10       	and    0x10(%rsp),%r14
  21174c:	48 b8 00 00 00 00 02 	movabs $0x200000000,%rax
  211753:	00 00 00 
  211756:	49 09 c6             	or     %rax,%r14
  211759:	41 bc 03 00 00 00    	mov    $0x3,%r12d
  21175f:	be 7b 00 00 00       	mov    $0x7b,%esi
  211764:	e9 47 ff ff ff       	jmpq   2116b0 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x310>
  211769:	4c 21 ed             	and    %r13,%rbp
  21176c:	4c 23 74 24 10       	and    0x10(%rsp),%r14
  211771:	48 b8 00 00 00 00 03 	movabs $0x300000000,%rax
  211778:	00 00 00 
  21177b:	49 09 c6             	or     %rax,%r14
  21177e:	41 bc 03 00 00 00    	mov    $0x3,%r12d
  211784:	be 75 00 00 00       	mov    $0x75,%esi
  211789:	e9 22 ff ff ff       	jmpq   2116b0 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x310>
  21178e:	4c 21 ed             	and    %r13,%rbp
  211791:	4c 23 74 24 10       	and    0x10(%rsp),%r14
  211796:	48 b8 00 00 00 00 04 	movabs $0x400000000,%rax
  21179d:	00 00 00 
  2117a0:	49 09 c6             	or     %rax,%r14
  2117a3:	41 bc 03 00 00 00    	mov    $0x3,%r12d
  2117a9:	be 5c 00 00 00       	mov    $0x5c,%esi
  2117ae:	e9 fd fe ff ff       	jmpq   2116b0 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x310>
  2117b3:	4c 21 ed             	and    %r13,%rbp
  2117b6:	4c 23 74 24 10       	and    0x10(%rsp),%r14
  2117bb:	48 b8 00 00 00 00 01 	movabs $0x100000000,%rax
  2117c2:	00 00 00 
  2117c5:	49 09 c6             	or     %rax,%r14
  2117c8:	41 bc 03 00 00 00    	mov    $0x3,%r12d
  2117ce:	e9 dd fe ff ff       	jmpq   2116b0 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h354d983438e37468E+0x310>
  2117d3:	48 89 df             	mov    %rbx,%rdi
  2117d6:	be 27 00 00 00       	mov    $0x27,%esi
  2117db:	4c 89 f8             	mov    %r15,%rax
  2117de:	48 83 c4 18          	add    $0x18,%rsp
  2117e2:	5b                   	pop    %rbx
  2117e3:	41 5c                	pop    %r12
  2117e5:	41 5d                	pop    %r13
  2117e7:	41 5e                	pop    %r14
  2117e9:	41 5f                	pop    %r15
  2117eb:	5d                   	pop    %rbp
  2117ec:	ff e0                	jmpq   *%rax
  2117ee:	cc                   	int3   
  2117ef:	cc                   	int3   

00000000002117f0 <_ZN53_$LT$core..fmt..Error$u20$as$u20$core..fmt..Debug$GT$3fmt17h558b5ba4ec7667bfE>:
  2117f0:	48 8b 7e 20          	mov    0x20(%rsi),%rdi
  2117f4:	48 8b 46 28          	mov    0x28(%rsi),%rax
  2117f8:	48 8b 40 18          	mov    0x18(%rax),%rax
  2117fc:	48 8d 35 19 0b ff ff 	lea    -0xf4e7(%rip),%rsi        # 20231c <anon.675a8c007e0eb0dbd1338020c4dcf401.5.llvm.17324098355855342093+0x1ab>
  211803:	ba 05 00 00 00       	mov    $0x5,%edx
  211808:	ff e0                	jmpq   *%rax
  21180a:	cc                   	int3   
  21180b:	cc                   	int3   
  21180c:	cc                   	int3   
  21180d:	cc                   	int3   
  21180e:	cc                   	int3   
  21180f:	cc                   	int3   

0000000000211810 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0f1c2c822df607e7E>:
  211810:	48 8b 07             	mov    (%rdi),%rax
  211813:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
  211817:	48 8b 49 18          	mov    0x18(%rcx),%rcx
  21181b:	48 89 c7             	mov    %rax,%rdi
  21181e:	ff e1                	jmpq   *%rcx

0000000000211820 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17ha531d85b66484de1E>:
  211820:	48 83 ec 38          	sub    $0x38,%rsp
  211824:	48 8b 07             	mov    (%rdi),%rax
  211827:	48 8b 7e 20          	mov    0x20(%rsi),%rdi
  21182b:	48 8b 76 28          	mov    0x28(%rsi),%rsi
  21182f:	48 8b 48 28          	mov    0x28(%rax),%rcx
  211833:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  211838:	48 8b 48 20          	mov    0x20(%rax),%rcx
  21183c:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  211841:	48 8b 48 18          	mov    0x18(%rax),%rcx
  211845:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  21184a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  21184e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  211853:	48 8b 08             	mov    (%rax),%rcx
  211856:	48 8b 40 08          	mov    0x8(%rax),%rax
  21185a:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  21185f:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  211864:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
  211869:	e8 d2 ea ff ff       	callq  210340 <_ZN4core3fmt5write17hc2fa65ca5f6f7fcfE>
  21186e:	48 83 c4 38          	add    $0x38,%rsp
  211872:	c3                   	retq   
  211873:	cc                   	int3   
  211874:	cc                   	int3   
  211875:	cc                   	int3   
  211876:	cc                   	int3   
  211877:	cc                   	int3   
  211878:	cc                   	int3   
  211879:	cc                   	int3   
  21187a:	cc                   	int3   
  21187b:	cc                   	int3   
  21187c:	cc                   	int3   
  21187d:	cc                   	int3   
  21187e:	cc                   	int3   
  21187f:	cc                   	int3   

0000000000211880 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hadaf44284d67ee8bE>:
  211880:	48 89 f0             	mov    %rsi,%rax
  211883:	48 8b 0f             	mov    (%rdi),%rcx
  211886:	48 8b 31             	mov    (%rcx),%rsi
  211889:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  21188d:	48 89 c7             	mov    %rax,%rdi
  211890:	e9 0b f1 ff ff       	jmpq   2109a0 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E>
  211895:	cc                   	int3   
  211896:	cc                   	int3   
  211897:	cc                   	int3   
  211898:	cc                   	int3   
  211899:	cc                   	int3   
  21189a:	cc                   	int3   
  21189b:	cc                   	int3   
  21189c:	cc                   	int3   
  21189d:	cc                   	int3   
  21189e:	cc                   	int3   
  21189f:	cc                   	int3   

00000000002118a0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17heacd4ee5f6ef5e5fE>:
  2118a0:	48 89 f0             	mov    %rsi,%rax
  2118a3:	48 8b 37             	mov    (%rdi),%rsi
  2118a6:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  2118aa:	48 89 c7             	mov    %rax,%rdi
  2118ad:	e9 ee f0 ff ff       	jmpq   2109a0 <_ZN4core3fmt9Formatter3pad17h321fd0b4088825c8E>
  2118b2:	cc                   	int3   
  2118b3:	cc                   	int3   
  2118b4:	cc                   	int3   
  2118b5:	cc                   	int3   
  2118b6:	cc                   	int3   
  2118b7:	cc                   	int3   
  2118b8:	cc                   	int3   
  2118b9:	cc                   	int3   
  2118ba:	cc                   	int3   
  2118bb:	cc                   	int3   
  2118bc:	cc                   	int3   
  2118bd:	cc                   	int3   
  2118be:	cc                   	int3   
  2118bf:	cc                   	int3   

00000000002118c0 <memcpy>:
  2118c0:	48 89 f8             	mov    %rdi,%rax
  2118c3:	48 89 d1             	mov    %rdx,%rcx
  2118c6:	48 c1 e9 03          	shr    $0x3,%rcx
  2118ca:	83 e2 07             	and    $0x7,%edx
  2118cd:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
  2118d0:	89 d1                	mov    %edx,%ecx
  2118d2:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  2118d4:	c3                   	retq   
  2118d5:	cc                   	int3   
  2118d6:	cc                   	int3   
  2118d7:	cc                   	int3   
  2118d8:	cc                   	int3   
  2118d9:	cc                   	int3   
  2118da:	cc                   	int3   
  2118db:	cc                   	int3   
  2118dc:	cc                   	int3   
  2118dd:	cc                   	int3   
  2118de:	cc                   	int3   
  2118df:	cc                   	int3   

00000000002118e0 <memset>:
  2118e0:	49 89 f8             	mov    %rdi,%r8
  2118e3:	48 89 d1             	mov    %rdx,%rcx
  2118e6:	48 c1 e9 03          	shr    $0x3,%rcx
  2118ea:	83 e2 07             	and    $0x7,%edx
  2118ed:	40 0f b6 f6          	movzbl %sil,%esi
  2118f1:	48 b8 01 01 01 01 01 	movabs $0x101010101010101,%rax
  2118f8:	01 01 01 
  2118fb:	48 0f af c6          	imul   %rsi,%rax
  2118ff:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  211902:	89 d1                	mov    %edx,%ecx
  211904:	f3 aa                	rep stos %al,%es:(%rdi)
  211906:	4c 89 c0             	mov    %r8,%rax
  211909:	c3                   	retq   
